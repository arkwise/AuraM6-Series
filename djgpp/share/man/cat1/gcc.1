


GCC(1)                         GNU                         GCC(1)


NNAAMMEE
       gcc - GNU project C and C++ compiler

SSYYNNOOPPSSIISS
       gcc [--cc|--SS|--EE] [--ssttdd==_s_t_a_n_d_a_r_d]
           [--gg] [--ppgg] [--OO_l_e_v_e_l]
           [--WW_w_a_r_n...] [--ppeeddaannttiicc]
           [--II_d_i_r...] [--LL_d_i_r...]
           [--DD_m_a_c_r_o[=_d_e_f_n]...] [--UU_m_a_c_r_o]
           [--ff_o_p_t_i_o_n...] [--mm_m_a_c_h_i_n_e_-_o_p_t_i_o_n...]
           [--oo _o_u_t_f_i_l_e] [@_f_i_l_e] _i_n_f_i_l_e...

       Only the most useful options are listed here; see below
       for the remainder.  gg++++ accepts mostly the same options as
       ggcccc.

DDEESSCCRRIIPPTTIIOONN
       When you invoke GCC, it normally does preprocessing,
       compilation, assembly and linking.  The "overall options"
       allow you to stop this process at an intermediate stage.
       For example, the --cc option says not to run the linker.
       Then the output consists of object files output by the
       assembler.

       Other options are passed on to one stage of processing.
       Some options control the preprocessor and others the
       compiler itself.  Yet other options control the assembler
       and linker; most of these are not documented here, since
       you rarely need to use any of them.

       Most of the command-line options that you can use with GCC
       are useful for C programs; when an option is only useful
       with another language (usually C++), the explanation says
       so explicitly.  If the description for a particular option
       does not mention a source language, you can use that
       option with all supported languages.

       The ggcccc program accepts options and file names as
       operands.  Many options have multi-letter names; therefore
       multiple single-letter options may _n_o_t be grouped: --ddvv is
       very different from --dd --vv.

       You can mix options and other arguments.  For the most
       part, the order you use doesn't matter.  Order does matter
       when you use several options of the same kind; for
       example, if you specify --LL more than once, the directories
       are searched in the order specified.  Also, the placement
       of the --ll option is significant.

       Many options have long names starting with --ff or with
       --WW---for example, --ffmmoovvee--lloooopp--iinnvvaarriiaannttss, --WWffoorrmmaatt and so
       on.  Most of these have both positive and negative forms;
       the negative form of --ffffoooo would be --ffnnoo--ffoooo.  This manual
       documents only one of these two forms, whichever one is



gcc-4.74                    2014-06-12                          1





GCC(1)                         GNU                         GCC(1)


       not the default.

OOPPTTIIOONNSS
       OOppttiioonn SSuummmmaarryy

       Here is a summary of all the options, grouped by type.
       Explanations are in the following sections.

       _O_v_e_r_a_l_l _O_p_t_i_o_n_s
           --cc  --SS  --EE  --oo _f_i_l_e  --nnoo--ccaannoonniiccaall--pprreeffiixxeess --ppiippee
           --ppaassss--eexxiitt--ccooddeess --xx _l_a_n_g_u_a_g_e  --vv  --######
           ----hheellpp[==_c_l_a_s_s[,,......]]  ----ttaarrggeett--hheellpp ----vveerrssiioonn --wwrraappppeerr
           @@_f_i_l_e --ffpplluuggiinn==_f_i_l_e --ffpplluuggiinn--aarrgg--_n_a_m_e==_a_r_g
           --ffdduummpp--aaddaa--ssppeecc[--sslliimm] --ffdduummpp--ggoo--ssppeecc==_f_i_l_e

       _C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --aannssii  --ssttdd==_s_t_a_n_d_a_r_d  --ffggnnuu8899--iinnlliinnee --aauuxx--iinnffoo
           _f_i_l_e_n_a_m_e --ffaallllooww--ppaarraammeetteerrlleessss--vvaarriiaaddiicc--ffuunnccttiioonnss
           --ffnnoo--aassmm  --ffnnoo--bbuuiillttiinn  --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n --ffhhoosstteedd
           --ffffrreeeessttaannddiinngg --ffooppeennmmpp --ffmmss--eexxtteennssiioonnss
           --ffppllaann99--eexxtteennssiioonnss --ttrriiggrraapphhss  --nnoo--iinntteeggrraatteedd--ccpppp
           --ttrraaddiittiioonnaall  --ttrraaddiittiioonnaall--ccpppp
           --ffaallllooww--ssiinnggllee--pprreecciissiioonn  --ffccoonndd--mmiissmmaattcchh
           --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss --ffssiiggnneedd--bbiittffiieellddss
           --ffssiiggnneedd--cchhaarr --ffuunnssiiggnneedd--bbiittffiieellddss  --ffuunnssiiggnneedd--cchhaarr

       _C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffaabbii--vveerrssiioonn==_n  --ffnnoo--aacccceessss--ccoonnttrrooll  --ffcchheecckk--nneeww
           --ffccoonnsseerrvvee--ssppaaccee  --ffccoonnsstteexxpprr--ddeepptthh==_n
           --ffffrriieenndd--iinnjjeeccttiioonn --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
           --ffnnoo--eennffoorrccee--eehh--ssppeeccss --ffffoorr--ssccooppee  --ffnnoo--ffoorr--ssccooppee
           --ffnnoo--ggnnuu--kkeeyywwoorrddss --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
           --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
           --ffmmss--eexxtteennssiioonnss --ffnnoo--nnoonnaannssii--bbuuiillttiinnss  --ffnnootthhrrooww--oopptt
           --ffnnoo--ooppeerraattoorr--nnaammeess --ffnnoo--ooppttiioonnaall--ddiiaaggss  --ffppeerrmmiissssiivvee
           --ffnnoo--pprreettttyy--tteemmppllaatteess --ffrreeppoo  --ffnnoo--rrttttii  --ffssttaattss
           --fftteemmppllaattee--ddeepptthh==_n --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           --ffuussee--ccxxaa--aatteexxiitt  --ffnnoo--wweeaakk  --nnoossttddiinncc++++
           --ffnnoo--ddeeffaauulltt--iinnlliinnee  --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           --ffvviissiibbiilliittyy--mmss--ccoommppaatt --WWaabbii  --WWccoonnvveerrssiioonn--nnuullll
           --WWccttoorr--ddttoorr--pprriivvaaccyy --WWddeelleettee--nnoonn--vviirrttuuaall--ddttoorr
           --WWnnaarrrroowwiinngg --WWnnooeexxcceepptt --WWnnoonn--vviirrttuuaall--ddttoorr  --WWrreeoorrddeerr
           --WWeeffffcc++++  --WWssttrriicctt--nnuullll--sseennttiinneell
           --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd  --WWoolldd--ssttyyllee--ccaasstt
           --WWoovveerrllooaaddeedd--vviirrttuuaall  --WWnnoo--ppmmff--ccoonnvveerrssiioonnss
           --WWssiiggnn--pprroommoo

       _O_b_j_e_c_t_i_v_e_-_C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e --ffggnnuu--rruunnttiimmee
           --ffnneexxtt--rruunnttiimmee --ffnnoo--nniill--rreecceeiivveerrss --ffoobbjjcc--aabbii--vveerrssiioonn==_n
           --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           --ffoobbjjcc--eexxcceeppttiioonnss --ffoobbjjcc--ggcc --ffoobbjjcc--nniillcchheecckk
           --ffoobbjjcc--ssttdd==oobbjjcc11 --ffrreeppllaaccee--oobbjjcc--ccllaasssseess --ffzzeerroo--lliinnkk
           --ggeenn--ddeeccllss --WWaassssiiggnn--iinntteerrcceepptt --WWnnoo--pprroottooccooll



gcc-4.74                    2014-06-12                          2





GCC(1)                         GNU                         GCC(1)


           --WWsseelleeccttoorr --WWssttrriicctt--sseelleeccttoorr--mmaattcchh
           --WWuunnddeeccllaarreedd--sseelleeccttoorr

       _L_a_n_g_u_a_g_e _I_n_d_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           --ffmmeessssaaggee--lleennggtthh==_n
           --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==[oonnccee|eevveerryy--lliinnee]
           --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn

       _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --ffssyynnttaaxx--oonnllyy  --ffmmaaxx--eerrrroorrss==_n  --ppeeddaannttiicc
           --ppeeddaannttiicc--eerrrroorrss --ww  --WWeexxttrraa  --WWaallll  --WWaaddddrreessss
           --WWaaggggrreeggaattee--rreettuurrnn  --WWaarrrraayy--bboouunnddss --WWnnoo--aattttrriibbuutteess
           --WWnnoo--bbuuiillttiinn--mmaaccrroo--rreeddeeffiinneedd --WWcc++++--ccoommppaatt
           --WWcc++++1111--ccoommppaatt --WWccaasstt--aalliiggnn  --WWccaasstt--qquuaall
           --WWcchhaarr--ssuubbssccrriippttss --WWcclloobbbbeerreedd  --WWccoommmmeenntt --WWccoonnvveerrssiioonn
           --WWccoovveerraaggee--mmiissmmaattcchh  --WWnnoo--ccpppp  --WWnnoo--ddeepprreeccaatteedd
           --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
           --WWnnoo--ddiivv--bbyy--zzeerroo --WWddoouubbllee--pprroommoottiioonn --WWeemmppttyy--bbooddyy
           --WWeennuumm--ccoommppaarree --WWnnoo--eennddiiff--llaabbeellss --WWeerrrroorr  --WWeerrrroorr==**
           --WWffaattaall--eerrrroorrss  --WWffllooaatt--eeqquuaall  --WWffoorrmmaatt  --WWffoorrmmaatt==22
           --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
           --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuurriittyy  --WWffoorrmmaatt--yy22kk
           --WWffrraammee--llaarrggeerr--tthhaann==_l_e_n --WWnnoo--ffrreeee--nnoonnhheeaapp--oobbjjeecctt
           --WWjjuummpp--mmiisssseess--iinniitt --WWiiggnnoorreedd--qquuaalliiffiieerrss --WWiimmpplliicciitt
           --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn  --WWiimmpplliicciitt--iinntt
           --WWiinniitt--sseellff  --WWiinnlliinnee --WWmmaayybbee--uunniinniittiiaalliizzeedd
           --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt --WWnnoo--iinnvvaalliidd--ooffffsseettooff
           --WWiinnvvaalliidd--ppcchh --WWllaarrggeerr--tthhaann==_l_e_n
           --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss --WWllooggiiccaall--oopp --WWlloonngg--lloonngg
           --WWmmaaiinn --WWmmaayybbee--uunniinniittiiaalliizzeedd --WWmmiissssiinngg--bbrraacceess
           --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee  --WWmmiissssiinngg--iinncclluuddee--ddiirrss
           --WWnnoo--mmuuddffllaapp --WWnnoo--mmuullttiicchhaarr  --WWnnoonnnnuullll  --WWnnoo--oovveerrffllooww
           --WWoovveerrlleennggtthh--ssttrriinnggss  --WWppaacckkeedd
           --WWppaacckkeedd--bbiittffiieelldd--ccoommppaatt  --WWppaaddddeedd --WWppaarreenntthheesseess
           --WWppeeddaannttiicc--mmss--ffoorrmmaatt --WWnnoo--ppeeddaannttiicc--mmss--ffoorrmmaatt
           --WWppooiinntteerr--aarriitthh  --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt
           --WWrreedduunnddaanntt--ddeeccllss --WWrreettuurrnn--ttyyppee  --WWsseeqquueennccee--ppooiinntt
           --WWsshhaaddooww --WWssiiggnn--ccoommppaarree  --WWssiiggnn--ccoonnvveerrssiioonn
           --WWssttaacckk--pprrootteeccttoorr --WWssttaacckk--uussaaggee==_l_e_n --WWssttrriicctt--aalliiaassiinngg
           --WWssttrriicctt--aalliiaassiinngg==nn --WWssttrriicctt--oovveerrffllooww
           --WWssttrriicctt--oovveerrffllooww==_n
           --WWssuuggggeesstt--aattttrriibbuuttee==[ppuurree|ccoonnsstt|nnoorreettuurrnn] --WWsswwiittcchh
           --WWsswwiittcchh--ddeeffaauulltt  --WWsswwiittcchh--eennuumm --WWssyynncc--nnaanndd
           --WWssyysstteemm--hheeaaddeerrss  --WWttrraammppoolliinneess  --WWttrriiggrraapphhss
           --WWttyyppee--lliimmiittss  --WWuunnddeeff --WWuunniinniittiiaalliizzeedd
           --WWuunnkknnoowwnn--pprraaggmmaass  --WWnnoo--pprraaggmmaass
           --WWuunnssuuffffiixxeedd--ffllooaatt--ccoonnssttaannttss  --WWuunnuusseedd
           --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell
           --WWuunnuusseedd--llooccaall--ttyyppeeddeeffss --WWuunnuusseedd--ppaarraammeetteerr
           --WWnnoo--uunnuusseedd--rreessuulltt --WWuunnuusseedd--vvaalluuee  --WWuunnuusseedd--vvaarriiaabbllee
           --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr --WWuunnuusseedd--bbuutt--sseett--vvaarriiaabbllee
           --WWvvaarriiaaddiicc--mmaaccrrooss --WWvveeccttoorr--ooppeerraattiioonn--ppeerrffoorrmmaannccee --WWvvllaa
           --WWvvoollaattiillee--rreeggiisstteerr--vvaarr  --WWwwrriittee--ssttrriinnggss



gcc-4.74                    2014-06-12                          3





GCC(1)                         GNU                         GCC(1)


           --WWzzeerroo--aass--nnuullll--ppooiinntteerr--ccoonnssttaanntt

       _C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_-_o_n_l_y _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --WWbbaadd--ffuunnccttiioonn--ccaasstt  --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee  --WWmmiissssiinngg--pprroottoottyyppeess
           --WWnneesstteedd--eexxtteerrnnss --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn
           --WWoolldd--ssttyyllee--ddeeffiinniittiioonn --WWssttrriicctt--pprroottoottyyppeess
           --WWttrraaddiittiioonnaall  --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn
           --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt --WWppooiinntteerr--ssiiggnn

       _D_e_b_u_g_g_i_n_g _O_p_t_i_o_n_s
           --dd_l_e_t_t_e_r_s  --dduummppssppeeccss  --dduummppmmaacchhiinnee  --dduummppvveerrssiioonn
           --ffddbbgg--ccnntt--lliisstt --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t
           --ffddiissaabbllee--iippaa--_p_a_s_s___n_a_m_e --ffddiissaabbllee--rrttll--_p_a_s_s___n_a_m_e
           --ffddiissaabbllee--rrttll--_p_a_s_s_-_n_a_m_e==_r_a_n_g_e_-_l_i_s_t
           --ffddiissaabbllee--ttrreeee--_p_a_s_s___n_a_m_e --ffddiissaabbllee--ttrreeee--_p_a_s_s_-
           _n_a_m_e==_r_a_n_g_e_-_l_i_s_t --ffdduummpp--nnooaaddddrr --ffdduummpp--uunnnnuummbbeerreedd
           --ffdduummpp--uunnnnuummbbeerreedd--lliinnkkss --ffdduummpp--ttrraannssllaattiioonn--uunniitt[--_n]
           --ffdduummpp--ccllaassss--hhiieerraarrcchhyy[--_n] --ffdduummpp--iippaa--aallll
           --ffdduummpp--iippaa--ccggrraapphh --ffdduummpp--iippaa--iinnlliinnee --ffdduummpp--ppaasssseess
           --ffdduummpp--ssttaattiissttiiccss --ffdduummpp--ttrreeee--aallll
           --ffdduummpp--ttrreeee--oorriiggiinnaall[--_n] --ffdduummpp--ttrreeee--ooppttiimmiizzeedd[--_n]
           --ffdduummpp--ttrreeee--ccffgg --ffdduummpp--ttrreeee--vvccgg --ffdduummpp--ttrreeee--aalliiaass
           --ffdduummpp--ttrreeee--cchh --ffdduummpp--ttrreeee--ssssaa[--_n] --ffdduummpp--ttrreeee--pprree[--_n]
           --ffdduummpp--ttrreeee--ccccpp[--_n] --ffdduummpp--ttrreeee--ddccee[--_n]
           --ffdduummpp--ttrreeee--ggiimmppllee[--rraaww] --ffdduummpp--ttrreeee--mmuuddffllaapp[--_n]
           --ffdduummpp--ttrreeee--ddoomm[--_n] --ffdduummpp--ttrreeee--ddssee[--_n]
           --ffdduummpp--ttrreeee--pphhiipprroopp[--_n] --ffdduummpp--ttrreeee--pphhiioopptt[--_n]
           --ffdduummpp--ttrreeee--ffoorrwwpprroopp[--_n] --ffdduummpp--ttrreeee--ccooppyyrreennaammee[--_n]
           --ffdduummpp--ttrreeee--nnrrvv --ffdduummpp--ttrreeee--vveecctt --ffdduummpp--ttrreeee--ssiinnkk
           --ffdduummpp--ttrreeee--ssrraa[--_n] --ffdduummpp--ttrreeee--ffoorrwwpprroopp[--_n]
           --ffdduummpp--ttrreeee--ffrree[--_n] --ffdduummpp--ttrreeee--vvrrpp[--_n]
           --ffttrreeee--vveeccttoorriizzeerr--vveerrbboossee==_n --ffdduummpp--ttrreeee--ssttoorreeccccpp[--_n]
           --ffdduummpp--ffiinnaall--iinnssnnss==_f_i_l_e --ffccoommppaarree--ddeebbuugg[==_o_p_t_s]
           --ffccoommppaarree--ddeebbuugg--sseeccoonndd --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss
           --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss
           --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss --ffeennaabbllee--_k_i_n_d--_p_a_s_s
           --ffeennaabbllee--_k_i_n_d--_p_a_s_s==_r_a_n_g_e_-_l_i_s_t --ffddeebbuugg--ttyyppeess--sseeccttiioonn
           --ffmmeemm--rreeppoorrtt --ffpprree--iippaa--mmeemm--rreeppoorrtt
           --ffppoosstt--iippaa--mmeemm--rreeppoorrtt --ffpprrooffiillee--aarrccss
           --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g --ffsscchheedd--vveerrbboossee==_n
           --ffsseell--sscchheedd--vveerrbboossee --ffsseell--sscchheedd--dduummpp--ccffgg
           --ffsseell--sscchheedd--ppiippeelliinniinngg--vveerrbboossee --ffssttaacckk--uussaaggee
           --fftteesstt--ccoovveerraaggee  --ffttiimmee--rreeppoorrtt --ffvvaarr--ttrraacckkiinngg
           --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss
           --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss--ttooggggllee --gg  --gg_l_e_v_e_l
           --ggttooggggllee  --ggccooffff  --ggddwwaarrff--_v_e_r_s_i_o_n --ggggddbb
           --ggrreeccoorrdd--ggcccc--sswwiittcchheess  --ggnnoo--rreeccoorrdd--ggcccc--sswwiittcchheess
           --ggssttaabbss  --ggssttaabbss++  --ggssttrriicctt--ddwwaarrff  --ggnnoo--ssttrriicctt--ddwwaarrff
           --ggvvmmss  --ggxxccooffff  --ggxxccooffff++ --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss
           --ffnnoo--ddwwaarrff22--ccffii--aassmm --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd



gcc-4.74                    2014-06-12                          4





GCC(1)                         GNU                         GCC(1)


           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t] --pp  --ppgg
           --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y  --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           --pprriinntt--mmuullttii--ddiirreeccttoorryy  --pprriinntt--mmuullttii--lliibb
           --pprriinntt--mmuullttii--ooss--ddiirreeccttoorryy --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
           --pprriinntt--sseeaarrcchh--ddiirrss  --QQ --pprriinntt--ssyyssrroooott
           --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx --ssaavvee--tteemmppss
           --ssaavvee--tteemmppss==ccwwdd --ssaavvee--tteemmppss==oobbjj --ttiimmee[==_f_i_l_e]

       _O_p_t_i_m_i_z_a_t_i_o_n _O_p_t_i_o_n_s
           --ffaalliiggnn--ffuunnccttiioonnss[[==_n]] --ffaalliiggnn--jjuummppss[[==_n]]
           --ffaalliiggnn--llaabbeellss[[==_n]] --ffaalliiggnn--llooooppss[[==_n]]
           --ffaassssoocciiaattiivvee--mmaatthh --ffaauuttoo--iinncc--ddeecc
           --ffbbrraanncchh--pprroobbaabbiilliittiieess --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee
           --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22 --ffbbttrr--bbbb--eexxcclluussiivvee
           --ffccaalllleerr--ssaavveess --ffcchheecckk--ddaattaa--ddeeppss
           --ffccoommbbiinnee--ssttaacckk--aaddjjuussttmmeennttss --ffccoonnsseerrvvee--ssttaacckk
           --ffccoommppaarree--eelliimm --ffccpprroopp--rreeggiisstteerrss --ffccrroossssjjuummppiinngg
           --ffccssee--ffoollllooww--jjuummppss --ffccssee--sskkiipp--bblloocckkss
           --ffccxx--ffoorrttrraann--rruulleess --ffccxx--lliimmiitteedd--rraannggee --ffddaattaa--sseeccttiioonnss
           --ffddccee --ffddeellaayyeedd--bbrraanncchh --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss
           --ffddeevviirrttuuaalliizzee --ffddssee --ffeeaarrllyy--iinnlliinniinngg --ffiippaa--ssrraa
           --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss --ffffaatt--llttoo--oobbjjeeccttss
           --ffffaasstt--mmaatthh --ffffiinniittee--mmaatthh--oonnllyy --ffffllooaatt--ssttoorree
           --ffeexxcceessss--pprreecciissiioonn==_s_t_y_l_e --ffffoorrwwaarrdd--pprrooppaaggaattee
           --ffffpp--ccoonnttrraacctt==_s_t_y_l_e --ffffuunnccttiioonn--sseeccttiioonnss --ffggccssee
           --ffggccssee--aafftteerr--rreellooaadd --ffggccssee--llaass --ffggccssee--llmm
           --ffggrraapphhiittee--iiddeennttiittyy --ffggccssee--ssmm --ffiiff--ccoonnvveerrssiioonn
           --ffiiff--ccoonnvveerrssiioonn22 --ffiinnddiirreecctt--iinnlliinniinngg
           --ffiinnlliinnee--ffuunnccttiioonnss --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee
           --ffiinnlliinnee--lliimmiitt==_n --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss --ffiippaa--ccpp
           --ffiippaa--ccpp--cclloonnee --ffiippaa--mmaattrriixx--rreeoorrgg --ffiippaa--ppttaa
           --ffiippaa--pprrooffiillee --ffiippaa--ppuurree--ccoonnsstt --ffiippaa--rreeffeerreennccee
           --ffiirraa--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m --ffiirraa--rreeggiioonn==_r_e_g_i_o_n
           --ffiirraa--lloooopp--pprreessssuurree --ffnnoo--iirraa--sshhaarree--ssaavvee--sslloottss
           --ffnnoo--iirraa--sshhaarree--ssppiillll--sslloottss --ffiirraa--vveerrbboossee==_n --ffiivvooppttss
           --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss --ffkkeeeepp--ssttaattiicc--ccoonnssttss
           --fflloooopp--bblloocckk --fflloooopp--ffllaatttteenn --fflloooopp--iinntteerrcchhaannggee
           --fflloooopp--ssttrriipp--mmiinnee --fflloooopp--ppaarraalllleelliizzee--aallll --ffllttoo
           --ffllttoo--ccoommpprreessssiioonn--lleevveell --ffllttoo--ppaarrttiittiioonn==_a_l_g
           --ffllttoo--rreeppoorrtt --ffmmeerrggee--aallll--ccoonnssttaannttss --ffmmeerrggee--ccoonnssttaannttss
           --ffmmoodduulloo--sscchheedd --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess
           --ffmmoovvee--lloooopp--iinnvvaarriiaannttss ffmmuuddffllaapp --ffmmuuddffllaappiirr
           --ffmmuuddffllaapptthh --ffnnoo--bbrraanncchh--ccoouunntt--rreegg --ffnnoo--ddeeffaauulltt--iinnlliinnee
           --ffnnoo--ddeeffeerr--ppoopp --ffnnoo--ffuunnccttiioonn--ccssee
           --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffnnoo--iinnlliinnee
           --ffnnoo--mmaatthh--eerrrrnnoo --ffnnoo--ppeeeepphhoollee --ffnnoo--ppeeeepphhoollee22
           --ffnnoo--sscchheedd--iinntteerrbblloocckk --ffnnoo--sscchheedd--ssppeecc
           --ffnnoo--ssiiggnneedd--zzeerrooss --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           --ffnnoo--ttrraappppiinngg--mmaatthh --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           --ffoommiitt--ffrraammee--ppooiinntteerr --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee
           --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffppaarrttiiaall--iinnlliinniinngg
           --ffppeeeell--llooooppss --ffpprreeddiiccttiivvee--ccoommmmoonniinngg
           --ffpprreeffeettcchh--lloooopp--aarrrraayyss --ffpprrooffiillee--ccoorrrreeccttiioonn
           --ffpprrooffiillee--ddiirr==_p_a_t_h --ffpprrooffiillee--ggeenneerraattee



gcc-4.74                    2014-06-12                          5





GCC(1)                         GNU                         GCC(1)


           --ffpprrooffiillee--ggeenneerraattee==_p_a_t_h --ffpprrooffiillee--uussee
           --ffpprrooffiillee--uussee==_p_a_t_h --ffpprrooffiillee--vvaalluueess --ffrreecciipprrooccaall--mmaatthh
           --ffrreeee --ffrreeggmmoovvee --ffrreennaammee--rreeggiisstteerrss --ffrreeoorrddeerr--bblloocckkss
           --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn --ffrreeoorrddeerr--ffuunnccttiioonnss
           --ffrreerruunn--ccssee--aafftteerr--lloooopp
           --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss --ffrroouunnddiinngg--mmaatthh
           --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss --ffsscchheedd--pprreessssuurree
           --ffsscchheedd--ssppeecc--llooaadd --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp[[==_n]]
           --ffsscchheedd--ssttaalllleedd--iinnssnnss[[==_n]] --ffsscchheedd--ggrroouupp--hheeuurriissttiicc
           --ffsscchheedd--ccrriittiiccaall--ppaatthh--hheeuurriissttiicc
           --ffsscchheedd--ssppeecc--iinnssnn--hheeuurriissttiicc --ffsscchheedd--rraannkk--hheeuurriissttiicc
           --ffsscchheedd--llaasstt--iinnssnn--hheeuurriissttiicc
           --ffsscchheedd--ddeepp--ccoouunntt--hheeuurriissttiicc --ffsscchheedduullee--iinnssnnss
           --ffsscchheedduullee--iinnssnnss22 --ffsseeccttiioonn--aanncchhoorrss
           --ffsseelleeccttiivvee--sscchheedduulliinngg --ffsseelleeccttiivvee--sscchheedduulliinngg22
           --ffsseell--sscchheedd--ppiippeelliinniinngg
           --ffsseell--sscchheedd--ppiippeelliinniinngg--oouutteerr--llooooppss --ffsshhrriinnkk--wwrraapp
           --ffssiiggnnaalliinngg--nnaannss --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           --ffsspplliitt--iivvss--iinn--uunnrroolllleerr --ffsspplliitt--wwiiddee--ttyyppeess
           --ffssttaacckk--pprrootteeccttoorr --ffssttaacckk--pprrootteeccttoorr--aallll
           --ffssttrriicctt--aalliiaassiinngg --ffssttrriicctt--oovveerrffllooww --fftthhrreeaadd--jjuummppss
           --ffttrraacceerr --ffttrreeee--bbiitt--ccccpp --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee
           --ffttrreeee--ccccpp --ffttrreeee--cchh --ffttrreeee--ccooppyy--pprroopp
           --ffttrreeee--ccooppyyrreennaammee --ffttrreeee--ddccee --ffttrreeee--ddoommiinnaattoorr--ooppttss
           --ffttrreeee--ddssee --ffttrreeee--ffoorrwwpprroopp --ffttrreeee--ffrree
           --ffttrreeee--lloooopp--iiff--ccoonnvveerrtt --ffttrreeee--lloooopp--iiff--ccoonnvveerrtt--ssttoorreess
           --ffttrreeee--lloooopp--iimm --ffttrreeee--pphhiipprroopp --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss --ffttrreeee--lloooopp--iivvccaannoonn
           --ffttrreeee--lloooopp--lliinneeaarr --ffttrreeee--lloooopp--ooppttiimmiizzee
           --ffttrreeee--ppaarraalllleelliizzee--llooooppss==_n --ffttrreeee--pprree --ffttrreeee--ppttaa
           --ffttrreeee--rreeaassssoocc --ffttrreeee--ssiinnkk --ffttrreeee--ssrraa
           --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn --ffttrreeee--ttaaiill--mmeerrggee --ffttrreeee--tteerr
           --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn --ffttrreeee--vveeccttoorriizzee --ffttrreeee--vvrrpp
           --ffuunniitt--aatt--aa--ttiimmee --ffuunnrroollll--aallll--llooooppss --ffuunnrroollll--llooooppss
           --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss --ffuunnsswwiittcchh--llooooppss
           --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr --ffvveecctt--ccoosstt--mmooddeell
           --ffvvpptt --ffwweebb --ffwwhhoollee--pprrooggrraamm --ffwwppaa --ffuussee--lliinnkkeerr--pplluuggiinn
           ----ppaarraamm _n_a_m_e==_v_a_l_u_e --OO  --OO00  --OO11  --OO22  --OO33  --OOss --OOffaasstt

       _P_r_e_p_r_o_c_e_s_s_o_r _O_p_t_i_o_n_s
           --AA_q_u_e_s_t_i_o_n==_a_n_s_w_e_r --AA--_q_u_e_s_t_i_o_n[==_a_n_s_w_e_r] --CC  --ddDD  --ddII
           --ddMM  --ddNN --DD_m_a_c_r_o[==_d_e_f_n]  --EE  --HH --iiddiirraafftteerr _d_i_r
           --iinncclluuddee _f_i_l_e  --iimmaaccrrooss _f_i_l_e --iipprreeffiixx _f_i_l_e
           --iiwwiitthhpprreeffiixx _d_i_r --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r  --iissyysstteemm _d_i_r
           --iimmuullttiilliibb _d_i_r --iissyyssrroooott _d_i_r --MM  --MMMM  --MMFF  --MMGG  --MMPP
           --MMQQ  --MMTT  --nnoossttddiinncc --PP  --ffddeebbuugg--ccpppp
           --ffttrraacckk--mmaaccrroo--eexxppaannssiioonn --ffwwoorrkkiinngg--ddiirreeccttoorryy --rreemmaapp
           --ttrriiggrraapphhss  --uunnddeeff  --UU_m_a_c_r_o --WWpp,,_o_p_t_i_o_n --XXpprreepprroocceessssoorr
           _o_p_t_i_o_n

       _A_s_s_e_m_b_l_e_r _O_p_t_i_o_n
           --WWaa,,_o_p_t_i_o_n  --XXaasssseemmbblleerr _o_p_t_i_o_n



gcc-4.74                    2014-06-12                          6





GCC(1)                         GNU                         GCC(1)


       _L_i_n_k_e_r _O_p_t_i_o_n_s
           _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e  --ll_l_i_b_r_a_r_y --nnoossttaarrttffiilleess
           --nnooddeeffaauullttlliibbss  --nnoossttddlliibb --ppiiee --rrddyynnaammiicc --ss  --ssttaattiicc
           --ssttaattiicc--lliibbggcccc  --ssttaattiicc--lliibbssttddcc++++ --sshhaarreedd
           --sshhaarreedd--lliibbggcccc  --ssyymmbboolliicc --TT _s_c_r_i_p_t  --WWll,,_o_p_t_i_o_n
           --XXlliinnkkeerr _o_p_t_i_o_n --uu _s_y_m_b_o_l

       _D_i_r_e_c_t_o_r_y _O_p_t_i_o_n_s
           --BB_p_r_e_f_i_x --II_d_i_r --iipplluuggiinnddiirr==_d_i_r --iiqquuoottee_d_i_r --LL_d_i_r
           --ssppeeccss==_f_i_l_e --II-- ----ssyyssrroooott==_d_i_r

       _M_a_c_h_i_n_e _D_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           _A_d_a_p_t_e_v_a _E_p_i_p_h_a_n_y _O_p_t_i_o_n_s --mmhhaallff--rreegg--ffiillee
           --mmpprreeffeerr--sshhoorrtt--iinnssnn--rreeggss --mmbbrraanncchh--ccoosstt==_n_u_m --mmccmmoovvee
           --mmnnooppss==_n_u_m --mmssoofftt--ccmmppssff --mmsspplliitt--lloohhii --mmppoosstt--iinncc
           --mmppoosstt--mmooddiiffyy --mmssttaacckk--ooffffsseett==_n_u_m --mmrroouunndd--nneeaarreesstt
           --mmlloonngg--ccaallllss --mmsshhoorrtt--ccaallllss --mmssmmaallll1166 --mmffpp--mmooddee==_m_o_d_e
           --mmvveecctt--ddoouubbllee --mmaaxx--vveecctt--aalliiggnn==_n_u_m
           --mmsspplliitt--vveeccmmoovvee--eeaarrllyy --mm11rreegg--_r_e_g

           _A_R_M _O_p_t_i_o_n_s --mmaappccss--ffrraammee  --mmnnoo--aappccss--ffrraammee --mmaabbii==_n_a_m_e
           --mmaappccss--ssttaacckk--cchheecckk  --mmnnoo--aappccss--ssttaacckk--cchheecckk --mmaappccss--ffllooaatt
           --mmnnoo--aappccss--ffllooaatt --mmaappccss--rreeeennttrraanntt  --mmnnoo--aappccss--rreeeennttrraanntt
           --mmsscchheedd--pprroolloogg  --mmnnoo--sscchheedd--pprroolloogg --mmlliittttllee--eennddiiaann
           --mmbbiigg--eennddiiaann  --mmwwoorrddss--lliittttllee--eennddiiaann --mmffllooaatt--aabbii==_n_a_m_e
           --mmffppee --mmffpp1166--ffoorrmmaatt==_n_a_m_e --mmtthhuummbb--iinntteerrwwoorrkk
           --mmnnoo--tthhuummbb--iinntteerrwwoorrkk --mmccppuu==_n_a_m_e  --mmaarrcchh==_n_a_m_e
           --mmffppuu==_n_a_m_e --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n
           --mmaabboorrtt--oonn--nnoorreettuurrnn --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss
           --mmssiinnggllee--ppiicc--bbaassee  --mmnnoo--ssiinnggllee--ppiicc--bbaassee
           --mmppiicc--rreeggiisstteerr==_r_e_g --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           --mmcciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss
           --mmnnoo--cciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss --mmppookkee--ffuunnccttiioonn--nnaammee
           --mmtthhuummbb  --mmaarrmm --mmttppccss--ffrraammee  --mmttppccss--lleeaaff--ffrraammee
           --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg
           --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg --mmttpp==_n_a_m_e
           --mmttllss--ddiiaalleecctt==_d_i_a_l_e_c_t --mmwwoorrdd--rreellooccaattiioonnss
           --mmffiixx--ccoorrtteexx--mm33--llddrrdd --mmuunnaalliiggnneedd--aacccceessss

           _A_V_R _O_p_t_i_o_n_s --mmmmccuu==_m_c_u --mmaaccccuummuullaattee--aarrggss
           --mmbbrraanncchh--ccoosstt==_c_o_s_t --mmccaallll--pprroolloogguueess --mmiinntt88
           --mmnnoo--iinntteerrrruuppttss --mmrreellaaxx --mmsshhoorrtt--ccaallllss --mmssttrriicctt--XX
           --mmttiinnyy--ssttaacckk

           _B_l_a_c_k_f_i_n _O_p_t_i_o_n_s --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n] --mmssiimm
           --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           --mmnnoo--oommiitt--lleeaaff--ffrraammee--ppooiinntteerr --mmssppeecclldd--aannoommaallyy
           --mmnnoo--ssppeecclldd--aannoommaallyy  --mmccssyynncc--aannoommaallyy
           --mmnnoo--ccssyynncc--aannoommaallyy --mmllooww--6644kk --mmnnoo--llooww6644kk
           --mmssttaacckk--cchheecckk--ll11  --mmiidd--sshhaarreedd--lliibbrraarryy
           --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy  --mmsshhaarreedd--lliibbrraarryy--iidd==_n
           --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy  --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           --mmsseepp--ddaattaa  --mmnnoo--sseepp--ddaattaa  --mmlloonngg--ccaallllss
           --mmnnoo--lloonngg--ccaallllss --mmffaasstt--ffpp --mmiinnlliinnee--pplltt --mmmmuullttiiccoorree



gcc-4.74                    2014-06-12                          7





GCC(1)                         GNU                         GCC(1)


           --mmccoorreeaa  --mmccoorreebb  --mmssddrraamm --mmiiccppllbb

           _C_6_X _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann --mmaarrcchh==_c_p_u
           --mmssiimm --mmssddaattaa==_s_d_a_t_a_-_t_y_p_e

           _C_R_I_S _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mmaarrcchh==_c_p_u  --mmttuunnee==_c_p_u
           --mmmmaaxx--ssttaacckk--ffrraammee==_n  --mmeelliinnuuxx--ssttaacckkssiizzee==_n --mmeettrraaxx44
           --mmeettrraaxx110000  --mmppddeebbuugg  --mmcccc--iinniitt  --mmnnoo--ssiiddee--eeffffeeccttss
           --mmssttaacckk--aalliiggnn  --mmddaattaa--aalliiggnn  --mmccoonnsstt--aalliiggnn --mm3322--bbiitt
           --mm1166--bbiitt  --mm88--bbiitt  --mmnnoo--pprroolloogguuee--eeppiilloogguuee  --mmnnoo--ggoottpplltt
           --mmeellff  --mmaaoouutt  --mmeelliinnuuxx  --mmlliinnuuxx  --ssiimm  --ssiimm22
           --mmmmuull--bbuugg--wwoorrkkaarroouunndd  --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd

           _C_R_1_6 _O_p_t_i_o_n_s --mmmmaacc --mmccrr1166ccpplluuss --mmccrr1166cc --mmssiimm --mmiinntt3322
           --mmbbiitt--ooppss --mmddaattaa--mmooddeell==_m_o_d_e_l

           _D_a_r_w_i_n _O_p_t_i_o_n_s --aallll__llooaadd  --aalllloowwaabbllee__cclliieenntt  --aarrcchh
           --aarrcchh__eerrrroorrss__ffaattaall --aarrcchh__oonnllyy  --bbiinndd__aatt__llooaadd  --bbuunnddllee
           --bbuunnddllee__llooaaddeerr --cclliieenntt__nnaammee  --ccoommppaattiibbiilliittyy__vveerrssiioonn
           --ccuurrrreenntt__vveerrssiioonn --ddeeaadd__ssttrriipp --ddeeppeennddeennccyy--ffiillee
           --ddyylliibb__ffiillee  --ddyylliinnkkeerr__iinnssttaallll__nnaammee --ddyynnaammiicc
           --ddyynnaammiicclliibb  --eexxppoorrtteedd__ssyymmbboollss__lliisstt --ffiilleelliisstt
           --ffllaatt__nnaammeessppaaccee  --ffoorrccee__ccppuussuubbttyyppee__AALLLL
           --ffoorrccee__ffllaatt__nnaammeessppaaccee  --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
           --iiffrraammeewwoorrkk --iimmaaggee__bbaassee  --iinniitt  --iinnssttaallll__nnaammee
           --kkeeeepp__pprriivvaattee__eexxtteerrnnss --mmuullttii__mmoodduullee  --mmuullttiippllyy__ddeeffiinneedd
           --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd --nnooaallll__llooaadd
           --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss --nnooffiixxpprreebbiinnddiinngg
           --nnoommuullttiiddeeffss  --nnoopprreebbiinndd  --nnoosseegglliinnkkeeddiitt
           --ppaaggeezzeerroo__ssiizzee  --pprreebbiinndd
           --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess --pprriivvaattee__bbuunnddllee
           --rreeaadd__oonnllyy__rreellooccss  --sseeccttaalliiggnn --sseeccttoobbjjeeccttssyymmbboollss
           --wwhhyyllooaadd  --sseegg11aaddddrr --sseeccttccrreeaattee  --sseeccttoobbjjeeccttssyymmbboollss
           --sseeccttoorrddeerr --sseeggaaddddrr --sseeggss__rreeaadd__oonnllyy__aaddddrr
           --sseeggss__rreeaadd__wwrriittee__aaddddrr --sseegg__aaddddrr__ttaabbllee
           --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee  --sseegglliinnkkeeddiitt --sseeggpprroott
           --sseeggss__rreeaadd__oonnllyy__aaddddrr  --sseeggss__rreeaadd__wwrriittee__aaddddrr
           --ssiinnggllee__mmoodduullee  --ssttaattiicc  --ssuubb__lliibbrraarryy  --ssuubb__uummbbrreellllaa
           --ttwwoolleevveell__nnaammeessppaaccee  --uummbbrreellllaa  --uunnddeeffiinneedd
           --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt  --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess
           --wwhhaattssllooaaddeedd --FF --gguusseedd --ggffuullll
           --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n --mmkkeerrnneell --mmoonnee--bbyyttee--bbooooll

           _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s --mmnnoo--ffpp--rreeggss  --mmssoofftt--ffllooaatt
           --mmaallpphhaa--aass  --mmggaass --mmiieeeeee  --mmiieeeeee--wwiitthh--iinneexxaacctt
           --mmiieeeeee--ccoonnffoorrmmaanntt --mmffpp--ttrraapp--mmooddee==_m_o_d_e
           --mmffpp--rroouunnddiinngg--mmooddee==_m_o_d_e --mmttrraapp--pprreecciissiioonn==_m_o_d_e
           --mmbbuuiilldd--ccoonnssttaannttss --mmccppuu==_c_p_u_-_t_y_p_e  --mmttuunnee==_c_p_u_-_t_y_p_e
           --mmbbwwxx  --mmmmaaxx  --mmffiixx  --mmcciixx --mmffllooaatt--vvaaxx  --mmffllooaatt--iieeeeee
           --mmeexxpplliicciitt--rreellooccss  --mmssmmaallll--ddaattaa  --mmllaarrggee--ddaattaa
           --mmssmmaallll--tteexxtt  --mmllaarrggee--tteexxtt --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e

           _D_E_C _A_l_p_h_a_/_V_M_S _O_p_t_i_o_n_s --mmvvmmss--rreettuurrnn--ccooddeess
           --mmddeebbuugg--mmaaiinn==_p_r_e_f_i_x --mmmmaalllloocc6644



gcc-4.74                    2014-06-12                          8





GCC(1)                         GNU                         GCC(1)


           _F_R_3_0 _O_p_t_i_o_n_s --mmssmmaallll--mmooddeell --mmnnoo--llssiimm

           _F_R_V _O_p_t_i_o_n_s --mmggpprr--3322  --mmggpprr--6644  --mmffpprr--3322  --mmffpprr--6644
           --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmaalllloocc--cccc  --mmffiixxeedd--cccc
           --mmddwwoorrdd  --mmnnoo--ddwwoorrdd --mmddoouubbllee  --mmnnoo--ddoouubbllee --mmmmeeddiiaa
           --mmnnoo--mmeeddiiaa  --mmmmuullaadddd  --mmnnoo--mmuullaadddd --mmffddppiicc
           --mmiinnlliinnee--pplltt --mmggpprreell--rroo  --mmuullttiilliibb--lliibbrraarryy--ppiicc
           --mmlliinnkkeedd--ffpp  --mmlloonngg--ccaallllss  --mmaalliiggnn--llaabbeellss
           --mmlliibbrraarryy--ppiicc  --mmaacccc--44  --mmaacccc--88 --mmppaacckk  --mmnnoo--ppaacckk
           --mmnnoo--eeffllaaggss  --mmccoonndd--mmoovvee  --mmnnoo--ccoonndd--mmoovvee
           --mmooppttiimmiizzee--mmeemmbbaarr --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr --mmsscccc  --mmnnoo--sscccc
           --mmccoonndd--eexxeecc  --mmnnoo--ccoonndd--eexxeecc --mmvvlliiww--bbrraanncchh
           --mmnnoo--vvlliiww--bbrraanncchh --mmmmuullttii--ccoonndd--eexxeecc
           --mmnnoo--mmuullttii--ccoonndd--eexxeecc  --mmnneesstteedd--ccoonndd--eexxeecc
           --mmnnoo--nneesstteedd--ccoonndd--eexxeecc  --mmttoommccaatt--ssttaattss --mmTTLLSS --mmttllss
           --mmccppuu==_c_p_u

           _G_N_U_/_L_i_n_u_x _O_p_t_i_o_n_s --mmgglliibbcc --mmuucclliibbcc --mmbbiioonniicc --mmaannddrrooiidd
           --ttnnoo--aannddrrooiidd--cccc --ttnnoo--aannddrrooiidd--lldd

           _H_8_/_3_0_0 _O_p_t_i_o_n_s --mmrreellaaxx  --mmhh  --mmss  --mmnn  --mmiinntt3322
           --mmaalliiggnn--330000

           _H_P_P_A _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e --mmbbiigg--sswwiittcchh
           --mmddiissaabbllee--ffpprreeggss  --mmddiissaabbllee--iinnddeexxiinngg
           --mmffaasstt--iinnddiirreecctt--ccaallllss  --mmggaass  --mmggnnuu--lldd   --mmhhpp--lldd
           --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmjjuummpp--iinn--ddeellaayy
           --mmlliinnkkeerr--oopptt --mmlloonngg--ccaallllss --mmlloonngg--llooaadd--ssttoorree
           --mmnnoo--bbiigg--sswwiittcchh  --mmnnoo--ddiissaabbllee--ffpprreeggss
           --mmnnoo--ddiissaabbllee--iinnddeexxiinngg  --mmnnoo--ffaasstt--iinnddiirreecctt--ccaallllss
           --mmnnoo--ggaass --mmnnoo--jjuummpp--iinn--ddeellaayy  --mmnnoo--lloonngg--llooaadd--ssttoorree
           --mmnnoo--ppoorrttaabbllee--rruunnttiimmee  --mmnnoo--ssoofftt--ffllooaatt --mmnnoo--ssppaaccee--rreeggss
           --mmssoofftt--ffllooaatt  --mmppaa--rriisscc--11--00 --mmppaa--rriisscc--11--11
           --mmppaa--rriisscc--22--00  --mmppoorrttaabbllee--rruunnttiimmee --mmsscchheedduullee==_c_p_u_-_t_y_p_e
           --mmssppaaccee--rreeggss  --mmssiioo  --mmwwssiioo --mmuunniixx==_u_n_i_x_-_s_t_d  --nnoolliibbddlldd
           --ssttaattiicc  --tthhrreeaaddss

           _i_3_8_6 _a_n_d _x_8_6_-_6_4 _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-
           _t_y_p_e --mmffppmmaatthh==_u_n_i_t --mmaassmm==_d_i_a_l_e_c_t  --mmnnoo--ffaannccyy--mmaatthh--338877
           --mmnnoo--ffpp--rreett--iinn--338877  --mmssoofftt--ffllooaatt --mmnnoo--wwiiddee--mmuullttiippllyy
           --mmrrttdd  --mmaalliiggnn--ddoouubbllee --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy==_n_u_m --mmcclldd --mmccxx1166 --mmssaahhff
           --mmmmoovvbbee --mmccrrcc3322 --mmrreecciipp --mmrreecciipp==_o_p_t --mmvvzzeerroouuppppeerr
           --mmpprreeffeerr--aavvxx112288 --mmmmmmxx  --mmssssee  --mmssssee22 --mmssssee33 --mmssssssee33
           --mmssssee44..11 --mmssssee44..22 --mmssssee44 --mmaavvxx --mmaavvxx22 --mmaaeess --mmppccllmmuull
           --mmffssggssbbaassee --mmrrddrrnndd --mmff1166cc --mmffmmaa --mmssssee44aa --mm33ddnnooww
           --mmppooppccnntt --mmaabbmm --mmbbmmii --mmttbbmm --mmffmmaa44 --mmxxoopp --mmllzzccnntt --mmbbmmii22
           --mmllwwpp --mmtthhrreeaaddss  --mmnnoo--aalliiggnn--ssttrriinnggooppss
           --mmiinnlliinnee--aallll--ssttrriinnggooppss --mmiinnlliinnee--ssttrriinnggooppss--ddyynnaammiiccaallllyy
           --mmssttrriinnggoopp--ssttrraatteeggyy==_a_l_g --mmppuusshh--aarrggss
           --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss  --mm112288bbiitt--lloonngg--ddoouubbllee
           --mm9966bbiitt--lloonngg--ddoouubbllee  --mmrreeggppaarrmm==_n_u_m  --mmsssseerreeggppaarrmm
           --mmvveecclliibbaabbii==_t_y_p_e --mmvveecctt88--rreett--iinn--mmeemm --mmppcc3322 --mmppcc6644
           --mmppcc8800 --mmssttaacckkrreeaalliiggnn --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr



gcc-4.74                    2014-06-12                          9





GCC(1)                         GNU                         GCC(1)


           --mmnnoo--rreedd--zzoonnee --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss --mmccmmooddeell==_c_o_d_e_-
           _m_o_d_e_l --mmaabbii==_n_a_m_e --mm3322 --mm6644 --mmxx3322
           --mmllaarrggee--ddaattaa--tthhrreesshhoolldd==_n_u_m --mmssssee22aavvxx --mmffeennttrryy
           --mm88bbiitt--iiddiivv --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--llooaadd
           --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--ssttoorree

           _i_3_8_6 _a_n_d _x_8_6_-_6_4 _W_i_n_d_o_w_s _O_p_t_i_o_n_s --mmccoonnssoollee --mmccyyggwwiinn
           --mmnnoo--ccyyggwwiinn --mmddllll --mmnnoopp--ffuunn--ddlllliimmppoorrtt --mmtthhrreeaadd
           --mmuunniiccooddee --mmwwiinn3322 --mmwwiinnddoowwss --ffnnoo--sseett--ssttaacckk--eexxeeccuuttaabbllee

           _I_A_-_6_4 _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmggnnuu--aass
           --mmggnnuu--lldd  --mmnnoo--ppiicc --mmvvoollaattiillee--aassmm--ssttoopp
           --mmrreeggiisstteerr--nnaammeess  --mmssddaattaa --mmnnoo--ssddaattaa --mmccoonnssttaanntt--ggpp
           --mmaauuttoo--ppiicc  --mmffuusseedd--mmaadddd
           --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           --mmnnoo--iinnlliinnee--ffllooaatt--ddiivviiddee
           --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy
           --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           --mmnnoo--iinnlliinnee--iinntt--ddiivviiddee --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy
           --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt --mmnnoo--iinnlliinnee--ssqqrrtt
           --mmddwwaarrff22--aassmm --mmeeaarrllyy--ssttoopp--bbiittss --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-
           _r_a_n_g_e --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmiillpp3322
           --mmllpp6644 --mmsscchheedd--bbrr--ddaattaa--ssppeecc --mmsscchheedd--aarr--ddaattaa--ssppeecc
           --mmsscchheedd--ccoonnttrrooll--ssppeecc --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc
           --mmsscchheedd--ssppeecc--llddcc --mmsscchheedd--ssppeecc--ccoonnttrrooll--llddcc
           --mmsscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           --mmsscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
           --mmsscchheedd--ssttoopp--bbiittss--aafftteerr--eevveerryy--ccyyccllee
           --mmsscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
           --mmsseell--sscchheedd--ddoonntt--cchheecckk--ccoonnttrrooll--ssppeecc
           --mmsscchheedd--ffpp--mmeemm--ddeeppss--zzeerroo--ccoosstt
           --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss--hhaarrdd--lliimmiitt
           --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss==_m_a_x_-_i_n_s_n_s

           _I_A_-_6_4_/_V_M_S _O_p_t_i_o_n_s --mmvvmmss--rreettuurrnn--ccooddeess
           --mmddeebbuugg--mmaaiinn==_p_r_e_f_i_x --mmmmaalllloocc6644

           _L_M_3_2 _O_p_t_i_o_n_s --mmbbaarrrreell--sshhiifftt--eennaabblleedd --mmddiivviiddee--eennaabblleedd
           --mmmmuullttiippllyy--eennaabblleedd --mmssiiggnn--eexxtteenndd--eennaabblleedd
           --mmuusseerr--eennaabblleedd

           _M_3_2_R_/_D _O_p_t_i_o_n_s --mm3322rr22 --mm3322rrxx --mm3322rr --mmddeebbuugg
           --mmaalliiggnn--llooooppss --mmnnoo--aalliiggnn--llooooppss --mmiissssuuee--rraattee==_n_u_m_b_e_r
           --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r --mmmmooddeell==_c_o_d_e_-_s_i_z_e_-_m_o_d_e_l_-_t_y_p_e
           --mmssddaattaa==_s_d_a_t_a_-_t_y_p_e --mmnnoo--fflluusshh--ffuunncc --mmfflluusshh--ffuunncc==_n_a_m_e
           --mmnnoo--fflluusshh--ttrraapp --mmfflluusshh--ttrraapp==_n_u_m_b_e_r --GG _n_u_m

           _M_3_2_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u --mmssiimm --mmeemmrreeggss==_n_u_m_b_e_r

           _M_6_8_0_x_0 _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h  --mmccppuu==_c_p_u  --mmttuunnee==_t_u_n_e
           --mm6688000000  --mm6688002200  --mm6688002200--4400  --mm6688002200--6600  --mm6688003300
           --mm6688004400 --mm6688006600  --mmccppuu3322  --mm55220000  --mm55220066ee  --mm552288xx



gcc-4.74                    2014-06-12                         10





GCC(1)                         GNU                         GCC(1)


           --mm55330077  --mm55440077 --mmccffvv44ee  --mmbbiittffiieelldd  --mmnnoo--bbiittffiieelldd
           --mmcc6688000000  --mmcc6688002200 --mmnnoobbiittffiieelldd  --mmrrttdd  --mmnnoo--rrttdd
           --mmddiivv  --mmnnoo--ddiivv  --mmsshhoorrtt --mmnnoo--sshhoorrtt  --mmhhaarrdd--ffllooaatt
           --mm6688888811  --mmssoofftt--ffllooaatt  --mmppccrreell --mmaalliiggnn--iinntt
           --mmssttrriicctt--aalliiggnn  --mmsseepp--ddaattaa  --mmnnoo--sseepp--ddaattaa
           --mmsshhaarreedd--lliibbrraarryy--iidd==nn  --mmiidd--sshhaarreedd--lliibbrraarryy
           --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy --mmxxggoott --mmnnoo--xxggoott

           _M_C_o_r_e _O_p_t_i_o_n_s --mmhhaarrddlliitt  --mmnnoo--hhaarrddlliitt  --mmddiivv  --mmnnoo--ddiivv
           --mmrreellaaxx--iimmmmeeddiiaatteess --mmnnoo--rreellaaxx--iimmmmeeddiiaatteess
           --mmwwiiddee--bbiittffiieellddss  --mmnnoo--wwiiddee--bbiittffiieellddss
           --mm44bbyyttee--ffuunnccttiioonnss  --mmnnoo--44bbyyttee--ffuunnccttiioonnss
           --mmccaallllggrraapphh--ddaattaa --mmnnoo--ccaallllggrraapphh--ddaattaa  --mmssllooww--bbyytteess
           --mmnnoo--ssllooww--bbyytteess  --mmnnoo--llssiimm --mmlliittttllee--eennddiiaann
           --mmbbiigg--eennddiiaann  --mm221100  --mm334400  --mmssttaacckk--iinnccrreemmeenntt

           _M_e_P _O_p_t_i_o_n_s --mmaabbssddiiffff --mmaallll--ooppttss --mmaavveerraaggee --mmbbaasseedd==_n
           --mmbbiittooppss --mmcc==_n --mmcclliipp --mmccoonnffiigg==_n_a_m_e --mmccoopp --mmccoopp3322
           --mmccoopp6644 --mmiivvcc22 --mmddcc --mmddiivv --mmeebb --mmeell --mmiioo--vvoollaattiillee --mmll
           --mmlleeaaddzz --mmmm --mmmmiinnmmaaxx --mmmmuulltt --mmnnoo--ooppttss --mmrreeppeeaatt --mmss
           --mmssaattuurr --mmssddrraamm --mmssiimm --mmssiimmnnoovveecc --mmttff --mmttiinnyy==_n

           _M_i_c_r_o_B_l_a_z_e _O_p_t_i_o_n_s --mmssoofftt--ffllooaatt --mmhhaarrdd--ffllooaatt
           --mmssmmaallll--ddiivviiddeess --mmccppuu==_c_p_u --mmmmeemmccppyy --mmxxll--ssoofftt--mmuull
           --mmxxll--ssoofftt--ddiivv --mmxxll--bbaarrrreell--sshhiifftt --mmxxll--ppaatttteerrnn--ccoommppaarree
           --mmxxll--ssttaacckk--cchheecckk --mmxxll--ggpp--oopptt --mmnnoo--cclleeaarrbbssss
           --mmxxll--mmuullttiippllyy--hhiigghh --mmxxll--ffllooaatt--ccoonnvveerrtt --mmxxll--ffllooaatt--ssqqrrtt
           --mmxxll--mmooddee--_a_p_p_-_m_o_d_e_l

           _M_I_P_S _O_p_t_i_o_n_s --EELL  --EEBB  --mmaarrcchh==_a_r_c_h  --mmttuunnee==_a_r_c_h --mmiippss11
           --mmiippss22  --mmiippss33  --mmiippss44  --mmiippss3322  --mmiippss3322rr22 --mmiippss6644
           --mmiippss6644rr22 --mmiippss1166  --mmnnoo--mmiippss1166  --mmfflliipp--mmiippss1166
           --mmiinntteerrlliinnkk--mmiippss1166  --mmnnoo--iinntteerrlliinnkk--mmiippss1166 --mmaabbii==_a_b_i
           --mmaabbiiccaallllss  --mmnnoo--aabbiiccaallllss --mmsshhaarreedd  --mmnnoo--sshhaarreedd  --mmpplltt
           --mmnnoo--pplltt  --mmxxggoott  --mmnnoo--xxggoott --mmggpp3322  --mmggpp6644  --mmffpp3322
           --mmffpp6644  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmssiinnggllee--ffllooaatt
           --mmddoouubbllee--ffllooaatt  --mmddsspp  --mmnnoo--ddsspp  --mmddsspprr22  --mmnnoo--ddsspprr22
           --mmffppuu==_f_p_u_-_t_y_p_e --mmssmmaarrttmmiippss  --mmnnoo--ssmmaarrttmmiippss
           --mmppaaiirreedd--ssiinnggllee  --mmnnoo--ppaaiirreedd--ssiinnggllee  --mmddmmxx  --mmnnoo--mmddmmxx
           --mmiippss33dd  --mmnnoo--mmiippss33dd  --mmmmtt  --mmnnoo--mmtt  --mmllllsscc  --mmnnoo--llllsscc
           --mmlloonngg6644  --mmlloonngg3322  --mmssyymm3322  --mmnnoo--ssyymm3322 --GG_n_u_m
           --mmllooccaall--ssddaattaa  --mmnnoo--llooccaall--ssddaattaa --mmeexxtteerrnn--ssddaattaa
           --mmnnoo--eexxtteerrnn--ssddaattaa  --mmggppoopptt  --mmnnoo--ggoopptt --mmeemmbbeeddddeedd--ddaattaa
           --mmnnoo--eemmbbeeddddeedd--ddaattaa --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa
           --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g
           --mmsspplliitt--aaddddrreesssseess  --mmnnoo--sspplliitt--aaddddrreesssseess
           --mmeexxpplliicciitt--rreellooccss  --mmnnoo--eexxpplliicciitt--rreellooccss
           --mmcchheecckk--zzeerroo--ddiivviissiioonn  --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn
           --mmddiivviiddee--ttrraappss  --mmddiivviiddee--bbrreeaakkss --mmmmeemmccppyy  --mmnnoo--mmeemmccppyy
           --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss --mmmmaadd  --mmnnoo--mmaadd
           --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd  --nnooccpppp --mmffiixx--2244kk
           --mmnnoo--ffiixx--2244kk --mmffiixx--rr44000000  --mmnnoo--ffiixx--rr44000000  --mmffiixx--rr44440000
           --mmnnoo--ffiixx--rr44440000 --mmffiixx--rr1100000000 --mmnnoo--ffiixx--rr1100000000
           --mmffiixx--vvrr44112200  --mmnnoo--ffiixx--vvrr44112200 --mmffiixx--vvrr44113300



gcc-4.74                    2014-06-12                         11





GCC(1)                         GNU                         GCC(1)


           --mmnnoo--ffiixx--vvrr44113300  --mmffiixx--ssbb11  --mmnnoo--ffiixx--ssbb11
           --mmfflluusshh--ffuunncc==_f_u_n_c  --mmnnoo--fflluusshh--ffuunncc --mmbbrraanncchh--ccoosstt==_n_u_m
           --mmbbrraanncchh--lliikkeellyy  --mmnnoo--bbrraanncchh--lliikkeellyy --mmffpp--eexxcceeppttiioonnss
           --mmnnoo--ffpp--eexxcceeppttiioonnss --mmvvrr44113300--aalliiggnn --mmnnoo--vvrr44113300--aalliiggnn
           --mmssyynnccii --mmnnoo--ssyynnccii --mmrreellaaxx--ppiicc--ccaallllss
           --mmnnoo--rreellaaxx--ppiicc--ccaallllss --mmmmccoouunntt--rraa--aaddddrreessss

           _M_M_I_X _O_p_t_i_o_n_s --mmlliibbffuunnccss  --mmnnoo--lliibbffuunnccss  --mmeeppssiilloonn
           --mmnnoo--eeppssiilloonn  --mmaabbii==ggnnuu --mmaabbii==mmmmiixxwwaarree  --mmzzeerroo--eexxtteenndd
           --mmkknnuutthhddiivv  --mmttoopplleevveell--ssyymmbboollss --mmeellff  --mmbbrraanncchh--pprreeddiicctt
           --mmnnoo--bbrraanncchh--pprreeddiicctt  --mmbbaassee--aaddddrreesssseess
           --mmnnoo--bbaassee--aaddddrreesssseess  --mmssiinnggllee--eexxiitt  --mmnnoo--ssiinnggllee--eexxiitt

           _M_N_1_0_3_0_0 _O_p_t_i_o_n_s --mmmmuulltt--bbuugg  --mmnnoo--mmuulltt--bbuugg --mmnnoo--aamm3333
           --mmaamm3333 --mmaamm3333--22 --mmaamm3344 --mmttuunnee==_c_p_u_-_t_y_p_e
           --mmrreettuurrnn--ppooiinntteerr--oonn--dd00 --mmnnoo--ccrrtt00  --mmrreellaaxx --mmlliiww
           --mmsseettllbb

           _P_D_P_-_1_1 _O_p_t_i_o_n_s --mmffppuu  --mmssoofftt--ffllooaatt  --mmaacc00  --mmnnoo--aacc00
           --mm4400  --mm4455  --mm1100 --mmbbccooppyy  --mmbbccooppyy--bbuuiillttiinn  --mmiinntt3322
           --mmnnoo--iinntt1166 --mmiinntt1166  --mmnnoo--iinntt3322  --mmffllooaatt3322
           --mmnnoo--ffllooaatt6644 --mmffllooaatt6644  --mmnnoo--ffllooaatt3322  --mmaabbsshhii
           --mmnnoo--aabbsshhii --mmbbrraanncchh--eexxppeennssiivvee  --mmbbrraanncchh--cchheeaapp
           --mmuunniixx--aassmm  --mmddeecc--aassmm

           _p_i_c_o_C_h_i_p _O_p_t_i_o_n_s --mmaaee==_a_e___t_y_p_e --mmvvlliiww--llooookkaahheeaadd==_N
           --mmssyymmbbooll--aass--aaddddrreessss --mmnnoo--iinneeffffiicciieenntt--wwaarrnniinnggss

           _P_o_w_e_r_P_C _O_p_t_i_o_n_s See RS/6000 and PowerPC Options.

           _R_L_7_8 _O_p_t_i_o_n_s --mmssiimm --mmmmuull==nnoonnee --mmmmuull==gg1133 --mmmmuull==rrll7788

           _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-
           _t_y_p_e --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mmppoowweerr  --mmnnoo--ppoowweerr  --mmppoowweerr22
           --mmnnoo--ppoowweerr22 --mmppoowweerrppcc  --mmppoowweerrppcc6644  --mmnnoo--ppoowweerrppcc
           --mmaallttiivveecc  --mmnnoo--aallttiivveecc --mmppoowweerrppcc--ggppoopptt
           --mmnnoo--ppoowweerrppcc--ggppoopptt --mmppoowweerrppcc--ggffxxoopptt
           --mmnnoo--ppoowweerrppcc--ggffxxoopptt --mmmmffccrrff  --mmnnoo--mmffccrrff  --mmppooppccnnttbb
           --mmnnoo--ppooppccnnttbb --mmppooppccnnttdd --mmnnoo--ppooppccnnttdd --mmffpprrnndd
           --mmnnoo--ffpprrnndd --mmccmmppbb --mmnnoo--ccmmppbb --mmmmffppggpprr --mmnnoo--mmffppggpprr
           --mmhhaarrdd--ddffpp --mmnnoo--hhaarrdd--ddffpp --mmnneeww--mmnneemmoonniiccss
           --mmoolldd--mmnneemmoonniiccss --mmffuullll--ttoocc   --mmmmiinniimmaall--ttoocc
           --mmnnoo--ffpp--iinn--ttoocc  --mmnnoo--ssuumm--iinn--ttoocc --mm6644  --mm3322
           --mmxxll--ccoommppaatt  --mmnnoo--xxll--ccoommppaatt  --mmppee --mmaalliiggnn--ppoowweerr
           --mmaalliiggnn--nnaattuurraall --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt  --mmmmuullttiippllee
           --mmnnoo--mmuullttiippllee --mmssiinnggllee--ffllooaatt --mmddoouubbllee--ffllooaatt
           --mmssiimmppllee--ffppuu --mmssttrriinngg  --mmnnoo--ssttrriinngg  --mmuuppddaattee
           --mmnnoo--uuppddaattee --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess
           --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd  --mmbbiitt--aalliiggnn  --mmnnoo--bbiitt--aalliiggnn
           --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn  --mmrreellooccaattaabbllee
           --mmnnoo--rreellooccaattaabbllee  --mmrreellooccaattaabbllee--lliibb
           --mmnnoo--rreellooccaattaabbllee--lliibb --mmttoocc  --mmnnoo--ttoocc  --mmlliittttllee
           --mmlliittttllee--eennddiiaann  --mmbbiigg  --mmbbiigg--eennddiiaann --mmddyynnaammiicc--nnoo--ppiicc



gcc-4.74                    2014-06-12                         12





GCC(1)                         GNU                         GCC(1)


           --mmaallttiivveecc --mmsswwddiivv  --mmssiinnggllee--ppiicc--bbaassee
           --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e
           --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e --mmccaallll--ssyyssvv  --mmccaallll--nneettbbssdd
           --mmaaiixx--ssttrruucctt--rreettuurrnn  --mmssvvrr44--ssttrruucctt--rreettuurrnn --mmaabbii==_a_b_i_-
           _t_y_p_e --mmsseeccuurree--pplltt --mmbbssss--pplltt
           --mmbblloocckk--mmoovvee--iinnlliinnee--lliimmiitt==_n_u_m --mmiisseell --mmnnoo--iisseell
           --mmiisseell==yyeess  --mmiisseell==nnoo --mmssppee --mmnnoo--ssppee --mmssppee==yyeess
           --mmssppee==nnoo --mmppaaiirreedd --mmggeenn--cceellll--mmiiccrrooccooddee
           --mmwwaarrnn--cceellll--mmiiccrrooccooddee --mmvvrrssaavvee --mmnnoo--vvrrssaavvee --mmmmuullhhww
           --mmnnoo--mmuullhhww --mmddllmmzzbb --mmnnoo--ddllmmzzbb --mmffllooaatt--ggpprrss==yyeess
           --mmffllooaatt--ggpprrss==nnoo --mmffllooaatt--ggpprrss==ssiinnggllee
           --mmffllooaatt--ggpprrss==ddoouubbllee --mmpprroottoottyyppee  --mmnnoo--pprroottoottyyppee --mmssiimm
           --mmmmvvmmee  --mmaaddss  --mmyyeelllloowwkknniiffee  --mmeemmbb  --mmssddaattaa
           --mmssddaattaa==_o_p_t  --mmvvxxwwoorrkkss  --GG _n_u_m  --pptthhrreeaadd --mmrreecciipp
           --mmrreecciipp==_o_p_t --mmnnoo--rreecciipp --mmrreecciipp--pprreecciissiioonn
           --mmnnoo--rreecciipp--pprreecciissiioonn --mmvveecclliibbaabbii==_t_y_p_e --mmffrriizz --mmnnoo--ffrriizz
           --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
           --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss --mmssaavvee--ttoocc--iinnddiirreecctt
           --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt

           _R_X _O_p_t_i_o_n_s --mm6644bbiitt--ddoouubblleess  --mm3322bbiitt--ddoouubblleess  --ffppuu
           --nnooffppuu --mmccppuu== --mmbbiigg--eennddiiaann--ddaattaa --mmlliittttllee--eennddiiaann--ddaattaa
           --mmssmmaallll--ddaattaa --mmssiimm  --mmnnoo--ssiimm --mmaass110000--ssyynnttaaxx
           --mmnnoo--aass110000--ssyynnttaaxx --mmrreellaaxx --mmmmaaxx--ccoonnssttaanntt--ssiizzee==
           --mmiinntt--rreeggiisstteerr== --mmppiidd --mmssaavvee--aacccc--iinn--iinntteerrrruuppttss

           _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-
           _t_y_p_e --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt  --mmhhaarrdd--ddffpp
           --mmnnoo--hhaarrdd--ddffpp --mmlloonngg--ddoouubbllee--6644 --mmlloonngg--ddoouubbllee--112288
           --mmbbaacckkcchhaaiinn  --mmnnoo--bbaacckkcchhaaiinn --mmppaacckkeedd--ssttaacckk
           --mmnnoo--ppaacckkeedd--ssttaacckk --mmssmmaallll--eexxeecc  --mmnnoo--ssmmaallll--eexxeecc
           --mmmmvvccllee --mmnnoo--mmvvccllee --mm6644  --mm3311  --mmddeebbuugg  --mmnnoo--ddeebbuugg
           --mmeessaa  --mmzzaarrcchh --mmttppff--ttrraaccee --mmnnoo--ttppff--ttrraaccee
           --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd --mmwwaarrnn--ffrraammeessiizzee
           --mmwwaarrnn--ddyynnaammiiccssttaacckk  --mmssttaacckk--ssiizzee --mmssttaacckk--gguuaarrdd

           _S_c_o_r_e _O_p_t_i_o_n_s --mmeebb --mmeell --mmnnhhwwlloooopp --mmuullss --mmmmaacc --mmssccoorree55
           --mmssccoorree55uu --mmssccoorree77 --mmssccoorree77dd

           _S_H _O_p_t_i_o_n_s --mm11  --mm22  --mm22ee --mm22aa--nnooffppuu --mm22aa--ssiinnggllee--oonnllyy
           --mm22aa--ssiinnggllee --mm22aa --mm33  --mm33ee --mm44--nnooffppuu  --mm44--ssiinnggllee--oonnllyy
           --mm44--ssiinnggllee  --mm44 --mm44aa--nnooffppuu --mm44aa--ssiinnggllee--oonnllyy
           --mm44aa--ssiinnggllee --mm44aa --mm44aall --mm55--6644mmeeddiiaa  --mm55--6644mmeeddiiaa--nnooffppuu
           --mm55--3322mmeeddiiaa  --mm55--3322mmeeddiiaa--nnooffppuu --mm55--ccoommppaacctt
           --mm55--ccoommppaacctt--nnooffppuu --mmbb  --mmll  --mmddaalliiggnn  --mmrreellaaxx
           --mmbbiiggttaabbllee --mmffmmoovvdd --mmhhiittaacchhii --mmrreenneessaass --mmnnoo--rreenneessaass
           --mmnnoommaaccssaavvee --mmiieeeeee --mmnnoo--iieeeeee --mmbbiittooppss  --mmiissiizzee
           --mmiinnlliinnee--iicc__iinnvvaalliiddaattee --mmppaaddssttrruucctt --mmssppaaccee --mmpprreeffeerrggoott
           --mmuusseerrmmooddee --mmuullttccoosstt==_n_u_m_b_e_r --mmddiivv==_s_t_r_a_t_e_g_y
           --mmddiivvssii33__lliibbffuunncc==_n_a_m_e --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           --mmaaddjjuusstt--uunnrroollll --mmiinnddeexxeedd--aaddddrreessssiinngg
           --mmggeettttrrccoosstt==_n_u_m_b_e_r --mmpptt--ffiixxeedd
           --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss --mmiinnvvaalliidd--ssyymmbboollss



gcc-4.74                    2014-06-12                         13





GCC(1)                         GNU                         GCC(1)


           --mmssoofftt--aattoommiicc --mmbbrraanncchh--ccoosstt==_n_u_m --mmccbbrraanncchhddii --mmccmmppeeqqddii
           --mmffuusseedd--mmaadddd --mmpprreetteenndd--ccmmoovvee

           _S_o_l_a_r_i_s _2 _O_p_t_i_o_n_s --mmiimmppuurree--tteexxtt  --mmnnoo--iimmppuurree--tteexxtt
           --pptthhrreeaaddss --pptthhrreeaadd

           _S_P_A_R_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e
           --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mmmmeemmoorryy--mmooddeell==_m_e_m_-_m_o_d_e_l --mm3322
           --mm6644  --mmaapppp--rreeggss  --mmnnoo--aapppp--rreeggss --mmffaasstteerr--ssttrruuccttss
           --mmnnoo--ffaasstteerr--ssttrruuccttss  --mmffllaatt  --mmnnoo--ffllaatt --mmffppuu  --mmnnoo--ffppuu
           --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmhhaarrdd--qquuaadd--ffllooaatt
           --mmssoofftt--qquuaadd--ffllooaatt --mmssttaacckk--bbiiaass  --mmnnoo--ssttaacckk--bbiiaass
           --mmuunnaalliiggnneedd--ddoouubblleess  --mmnnoo--uunnaalliiggnneedd--ddoouubblleess --mmvv88pplluuss
           --mmnnoo--vv88pplluuss  --mmvviiss  --mmnnoo--vviiss --mmvviiss22  --mmnnoo--vviiss22  --mmvviiss33
           --mmnnoo--vviiss33 --mmffmmaaff  --mmnnoo--ffmmaaff  --mmppooppcc  --mmnnoo--ppooppcc
           --mmffiixx--aatt669977ff

           _S_P_U _O_p_t_i_o_n_s --mmwwaarrnn--rreelloocc --mmeerrrroorr--rreelloocc --mmssaaffee--ddmmaa
           --mmuunnssaaffee--ddmmaa --mmbbrraanncchh--hhiinnttss --mmssmmaallll--mmeemm --mmllaarrggee--mmeemm
           --mmssttddmmaaiinn --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmeeaa3322 --mmeeaa6644
           --mmaaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn
           --mmnnoo--aaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn --mmccaacchhee--ssiizzee==_c_a_c_h_e_-_s_i_z_e
           --mmaattoommiicc--uuppddaatteess --mmnnoo--aattoommiicc--uuppddaatteess

           _S_y_s_t_e_m _V _O_p_t_i_o_n_s --QQyy  --QQnn  --YYPP,,_p_a_t_h_s  --YYmm,,_d_i_r

           _T_I_L_E_-_G_x _O_p_t_i_o_n_s --mmccppuu==_c_p_u --mm3322 --mm6644

           _T_I_L_E_P_r_o _O_p_t_i_o_n_s --mmccppuu==_c_p_u --mm3322

           _V_8_5_0 _O_p_t_i_o_n_s --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss  --mmeepp
           --mmnnoo--eepp --mmpprroolloogg--ffuunnccttiioonn  --mmnnoo--pprroolloogg--ffuunnccttiioonn
           --mmssppaaccee --mmttddaa==_n  --mmssddaa==_n  --mmzzddaa==_n --mmaapppp--rreeggss
           --mmnnoo--aapppp--rreeggss --mmddiissaabbllee--ccaalllltt  --mmnnoo--ddiissaabbllee--ccaalllltt
           --mmvv885500ee22vv33 --mmvv885500ee22 --mmvv885500ee11 --mmvv885500eess --mmvv885500ee --mmvv885500
           --mmbbiigg--sswwiittcchh

           _V_A_X _O_p_t_i_o_n_s --mmgg  --mmggnnuu  --mmuunniixx

           _V_x_W_o_r_k_s _O_p_t_i_o_n_s --mmrrttpp  --nnoonn--ssttaattiicc  --BBssttaattiicc
           --BBddyynnaammiicc --XXbbiinndd--llaazzyy  --XXbbiinndd--nnooww

           _x_8_6_-_6_4 _O_p_t_i_o_n_s See i386 and x86-64 Options.

           _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s --mmssiimm

           _X_t_e_n_s_a _O_p_t_i_o_n_s --mmccoonnsstt1166 --mmnnoo--ccoonnsstt1166 --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd --mmffoorrccee--nnoo--ppiicc --mmsseerriiaalliizzee--vvoollaattiillee
           --mmnnoo--sseerriiaalliizzee--vvoollaattiillee --mmtteexxtt--sseeccttiioonn--lliitteerraallss
           --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss --mmttaarrggeett--aalliiggnn
           --mmnnoo--ttaarrggeett--aalliiggnn --mmlloonnggccaallllss  --mmnnoo--lloonnggccaallllss

           _z_S_e_r_i_e_s _O_p_t_i_o_n_s See S/390 and zSeries Options.




gcc-4.74                    2014-06-12                         14





GCC(1)                         GNU                         GCC(1)


       _C_o_d_e _G_e_n_e_r_a_t_i_o_n _O_p_t_i_o_n_s
           --ffccaallll--ssaavveedd--_r_e_g  --ffccaallll--uusseedd--_r_e_g --ffffiixxeedd--_r_e_g
           --ffeexxcceeppttiioonnss --ffnnoonn--ccaallll--eexxcceeppttiioonnss  --ffuunnwwiinndd--ttaabblleess
           --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......
           --ffnnoo--ccoommmmoonn  --ffnnoo--iiddeenntt --ffppcccc--ssttrruucctt--rreettuurrnn  --ffppiicc
           --ffPPIICC --ffppiiee --ffPPIIEE --ffnnoo--jjuummpp--ttaabblleess
           --ffrreeccoorrdd--ggcccc--sswwiittcchheess --ffrreegg--ssttrruucctt--rreettuurrnn
           --ffsshhoorrtt--eennuummss --ffsshhoorrtt--ddoouubbllee  --ffsshhoorrtt--wwcchhaarr
           --ffvveerrbboossee--aassmm  --ffppaacckk--ssttrruucctt[[==_n]]  --ffssttaacckk--cchheecckk
           --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g  --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
           --ffnnoo--ssttaacckk--lliimmiitt --ffsspplliitt--ssttaacckk --fflleeaaddiinngg--uunnddeerrssccoorree
           --ffttllss--mmooddeell==_m_o_d_e_l --ffttrraappvv  --ffwwrraappvv  --ffbboouunnddss--cchheecckk
           --ffvviissiibbiilliittyy --ffssttrriicctt--vvoollaattiillee--bbiittffiieellddss

       OOppttiioonnss CCoonnttrroolllliinngg tthhee KKiinndd ooff OOuuttppuutt

       Compilation can involve up to four stages: preprocessing,
       compilation proper, assembly and linking, always in that
       order.  GCC is capable of preprocessing and compiling
       several files either into several assembler input files,
       or into one assembler input file; then each assembler
       input file produces an object file, and linking combines
       all the object files (those newly compiled, and those
       specified as input) into an executable file.

       For any given input file, the file name suffix determines
       what kind of compilation is done:

       _f_i_l_e..cc
           C source code that must be preprocessed.

       _f_i_l_e..ii
           C source code that should not be preprocessed.

       _f_i_l_e..iiii
           C++ source code that should not be preprocessed.

       _f_i_l_e..mm
           Objective-C source code.  Note that you must link with
           the _l_i_b_o_b_j_c library to make an Objective-C program
           work.

       _f_i_l_e..mmii
           Objective-C source code that should not be
           preprocessed.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code.  Note that you must link
           with the _l_i_b_o_b_j_c library to make an Objective-C++
           program work.  Note that ..MM refers to a literal



gcc-4.74                    2014-06-12                         15





GCC(1)                         GNU                         GCC(1)


           capital M.

       _f_i_l_e..mmiiii
           Objective-C++ source code that should not be
           preprocessed.

       _f_i_l_e..hh
           C, C++, Objective-C or Objective-C++ header file to be
           turned into a precompiled header (default), or C, C++
           header file to be turned into an Ada spec (via the
           --ffdduummpp--aaddaa--ssppeecc switch).

       _f_i_l_e..cccc
       _f_i_l_e..ccpp
       _f_i_l_e..ccxxxx
       _f_i_l_e..ccpppp
       _f_i_l_e..CCPPPP
       _f_i_l_e..cc++++
       _f_i_l_e..CC
           C++ source code that must be preprocessed.  Note that
           in ..ccxxxx, the last two letters must both be literally
           xx.  Likewise, ..CC refers to a literal capital C.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code that must be preprocessed.

       _f_i_l_e..mmiiii
           Objective-C++ source code that should not be
           preprocessed.

       _f_i_l_e..hhhh
       _f_i_l_e..HH
       _f_i_l_e..hhpp
       _f_i_l_e..hhxxxx
       _f_i_l_e..hhpppp
       _f_i_l_e..HHPPPP
       _f_i_l_e..hh++++
       _f_i_l_e..ttcccc
           C++ header file to be turned into a precompiled header
           or Ada spec.

       _f_i_l_e..ff
       _f_i_l_e..ffoorr
       _f_i_l_e..ffttnn
           Fixed form Fortran source code that should not be
           preprocessed.

       _f_i_l_e..FF
       _f_i_l_e..FFOORR
       _f_i_l_e..ffpppp
       _f_i_l_e..FFPPPP
       _f_i_l_e..FFTTNN
           Fixed form Fortran source code that must be



gcc-4.74                    2014-06-12                         16





GCC(1)                         GNU                         GCC(1)


           preprocessed (with the traditional preprocessor).

       _f_i_l_e..ff9900
       _f_i_l_e..ff9955
       _f_i_l_e..ff0033
       _f_i_l_e..ff0088
           Free form Fortran source code that should not be
           preprocessed.

       _f_i_l_e..FF9900
       _f_i_l_e..FF9955
       _f_i_l_e..FF0033
       _f_i_l_e..FF0088
           Free form Fortran source code that must be
           preprocessed (with the traditional preprocessor).

       _f_i_l_e..ggoo
           Go source code.

       _f_i_l_e..aaddss
           Ada source code file that contains a library unit
           declaration (a declaration of a package, subprogram,
           or generic, or a generic instantiation), or a library
           unit renaming declaration (a package, generic, or
           subprogram renaming declaration).  Such files are also
           called _s_p_e_c_s.

       _f_i_l_e..aaddbb
           Ada source code file containing a library unit body (a
           subprogram or package body).  Such files are also
           called _b_o_d_i_e_s.

       _f_i_l_e..ss
           Assembler code.

       _f_i_l_e..SS
       _f_i_l_e..ssxx
           Assembler code that must be preprocessed.

       _o_t_h_e_r
           An object file to be fed straight into linking.  Any
           file name with no recognized suffix is treated this
           way.

       You can specify the input language explicitly with the --xx
       option:

       --xx _l_a_n_g_u_a_g_e
           Specify explicitly the _l_a_n_g_u_a_g_e for the following
           input files (rather than letting the compiler choose a
           default based on the file name suffix).  This option
           applies to all following input files until the next --xx
           option.  Possible values for _l_a_n_g_u_a_g_e are:




gcc-4.74                    2014-06-12                         17





GCC(1)                         GNU                         GCC(1)


                   c  c-header  cpp-output
                   c++  c++-header  c++-cpp-output
                   objective-c  objective-c-header  objective-c-cpp-output
                   objective-c++ objective-c++-header objective-c++-cpp-output
                   assembler  assembler-with-cpp
                   ada
                   f77  f77-cpp-input f95  f95-cpp-input
                   go
                   java

       --xx nnoonnee
           Turn off any specification of a language, so that
           subsequent files are handled according to their file
           name suffixes (as they are if --xx has not been used at
           all).

       --ppaassss--eexxiitt--ccooddeess
           Normally the ggcccc program will exit with the code of 1
           if any phase of the compiler returns a non-success
           return code.  If you specify --ppaassss--eexxiitt--ccooddeess, the ggcccc
           program will instead return with numerically highest
           error produced by any phase that returned an error
           indication.  The C, C++, and Fortran frontends return
           4, if an internal compiler error is encountered.

       If you only want some of the stages of compilation, you
       can use --xx (or filename suffixes) to tell ggcccc where to
       start, and one of the options --cc, --SS, or --EE to say where
       ggcccc is to stop.  Note that some combinations (for example,
       --xx ccpppp--oouuttppuutt --EE) instruct ggcccc to do nothing at all.

       --cc  Compile or assemble the source files, but do not link.
           The linking stage simply is not done.  The ultimate
           output is in the form of an object file for each
           source file.

           By default, the object file name for a source file is
           made by replacing the suffix ..cc, ..ii, ..ss, etc., with
           ..oo.

           Unrecognized input files, not requiring compilation or
           assembly, are ignored.

       --SS  Stop after the stage of compilation proper; do not
           assemble.  The output is in the form of an assembler
           code file for each non-assembler input file specified.

           By default, the assembler file name for a source file
           is made by replacing the suffix ..cc, ..ii, etc., with ..ss.

           Input files that don't require compilation are
           ignored.

       --EE  Stop after the preprocessing stage; do not run the



gcc-4.74                    2014-06-12                         18





GCC(1)                         GNU                         GCC(1)


           compiler proper.  The output is in the form of
           preprocessed source code, which is sent to the
           standard output.

           Input files that don't require preprocessing are
           ignored.

       --oo _f_i_l_e
           Place output in file _f_i_l_e.  This applies regardless to
           whatever sort of output is being produced, whether it
           be an executable file, an object file, an assembler
           file or preprocessed C code.

           If --oo is not specified, the default is to put an
           executable file in _a_._o_u_t, the object file for
           _s_o_u_r_c_e_._s_u_f_f_i_x in _s_o_u_r_c_e_._o, its assembler file in
           _s_o_u_r_c_e_._s, a precompiled header file in
           _s_o_u_r_c_e_._s_u_f_f_i_x_._g_c_h, and all preprocessed C source on
           standard output.

       --vv  Print (on standard error output) the commands executed
           to run the stages of compilation.  Also print the
           version number of the compiler driver program and of
           the preprocessor and the compiler proper.

       --######
           Like --vv except the commands are not executed and
           arguments are quoted unless they contain only
           alphanumeric characters or "./-_".  This is useful for
           shell scripts to capture the driver-generated command
           lines.

       --ppiippee
           Use pipes rather than temporary files for
           communication between the various stages of
           compilation.  This fails to work on some systems where
           the assembler is unable to read from a pipe; but the
           GNU assembler has no trouble.

       ----hheellpp
           Print (on the standard output) a description of the
           command-line options understood by ggcccc.  If the --vv
           option is also specified then ----hheellpp will also be
           passed on to the various processes invoked by ggcccc, so
           that they can display the command-line options they
           accept.  If the --WWeexxttrraa option has also been specified
           (prior to the ----hheellpp option), then command-line
           options that have no documentation associated with
           them will also be displayed.

       ----ttaarrggeett--hheellpp
           Print (on the standard output) a description of
           target-specific command-line options for each tool.
           For some targets extra target-specific information may



gcc-4.74                    2014-06-12                         19





GCC(1)                         GNU                         GCC(1)


           also be printed.

       ----hheellpp=={{_c_l_a_s_s|[^^]_q_u_a_l_i_f_i_e_r}}[,,......]
           Print (on the standard output) a description of the
           command-line options understood by the compiler that
           fit into all specified classes and qualifiers.  These
           are the supported classes:

           ooppttiimmiizzeerrss
               This will display all of the optimization options
               supported by the compiler.

           wwaarrnniinnggss
               This will display all of the options controlling
               warning messages produced by the compiler.

           ttaarrggeett
               This will display target-specific options.  Unlike
               the ----ttaarrggeett--hheellpp option however, target-specific
               options of the linker and assembler will not be
               displayed.  This is because those tools do not
               currently support the extended ----hheellpp== syntax.

           ppaarraammss
               This will display the values recognized by the
               ----ppaarraamm option.

           _l_a_n_g_u_a_g_e
               This will display the options supported for
               _l_a_n_g_u_a_g_e, where _l_a_n_g_u_a_g_e is the name of one of the
               languages supported in this version of GCC.

           ccoommmmoonn
               This will display the options that are common to
               all languages.

           These are the supported qualifiers:

           uunnddooccuummeenntteedd
               Display only those options that are undocumented.

           jjooiinneedd
               Display options taking an argument that appears
               after an equal sign in the same continuous piece
               of text, such as: ----hheellpp==ttaarrggeett.

           sseeppaarraattee
               Display options taking an argument that appears as
               a separate word following the original option,
               such as: --oo oouuttppuutt--ffiillee.

           Thus for example to display all the undocumented
           target-specific switches supported by the compiler the
           following can be used:



gcc-4.74                    2014-06-12                         20





GCC(1)                         GNU                         GCC(1)


                   --help=target,undocumented

           The sense of a qualifier can be inverted by prefixing
           it with the ^^ character, so for example to display all
           binary warning options (i.e., ones that are either on
           or off and that do not take an argument) that have a
           description, use:

                   --help=warnings,^joined,^undocumented

           The argument to ----hheellpp== should not consist solely of
           inverted qualifiers.

           Combining several classes is possible, although this
           usually restricts the output by so much that there is
           nothing to display.  One case where it does work
           however is when one of the classes is _t_a_r_g_e_t.  So for
           example to display all the target-specific
           optimization options the following can be used:

                   --help=target,optimizers

           The ----hheellpp== option can be repeated on the command
           line.  Each successive use will display its requested
           class of options, skipping those that have already
           been displayed.

           If the --QQ option appears on the command line before
           the ----hheellpp== option, then the descriptive text
           displayed by ----hheellpp== is changed.  Instead of
           describing the displayed options, an indication is
           given as to whether the option is enabled, disabled or
           set to a specific value (assuming that the compiler
           knows this at the point where the ----hheellpp== option is
           used).

           Here is a truncated example from the ARM port of ggcccc:

                     % gcc -Q -mabi=2 --help=target -c
                     The following options are target specific:
                     -mabi=                                2
                     -mabort-on-noreturn                   [disabled]
                     -mapcs                                [disabled]

           The output is sensitive to the effects of previous
           command-line options, so for example it is possible to
           find out which optimizations are enabled at --OO22 by
           using:

                   -Q -O2 --help=optimizers

           Alternatively you can discover which binary
           optimizations are enabled by --OO33 by using:




gcc-4.74                    2014-06-12                         21





GCC(1)                         GNU                         GCC(1)


                   gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
                   gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
                   diff /tmp/O2-opts /tmp/O3-opts | grep enabled

       --nnoo--ccaannoonniiccaall--pprreeffiixxeess
           Do not expand any symbolic links, resolve references
           to //....// or //..//, or make the path absolute when
           generating a relative prefix.

       ----vveerrssiioonn
           Display the version number and copyrights of the
           invoked GCC.

       --wwrraappppeerr
           Invoke all subcommands under a wrapper program.  The
           name of the wrapper program and its parameters are
           passed as a comma separated list.

                   gcc -c t.c -wrapper gdb,--args

           This will invoke all subprograms of ggcccc under ggddbb
           ----aarrggss, thus the invocation of cccc11 will be ggddbb ----aarrggss
           cccc11 .......

       --ffpplluuggiinn==_n_a_m_e..ssoo
           Load the plugin code in file _n_a_m_e.so, assumed to be a
           shared object to be dlopen'd by the compiler.  The
           base name of the shared object file is used to
           identify the plugin for the purposes of argument
           parsing (See --ffpplluuggiinn--aarrgg--_n_a_m_e--_k_e_y==_v_a_l_u_e below).  Each
           plugin should define the callback functions specified
           in the Plugins API.

       --ffpplluuggiinn--aarrgg--_n_a_m_e--_k_e_y==_v_a_l_u_e
           Define an argument called _k_e_y with a value of _v_a_l_u_e
           for the plugin called _n_a_m_e.

       --ffdduummpp--aaddaa--ssppeecc[--sslliimm]
           For C and C++ source and include files, generate
           corresponding Ada specs.

       --ffdduummpp--ggoo--ssppeecc==_f_i_l_e
           For input files in any language, generate
           corresponding Go declarations in _f_i_l_e.  This generates
           Go "const", "type", "var", and "func" declarations
           which may be a useful way to start writing a Go
           interface to code written in some other language.

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read
           are inserted in place of the original @_f_i_l_e option.
           If _f_i_l_e does not exist, or cannot be read, then the
           option will be treated literally, and not removed.




gcc-4.74                    2014-06-12                         22





GCC(1)                         GNU                         GCC(1)


           Options in _f_i_l_e are separated by whitespace.  A
           whitespace character may be included in an option by
           surrounding the entire option in either single or
           double quotes.  Any character (including a backslash)
           may be included by prefixing the character to be
           included with a backslash.  The _f_i_l_e may itself
           contain additional @_f_i_l_e options; any such options
           will be processed recursively.

       CCoommppiilliinngg CC++++ PPrrooggrraammss

       C++ source files conventionally use one of the suffixes
       ..CC, ..cccc, ..ccpppp, ..CCPPPP, ..cc++++, ..ccpp, or ..ccxxxx; C++ header files
       often use ..hhhh, ..hhpppp, ..HH, or (for shared template code)
       ..ttcccc; and preprocessed C++ files use the suffix ..iiii.  GCC
       recognizes files with these names and compiles them as C++
       programs even if you call the compiler the same way as for
       compiling C programs (usually with the name ggcccc).

       However, the use of ggcccc does not add the C++ library.  gg++++
       is a program that calls GCC and treats ..cc, ..hh and ..ii files
       as C++ source files instead of C source files unless --xx is
       used, and automatically specifies linking against the C++
       library.  This program is also useful when precompiling a
       C header file with a ..hh extension for use in C++
       compilations.  On many systems, gg++++ is also installed with
       the name cc++++.

       When you compile C++ programs, you may specify many of the
       same command-line options that you use for compiling
       programs in any language; or command-line options
       meaningful for C and related languages; or options that
       are meaningful only for C++ programs.

       OOppttiioonnss CCoonnttrroolllliinngg CC DDiiaalleecctt

       The following options control the dialect of C (or
       languages derived from C, such as C++, Objective-C and
       Objective-C++) that the compiler accepts:

       --aannssii
           In C mode, this is equivalent to --ssttdd==cc9900. In C++
           mode, it is equivalent to --ssttdd==cc++++9988.

           This turns off certain features of GCC that are
           incompatible with ISO C90 (when compiling C code), or
           of standard C++ (when compiling C++ code), such as the
           "asm" and "typeof" keywords, and predefined macros
           such as "unix" and "vax" that identify the type of
           system you are using.  It also enables the undesirable
           and rarely used ISO trigraph feature.  For the C
           compiler, it disables recognition of C++ style ////
           comments as well as the "inline" keyword.




gcc-4.74                    2014-06-12                         23





GCC(1)                         GNU                         GCC(1)


           The alternate keywords "__asm__", "__extension__",
           "__inline__" and "__typeof__" continue to work despite
           --aannssii.  You would not want to use them in an ISO C
           program, of course, but it is useful to put them in
           header files that might be included in compilations
           done with --aannssii.  Alternate predefined macros such as
           "__unix__" and "__vax__" are also available, with or
           without --aannssii.

           The --aannssii option does not cause non-ISO programs to be
           rejected gratuitously.  For that, --ppeeddaannttiicc is
           required in addition to --aannssii.

           The macro "__STRICT_ANSI__" is predefined when the
           --aannssii option is used.  Some header files may notice
           this macro and refrain from declaring certain
           functions or defining certain macros that the ISO
           standard doesn't call for; this is to avoid
           interfering with any programs that might use these
           names for other things.

           Functions that would normally be built in but do not
           have semantics defined by ISO C (such as "alloca" and
           "ffs") are not built-in functions when --aannssii is used.

       --ssttdd==
           Determine the language standard.   This option is
           currently only supported when compiling C or C++.

           The compiler can accept several base standards, such
           as cc9900 or cc++++9988, and GNU dialects of those standards,
           such as ggnnuu9900 or ggnnuu++++9988.  By specifying a base
           standard, the compiler will accept all programs
           following that standard and those using GNU extensions
           that do not contradict it.  For example, --ssttdd==cc9900
           turns off certain features of GCC that are
           incompatible with ISO C90, such as the "asm" and
           "typeof" keywords, but not other GNU extensions that
           do not have a meaning in ISO C90, such as omitting the
           middle term of a "?:" expression. On the other hand,
           by specifying a GNU dialect of a standard, all
           features the compiler support are enabled, even when
           those features change the meaning of the base standard
           and some strict-conforming programs may be rejected.
           The particular standard is used by --ppeeddaannttiicc to
           identify which features are GNU extensions given that
           version of the standard. For example --ssttdd==ggnnuu9900
           --ppeeddaannttiicc would warn about C++ style //// comments,
           while --ssttdd==ggnnuu9999 --ppeeddaannttiicc would not.

           A value for this option must be provided; possible
           values are

           cc9900



gcc-4.74                    2014-06-12                         24





GCC(1)                         GNU                         GCC(1)


           cc8899
           iissoo99889999::11999900
               Support all ISO C90 programs (certain GNU
               extensions that conflict with ISO C90 are
               disabled). Same as --aannssii for C code.

           iissoo99889999::119999440099
               ISO C90 as modified in amendment 1.

           cc9999
           cc99xx
           iissoo99889999::11999999
           iissoo99889999::119999xx
               ISO C99.  Note that this standard is not yet fully
               supported; see
               <hhttttpp::////ggcccc..ggnnuu..oorrgg//ggcccc--44..77//cc9999ssttaattuuss..hhttmmll> for
               more information.  The names cc99xx and iissoo99889999::119999xx
               are deprecated.

           cc1111
           cc11xx
           iissoo99889999::22001111
               ISO C11, the 2011 revision of the ISO C standard.
               Support is incomplete and experimental.  The name
               cc11xx is deprecated.

           ggnnuu9900
           ggnnuu8899
               GNU dialect of ISO C90 (including some C99
               features). This is the default for C code.

           ggnnuu9999
           ggnnuu99xx
               GNU dialect of ISO C99.  When ISO C99 is fully
               implemented in GCC, this will become the default.
               The name ggnnuu99xx is deprecated.

           ggnnuu1111
           ggnnuu11xx
               GNU dialect of ISO C11.  Support is incomplete and
               experimental.  The name ggnnuu11xx is deprecated.

           cc++++9988
               The 1998 ISO C++ standard plus amendments. Same as
               --aannssii for C++ code.

           ggnnuu++++9988
               GNU dialect of --ssttdd==cc++++9988.  This is the default
               for C++ code.

           cc++++1111
               The 2011 ISO C++ standard plus amendments.
               Support for C++11 is still experimental, and may
               change in incompatible ways in future releases.



gcc-4.74                    2014-06-12                         25





GCC(1)                         GNU                         GCC(1)


           ggnnuu++++1111
               GNU dialect of --ssttdd==cc++++1111. Support for C++11 is
               still experimental, and may change in incompatible
               ways in future releases.

       --ffggnnuu8899--iinnlliinnee
           The option --ffggnnuu8899--iinnlliinnee tells GCC to use the
           traditional GNU semantics for "inline" functions when
           in C99 mode.
             This option is accepted and ignored by GCC versions
           4.1.3 up to but not including 4.3.  In GCC versions
           4.3 and later it changes the behavior of GCC in C99
           mode.  Using this option is roughly equivalent to
           adding the "gnu_inline" function attribute to all
           inline functions.

           The option --ffnnoo--ggnnuu8899--iinnlliinnee explicitly tells GCC to
           use the C99 semantics for "inline" when in C99 or
           gnu99 mode (i.e., it specifies the default behavior).
           This option was first supported in GCC 4.3.  This
           option is not supported in --ssttdd==cc9900 or --ssttdd==ggnnuu9900
           mode.

           The preprocessor macros "__GNUC_GNU_INLINE__" and
           "__GNUC_STDC_INLINE__" may be used to check which
           semantics are in effect for "inline" functions.

       --aauuxx--iinnffoo _f_i_l_e_n_a_m_e
           Output to the given filename prototyped declarations
           for all functions declared and/or defined in a
           translation unit, including those in header files.
           This option is silently ignored in any language other
           than C.

           Besides declarations, the file indicates, in comments,
           the origin of each declaration (source file and line),
           whether the declaration was implicit, prototyped or
           unprototyped (II, NN for new or OO for old, respectively,
           in the first character after the line number and the
           colon), and whether it came from a declaration or a
           definition (CC or FF, respectively, in the following
           character).  In the case of function definitions, a
           K&R-style list of arguments followed by their
           declarations is also provided, inside comments, after
           the declaration.

       --ffaallllooww--ppaarraammeetteerrlleessss--vvaarriiaaddiicc--ffuunnccttiioonnss
           Accept variadic functions without named parameters.

           Although it is possible to define such a function,
           this is not very useful as it is not possible to read
           the arguments.  This is only supported for C as this
           construct is allowed by C++.




gcc-4.74                    2014-06-12                         26





GCC(1)                         GNU                         GCC(1)


       --ffnnoo--aassmm
           Do not recognize "asm", "inline" or "typeof" as a
           keyword, so that code can use these words as
           identifiers.  You can use the keywords "__asm__",
           "__inline__" and "__typeof__" instead.  --aannssii implies
           --ffnnoo--aassmm.

           In C++, this switch only affects the "typeof" keyword,
           since "asm" and "inline" are standard keywords.  You
           may want to use the --ffnnoo--ggnnuu--kkeeyywwoorrddss flag instead,
           which has the same effect.  In C99 mode (--ssttdd==cc9999 or
           --ssttdd==ggnnuu9999), this switch only affects the "asm" and
           "typeof" keywords, since "inline" is a standard
           keyword in ISO C99.

       --ffnnoo--bbuuiillttiinn
       --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n
           Don't recognize built-in functions that do not begin
           with ____bbuuiillttiinn__ as prefix.

           GCC normally generates special code to handle certain
           built-in functions more efficiently; for instance,
           calls to "alloca" may become single instructions which
           adjust the stack directly, and calls to "memcpy" may
           become inline copy loops.  The resulting code is often
           both smaller and faster, but since the function calls
           no longer appear as such, you cannot set a breakpoint
           on those calls, nor can you change the behavior of the
           functions by linking with a different library.  In
           addition, when a function is recognized as a built-in
           function, GCC may use information about that function
           to warn about problems with calls to that function, or
           to generate more efficient code, even if the resulting
           code still contains calls to that function.  For
           example, warnings are given with --WWffoorrmmaatt for bad
           calls to "printf", when "printf" is built in, and
           "strlen" is known not to modify global memory.

           With the --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n option only the built-
           in function _f_u_n_c_t_i_o_n is disabled.  _f_u_n_c_t_i_o_n must not
           begin with ____bbuuiillttiinn__.  If a function is named that is
           not built-in in this version of GCC, this option is
           ignored.  There is no corresponding --ffbbuuiillttiinn--_f_u_n_c_t_i_o_n
           option; if you wish to enable built-in functions
           selectively when using --ffnnoo--bbuuiillttiinn or --ffffrreeeessttaannddiinngg,
           you may define macros such as:

                   #define abs(n)          __builtin_abs ((n))
                   #define strcpy(d, s)    __builtin_strcpy ((d), (s))

       --ffhhoosstteedd
           Assert that compilation takes place in a hosted
           environment.  This implies --ffbbuuiillttiinn.  A hosted
           environment is one in which the entire standard



gcc-4.74                    2014-06-12                         27





GCC(1)                         GNU                         GCC(1)


           library is available, and in which "main" has a return
           type of "int".  Examples are nearly everything except
           a kernel.  This is equivalent to --ffnnoo--ffrreeeessttaannddiinngg.

       --ffffrreeeessttaannddiinngg
           Assert that compilation takes place in a freestanding
           environment.  This implies --ffnnoo--bbuuiillttiinn.  A
           freestanding environment is one in which the standard
           library may not exist, and program startup may not
           necessarily be at "main".  The most obvious example is
           an OS kernel.  This is equivalent to --ffnnoo--hhoosstteedd.

       --ffooppeennmmpp
           Enable handling of OpenMP directives "#pragma omp" in
           C/C++ and "!$omp" in Fortran.  When --ffooppeennmmpp is
           specified, the compiler generates parallel code
           according to the OpenMP Application Program Interface
           v3.0 <hhttttpp::////wwwwww..ooppeennmmpp..oorrgg//>.  This option implies
           --pptthhrreeaadd, and thus is only supported on targets that
           have support for --pptthhrreeaadd.

       --ffggnnuu--ttmm
           When the option --ffggnnuu--ttmm is specified, the compiler
           will generate code for the Linux variant of Intel's
           current Transactional Memory ABI specification
           document (Revision 1.1, May 6 2009).  This is an
           experimental feature whose interface may change in
           future versions of GCC, as the official specification
           changes.  Please note that not all architectures are
           supported for this feature.

           For more information on GCC's support for
           transactional memory,

           Note that the transactional memory feature is not
           supported with non-call exceptions
           (--ffnnoonn--ccaallll--eexxcceeppttiioonnss).

       --ffmmss--eexxtteennssiioonnss
           Accept some non-standard constructs used in Microsoft
           header files.

           In C++ code, this allows member names in structures to
           be similar to previous types declarations.

                   typedef int UOW;
                   struct ABC {
                     UOW UOW;
                   };

           Some cases of unnamed fields in structures and unions
           are only accepted with this option.





gcc-4.74                    2014-06-12                         28





GCC(1)                         GNU                         GCC(1)


       --ffppllaann99--eexxtteennssiioonnss
           Accept some non-standard constructs used in Plan 9
           code.

           This enables --ffmmss--eexxtteennssiioonnss, permits passing pointers
           to structures with anonymous fields to functions that
           expect pointers to elements of the type of the field,
           and permits referring to anonymous fields declared
           using a typedef.    This is only supported for C, not
           C++.

       --ttrriiggrraapphhss
           Support ISO C trigraphs.  The --aannssii option (and --ssttdd
           options for strict ISO C conformance) implies
           --ttrriiggrraapphhss.

       --nnoo--iinntteeggrraatteedd--ccpppp
           Performs a compilation in two passes: preprocessing
           and compiling.  This option allows a user supplied
           "cc1", "cc1plus", or "cc1obj" via the --BB option.  The
           user supplied compilation step can then add in an
           additional preprocessing step after normal
           preprocessing but before compiling.  The default is to
           use the integrated cpp (internal cpp)

           The semantics of this option will change if "cc1",
           "cc1plus", and "cc1obj" are merged.

       --ttrraaddiittiioonnaall
       --ttrraaddiittiioonnaall--ccpppp
           Formerly, these options caused GCC to attempt to
           emulate a pre-standard C compiler.  They are now only
           supported with the --EE switch.  The preprocessor
           continues to support a pre-standard mode.  See the GNU
           CPP manual for details.

       --ffccoonndd--mmiissmmaattcchh
           Allow conditional expressions with mismatched types in
           the second and third arguments.  The value of such an
           expression is void.  This option is not supported for
           C++.

       --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss
           Allow implicit conversions between vectors with
           differing numbers of elements and/or incompatible
           element types.  This option should not be used for new
           code.

       --ffuunnssiiggnneedd--cchhaarr
           Let the type "char" be unsigned, like "unsigned char".

           Each kind of machine has a default for what "char"
           should be.  It is either like "unsigned char" by
           default or like "signed char" by default.



gcc-4.74                    2014-06-12                         29





GCC(1)                         GNU                         GCC(1)


           Ideally, a portable program should always use "signed
           char" or "unsigned char" when it depends on the
           signedness of an object.  But many programs have been
           written to use plain "char" and expect it to be
           signed, or expect it to be unsigned, depending on the
           machines they were written for.  This option, and its
           inverse, let you make such a program work with the
           opposite default.

           The type "char" is always a distinct type from each of
           "signed char" or "unsigned char", even though its
           behavior is always just like one of those two.

       --ffssiiggnneedd--cchhaarr
           Let the type "char" be signed, like "signed char".

           Note that this is equivalent to --ffnnoo--uunnssiiggnneedd--cchhaarr,
           which is the negative form of --ffuunnssiiggnneedd--cchhaarr.
           Likewise, the option --ffnnoo--ssiiggnneedd--cchhaarr is equivalent to
           --ffuunnssiiggnneedd--cchhaarr.

       --ffssiiggnneedd--bbiittffiieellddss
       --ffuunnssiiggnneedd--bbiittffiieellddss
       --ffnnoo--ssiiggnneedd--bbiittffiieellddss
       --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss
           These options control whether a bit-field is signed or
           unsigned, when the declaration does not use either
           "signed" or "unsigned".  By default, such a bit-field
           is signed, because this is consistent: the basic
           integer types such as "int" are signed types.

       OOppttiioonnss CCoonnttrroolllliinngg CC++++ DDiiaalleecctt

       This section describes the command-line options that are
       only meaningful for C++ programs; but you can also use
       most of the GNU compiler options regardless of what
       language your program is in.  For example, you might
       compile a file "firstClass.C" like this:

               g++ -g -frepo -O -c firstClass.C

       In this example, only --ffrreeppoo is an option meant only for
       C++ programs; you can use the other options with any
       language supported by GCC.

       Here is a list of options that are _o_n_l_y for compiling C++
       programs:

       --ffaabbii--vveerrssiioonn==_n
           Use version _n of the C++ ABI.  Version 2 is the
           version of the C++ ABI that first appeared in G++ 3.4.
           Version 1 is the version of the C++ ABI that first
           appeared in G++ 3.2.  Version 0 will always be the
           version that conforms most closely to the C++ ABI



gcc-4.74                    2014-06-12                         30





GCC(1)                         GNU                         GCC(1)


           specification.  Therefore, the ABI obtained using
           version 0 will change as ABI bugs are fixed.

           The default is version 2.

           Version 3 corrects an error in mangling a constant
           address as a template argument.

           Version 4, which first appeared in G++ 4.5, implements
           a standard mangling for vector types.

           Version 5, which first appeared in G++ 4.6, corrects
           the mangling of attribute const/volatile on function
           pointer types, decltype of a plain decl, and use of a
           function parameter in the declaration of another
           parameter.

           Version 6, which first appeared in G++ 4.7, corrects
           the promotion behavior of C++11 scoped enums and the
           mangling of template argument packs,
           const/static_cast, prefix ++ and --, and a class scope
           function used as a template argument.

           See also --WWaabbii.

       --ffnnoo--aacccceessss--ccoonnttrrooll
           Turn off all access checking.  This switch is mainly
           useful for working around bugs in the access control
           code.

       --ffcchheecckk--nneeww
           Check that the pointer returned by "operator new" is
           non-null before attempting to modify the storage
           allocated.  This check is normally unnecessary because
           the C++ standard specifies that "operator new" will
           only return 0 if it is declared _tt_hh_rr_oo_ww_((_)), in which case
           the compiler will always check the return value even
           without this option.  In all other cases, when
           "operator new" has a non-empty exception
           specification, memory exhaustion is signalled by
           throwing "std::bad_alloc".  See also nneeww ((nnootthhrrooww)).

       --ffccoonnsseerrvvee--ssppaaccee
           Put uninitialized or run-time-initialized global
           variables into the common segment, as C does.  This
           saves space in the executable at the cost of not
           diagnosing duplicate definitions.  If you compile with
           this flag and your program mysteriously crashes after
           "main()" has completed, you may have an object that is
           being destroyed twice because two definitions were
           merged.

           This option is no longer useful on most targets, now
           that support has been added for putting variables into



gcc-4.74                    2014-06-12                         31





GCC(1)                         GNU                         GCC(1)


           BSS without making them common.

       --ffccoonnsstteexxpprr--ddeepptthh==_n
           Set the maximum nested evaluation depth for C++11
           constexpr functions to _n.  A limit is needed to detect
           endless recursion during constant expression
           evaluation.  The minimum specified by the standard is
           512.

       --ffddeedduuccee--iinniitt--lliisstt
           Enable deduction of a template type parameter as
           std::initializer_list from a brace-enclosed
           initializer list, i.e.

                   template <class T> auto forward(T t) -> decltype (realfn (t))
                   {
                     return realfn (t);
                   }

                   void f()
                   {
                     forward({1,2}); // call forward<std::initializer_list<int>>
                   }

           This deduction was implemented as a possible extension
           to the originally proposed semantics for the C++11
           standard, but was not part of the final standard, so
           it is disabled by default.  This option is deprecated,
           and may be removed in a future version of G++.

       --ffffrriieenndd--iinnjjeeccttiioonn
           Inject friend functions into the enclosing namespace,
           so that they are visible outside the scope of the
           class in which they are declared.  Friend functions
           were documented to work this way in the old Annotated
           C++ Reference Manual, and versions of G++ before 4.1
           always worked that way.  However, in ISO C++ a friend
           function that is not declared in an enclosing scope
           can only be found using argument dependent lookup.
           This option causes friends to be injected as they were
           in earlier releases.

           This option is for compatibility, and may be removed
           in a future release of G++.

       --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
           The C++ standard allows an implementation to omit
           creating a temporary that is only used to initialize
           another object of the same type.  Specifying this
           option disables that optimization, and forces G++ to
           call the copy constructor in all cases.

       --ffnnoo--eennffoorrccee--eehh--ssppeeccss
           Don't generate code to check for violation of



gcc-4.74                    2014-06-12                         32





GCC(1)                         GNU                         GCC(1)


           exception specifications at run time.  This option
           violates the C++ standard, but may be useful for
           reducing code size in production builds, much like
           defining NNDDEEBBUUGG.  This does not give user code
           permission to throw exceptions in violation of the
           exception specifications; the compiler will still
           optimize based on the specifications, so throwing an
           unexpected exception will result in undefined
           behavior.

       --ffffoorr--ssccooppee
       --ffnnoo--ffoorr--ssccooppee
           If --ffffoorr--ssccooppee is specified, the scope of variables
           declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t is limited to the ffoorr
           loop itself, as specified by the C++ standard.  If
           --ffnnoo--ffoorr--ssccooppee is specified, the scope of variables
           declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t extends to the end of
           the enclosing scope, as was the case in old versions
           of G++, and other (traditional) implementations of
           C++.

           The default if neither flag is given to follow the
           standard, but to allow and give a warning for old-
           style code that would otherwise be invalid, or have
           different behavior.

       --ffnnoo--ggnnuu--kkeeyywwoorrddss
           Do not recognize "typeof" as a keyword, so that code
           can use this word as an identifier.  You can use the
           keyword "__typeof__" instead.  --aannssii implies
           --ffnnoo--ggnnuu--kkeeyywwoorrddss.

       --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
           Never emit code for non-inline templates that are
           instantiated implicitly (i.e. by use); only emit code
           for explicit instantiations.

       --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
           Don't emit code for implicit instantiations of inline
           templates, either.  The default is to handle inlines
           differently so that compiles with and without
           optimization will need the same set of explicit
           instantiations.

       --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
           To save space, do not emit out-of-line copies of
           inline functions controlled by ##pprraaggmmaa iimmpplleemmeennttaattiioonn.
           This will cause linker errors if these functions are
           not inlined everywhere they are called.

       --ffmmss--eexxtteennssiioonnss
           Disable pedantic warnings about constructs used in
           MFC, such as implicit int and getting a pointer to
           member function via non-standard syntax.



gcc-4.74                    2014-06-12                         33





GCC(1)                         GNU                         GCC(1)


       --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
           Disable built-in declarations of functions that are
           not mandated by ANSI/ISO C.  These include "ffs",
           "alloca", "_exit", "index", "bzero", "conjf", and
           other related functions.

       --ffnnootthhrrooww--oopptt
           Treat a "throw()" exception specification as though it
           were a "noexcept" specification to reduce or eliminate
           the text size overhead relative to a function with no
           exception specification.  If the function has local
           variables of types with non-trivial destructors, the
           exception specification will actually make the
           function smaller because the EH cleanups for those
           variables can be optimized away.  The semantic effect
           is that an exception thrown out of a function with
           such an exception specification will result in a call
           to "terminate" rather than "unexpected".

       --ffnnoo--ooppeerraattoorr--nnaammeess
           Do not treat the operator name keywords "and",
           "bitand", "bitor", "compl", "not", "or" and "xor" as
           synonyms as keywords.

       --ffnnoo--ooppttiioonnaall--ddiiaaggss
           Disable diagnostics that the standard says a compiler
           does not need to issue.  Currently, the only such
           diagnostic issued by G++ is the one for a name having
           multiple meanings within a class.

       --ffppeerrmmiissssiivvee
           Downgrade some diagnostics about nonconformant code
           from errors to warnings.  Thus, using --ffppeerrmmiissssiivvee
           will allow some nonconforming code to compile.

       --ffnnoo--pprreettttyy--tteemmppllaatteess
           When an error message refers to a specialization of a
           function template, the compiler will normally print
           the signature of the template followed by the template
           arguments and any typedefs or typenames in the
           signature (e.g. "void f(T) [with T = int]" rather than
           "void f(int)") so that it's clear which template is
           involved.  When an error message refers to a
           specialization of a class template, the compiler will
           omit any template arguments that match the default
           template arguments for that template.  If either of
           these behaviors make it harder to understand the error
           message rather than easier, using
           --ffnnoo--pprreettttyy--tteemmppllaatteess will disable them.

       --ffrreeppoo
           Enable automatic template instantiation at link time.
           This option also implies --ffnnoo--iimmpplliicciitt--tteemmppllaatteess.




gcc-4.74                    2014-06-12                         34





GCC(1)                         GNU                         GCC(1)


       --ffnnoo--rrttttii
           Disable generation of information about every class
           with virtual functions for use by the C++ run-time
           type identification features (ddyynnaammiicc__ccaasstt and
           ttyyppeeiidd).  If you don't use those parts of the
           language, you can save some space by using this flag.
           Note that exception handling uses the same
           information, but it will generate it as needed. The
           ddyynnaammiicc__ccaasstt operator can still be used for casts that
           do not require run-time type information, i.e. casts
           to "void *" or to unambiguous base classes.

       --ffssttaattss
           Emit statistics about front-end processing at the end
           of the compilation.  This information is generally
           only useful to the G++ development team.

       --ffssttrriicctt--eennuummss
           Allow the compiler to optimize using the assumption
           that a value of enumerated type can only be one of the
           values of the enumeration (as defined in the C++
           standard; basically, a value that can be represented
           in the minimum number of bits needed to represent all
           the enumerators).  This assumption may not be valid if
           the program uses a cast to convert an arbitrary
           integer value to the enumerated type.

       --fftteemmppllaattee--ddeepptthh==_n
           Set the maximum instantiation depth for template
           classes to _n.  A limit on the template instantiation
           depth is needed to detect endless recursions during
           template class instantiation.  ANSI/ISO C++ conforming
           programs must not rely on a maximum depth greater than
           17 (changed to 1024 in C++11).  The default value is
           900, as the compiler can run out of stack space before
           hitting 1024 in some situations.

       --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           Do not emit the extra code to use the routines
           specified in the C++ ABI for thread-safe
           initialization of local statics.  You can use this
           option to reduce code size slightly in code that
           doesn't need to be thread-safe.

       --ffuussee--ccxxaa--aatteexxiitt
           Register destructors for objects with static storage
           duration with the "__cxa_atexit" function rather than
           the "atexit" function.  This option is required for
           fully standards-compliant handling of static
           destructors, but will only work if your C library
           supports "__cxa_atexit".

       --ffnnoo--uussee--ccxxaa--ggeett--eexxcceeppttiioonn--ppttrr
           Don't use the "__cxa_get_exception_ptr" runtime



gcc-4.74                    2014-06-12                         35





GCC(1)                         GNU                         GCC(1)


           routine.  This will cause "std::uncaught_exception" to
           be incorrect, but is necessary if the runtime routine
           is not available.

       --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           This switch declares that the user does not attempt to
           compare pointers to inline functions or methods where
           the addresses of the two functions were taken in
           different shared objects.

           The effect of this is that GCC may, effectively, mark
           inline methods with "__attribute__ ((visibility
           ("hidden")))" so that they do not appear in the export
           table of a DSO and do not require a PLT indirection
           when used within the DSO.  Enabling this option can
           have a dramatic effect on load and link times of a DSO
           as it massively reduces the size of the dynamic export
           table when the library makes heavy use of templates.

           The behavior of this switch is not quite the same as
           marking the methods as hidden directly, because it
           does not affect static variables local to the function
           or cause the compiler to deduce that the function is
           defined in only one shared object.

           You may mark a method as having a visibility
           explicitly to negate the effect of the switch for that
           method.  For example, if you do want to compare
           pointers to a particular inline method, you might mark
           it as having default visibility.  Marking the
           enclosing class with explicit visibility will have no
           effect.

           Explicitly instantiated inline methods are unaffected
           by this option as their linkage might otherwise cross
           a shared library boundary.

       --ffvviissiibbiilliittyy--mmss--ccoommppaatt
           This flag attempts to use visibility settings to make
           GCC's C++ linkage model compatible with that of
           Microsoft Visual Studio.

           The flag makes these changes to GCC's linkage model:

           1.  It sets the default visibility to "hidden", like
               --ffvviissiibbiilliittyy==hhiiddddeenn.

           2.  Types, but not their members, are not hidden by
               default.

           3.  The One Definition Rule is relaxed for types
               without explicit visibility specifications that
               are defined in more than one different shared
               object: those declarations are permitted if they



gcc-4.74                    2014-06-12                         36





GCC(1)                         GNU                         GCC(1)


               would have been permitted when this option was not
               used.

           In new code it is better to use --ffvviissiibbiilliittyy==hhiiddddeenn
           and export those classes that are intended to be
           externally visible.  Unfortunately it is possible for
           code to rely, perhaps accidentally, on the Visual
           Studio behavior.

           Among the consequences of these changes are that
           static data members of the same type with the same
           name but defined in different shared objects will be
           different, so changing one will not change the other;
           and that pointers to function members defined in
           different shared objects may not compare equal.  When
           this flag is given, it is a violation of the ODR to
           define types with the same name differently.

       --ffnnoo--wweeaakk
           Do not use weak symbol support, even if it is provided
           by the linker.  By default, G++ will use weak symbols
           if they are available.  This option exists only for
           testing, and should not be used by end-users; it will
           result in inferior code and has no benefits.  This
           option may be removed in a future release of G++.

       --nnoossttddiinncc++++
           Do not search for header files in the standard
           directories specific to C++, but do still search the
           other standard directories.  (This option is used when
           building the C++ library.)

       In addition, these optimization, warning, and code
       generation options have meanings only for C++ programs:

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
           Do not assume iinnlliinnee for functions defined inside a
           class scope.
             Note that these functions will have linkage like
           inline functions; they just won't be inlined by
           default.

       --WWaabbii (C, Objective-C, C++ and Objective-C++ only)
           Warn when G++ generates code that is probably not
           compatible with the vendor-neutral C++ ABI.  Although
           an effort has been made to warn about all such cases,
           there are probably some cases that are not warned
           about, even though G++ is generating incompatible
           code.  There may also be cases where warnings are
           emitted even though the code that is generated will be
           compatible.

           You should rewrite your code to avoid these warnings
           if you are concerned about the fact that code



gcc-4.74                    2014-06-12                         37





GCC(1)                         GNU                         GCC(1)


           generated by G++ may not be binary compatible with
           code generated by other compilers.

           The known incompatibilities in --ffaabbii--vveerrssiioonn==22 (the
           default) include:

           *   A template with a non-type template parameter of
               reference type is mangled incorrectly:

                       extern int N;
                       template <int &> struct S {};
                       void n (S<N>) {2}

               This is fixed in --ffaabbii--vveerrssiioonn==33.

           *   SIMD vector types declared using "__attribute
               ((vector_size))" are mangled in a non-standard way
               that does not allow for overloading of functions
               taking vectors of different sizes.

               The mangling is changed in --ffaabbii--vveerrssiioonn==44.

           The known incompatibilities in --ffaabbii--vveerrssiioonn==11
           include:

           *   Incorrect handling of tail-padding for bit-fields.
               G++ may attempt to pack data into the same byte as
               a base class.  For example:

                       struct A { virtual void f(); int f1 : 1; };
                       struct B : public A { int f2 : 1; };

               In this case, G++ will place "B::f2" into the same
               byte as"A::f1"; other compilers will not.  You can
               avoid this problem by explicitly padding "A" so
               that its size is a multiple of the byte size on
               your platform; that will cause G++ and other
               compilers to layout "B" identically.

           *   Incorrect handling of tail-padding for virtual
               bases.  G++ does not use tail padding when laying
               out virtual bases.  For example:

                       struct A { virtual void f(); char c1; };
                       struct B { B(); char c2; };
                       struct C : public A, public virtual B {};

               In this case, G++ will not place "B" into the
               tail-padding for "A"; other compilers will.  You
               can avoid this problem by explicitly padding "A"
               so that its size is a multiple of its alignment
               (ignoring virtual base classes); that will cause
               G++ and other compilers to layout "C" identically.




gcc-4.74                    2014-06-12                         38





GCC(1)                         GNU                         GCC(1)


           *   Incorrect handling of bit-fields with declared
               widths greater than that of their underlying
               types, when the bit-fields appear in a union.  For
               example:

                       union U { int i : 4096; };

               Assuming that an "int" does not have 4096 bits,
               G++ will make the union too small by the number of
               bits in an "int".

           *   Empty classes can be placed at incorrect offsets.
               For example:

                       struct A {};

                       struct B {
                         A a;
                         virtual void f ();
                       };

                       struct C : public B, public A {};

               G++ will place the "A" base class of "C" at a
               nonzero offset; it should be placed at offset
               zero.  G++ mistakenly believes that the "A" data
               member of "B" is already at offset zero.

           *   Names of template functions whose types involve
               "typename" or template template parameters can be
               mangled incorrectly.

                       template <typename Q>
                       void f(typename Q::X) {}

                       template <template <typename> class Q>
                       void f(typename Q<int>::X) {}

               Instantiations of these templates may be mangled
               incorrectly.

           It also warns psABI related changes.  The known psABI
           changes at this point include:

           *   For SYSV/x86-64, when passing union with long
               double, it is changed to pass in memory as
               specified in psABI.  For example:

                       union U {
                         long double ld;
                         int i;
                       };

               "union U" will always be passed in memory.



gcc-4.74                    2014-06-12                         39





GCC(1)                         GNU                         GCC(1)


       --WWccttoorr--ddttoorr--pprriivvaaccyy (C++ and Objective-C++ only)
           Warn when a class seems unusable because all the
           constructors or destructors in that class are private,
           and it has neither friends nor public static member
           functions.

       --WWddeelleettee--nnoonn--vviirrttuuaall--ddttoorr (C++ and Objective-C++ only)
           Warn when ddeelleettee is used to destroy an instance of a
           class that has virtual functions and non-virtual
           destructor. It is unsafe to delete an instance of a
           derived class through a pointer to a base class if the
           base class does not have a virtual destructor.  This
           warning is enabled by --WWaallll.

       --WWnnaarrrroowwiinngg (C++ and Objective-C++ only)
           Warn when a narrowing conversion prohibited by C++11
           occurs within {{ }}, e.g.

                   int i = { 2.2 }; // error: narrowing from double to int

           This flag is included in --WWaallll and --WWcc++++1111--ccoommppaatt.

           With -std=c++11, --WWnnoo--nnaarrrroowwiinngg suppresses the
           diagnostic required by the standard.  Note that this
           does not affect the meaning of well-formed code;
           narrowing conversions are still considered ill-formed
           in SFINAE context.

       --WWnnooeexxcceepptt (C++ and Objective-C++ only)
           Warn when a noexcept-expression evaluates to false
           because of a call to a function that does not have a
           non-throwing exception specification (i.e. _tt_hh_rr_oo_ww_((_)) or
           nnooeexxcceepptt) but is known by the compiler to never throw
           an exception.

       --WWnnoonn--vviirrttuuaall--ddttoorr (C++ and Objective-C++ only)
           Warn when a class has virtual functions and accessible
           non-virtual destructor, in which case it would be
           possible but unsafe to delete an instance of a derived
           class through a pointer to the base class.  This
           warning is also enabled if --WWeeffffcc++++ is specified.

       --WWrreeoorrddeerr (C++ and Objective-C++ only)
           Warn when the order of member initializers given in
           the code does not match the order in which they must
           be executed.  For instance:

                   struct A {
                     int i;
                     int j;
                     A(): j (0), i (1) { }
                   };

           The compiler will rearrange the member initializers



gcc-4.74                    2014-06-12                         40





GCC(1)                         GNU                         GCC(1)


           for ii and jj to match the declaration order of the
           members, emitting a warning to that effect.  This
           warning is enabled by --WWaallll.

       The following --WW...... options are not affected by --WWaallll.

       --WWeeffffcc++++ (C++ and Objective-C++ only)
           Warn about violations of the following style
           guidelines from Scott Meyers' _E_f_f_e_c_t_i_v_e _C_+_+_, _S_e_c_o_n_d
           _E_d_i_t_i_o_n book:

           *   Item 11:  Define a copy constructor and an
               assignment operator for classes with dynamically
               allocated memory.

           *   Item 12:  Prefer initialization to assignment in
               constructors.

           *   Item 14:  Make destructors virtual in base
               classes.

           *   Item 15:  Have "operator=" return a reference to
               *this.

           *   Item 23:  Don't try to return a reference when you
               must return an object.

           Also warn about violations of the following style
           guidelines from Scott Meyers' _M_o_r_e _E_f_f_e_c_t_i_v_e _C_+_+ book:

           *   Item 6:  Distinguish between prefix and postfix
               forms of increment and decrement operators.

           *   Item 7:  Never overload "&&", "||", or ",".

           When selecting this option, be aware that the standard
           library headers do not obey all of these guidelines;
           use ggrreepp --vv to filter out those warnings.

       --WWssttrriicctt--nnuullll--sseennttiinneell (C++ and Objective-C++ only)
           Warn also about the use of an uncasted "NULL" as
           sentinel.  When compiling only with GCC this is a
           valid sentinel, as "NULL" is defined to "__null".
           Although it is a null pointer constant not a null
           pointer, it is guaranteed to be of the same size as a
           pointer.  But this use is not portable across
           different compilers.

       --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd (C++ and Objective-C++ only)
           Disable warnings when non-templatized friend functions
           are declared within a template.  Since the advent of
           explicit template specification support in G++, if the
           name of the friend is an unqualified-id (i.e., ffrriieenndd
           ffoooo((iinntt))), the C++ language specification demands that



gcc-4.74                    2014-06-12                         41





GCC(1)                         GNU                         GCC(1)


           the friend declare or define an ordinary, nontemplate
           function.  (Section 14.5.3).  Before G++ implemented
           explicit specification, unqualified-ids could be
           interpreted as a particular specialization of a
           templatized function.  Because this non-conforming
           behavior is no longer the default behavior for G++,
           --WWnnoonn--tteemmppllaattee--ffrriieenndd allows the compiler to check
           existing code for potential trouble spots and is on by
           default.  This new compiler behavior can be turned off
           with --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd, which keeps the
           conformant compiler code but disables the helpful
           warning.

       --WWoolldd--ssttyyllee--ccaasstt (C++ and Objective-C++ only)
           Warn if an old-style (C-style) cast to a non-void type
           is used within a C++ program.  The new-style casts
           (ddyynnaammiicc__ccaasstt, ssttaattiicc__ccaasstt, rreeiinntteerrpprreett__ccaasstt, and
           ccoonnsstt__ccaasstt) are less vulnerable to unintended effects
           and much easier to search for.

       --WWoovveerrllooaaddeedd--vviirrttuuaall (C++ and Objective-C++ only)
           Warn when a function declaration hides virtual
           functions from a base class.  For example, in:

                   struct A {
                     virtual void f();
                   };

                   struct B: public A {
                     void f(int);
                   };

           the "A" class version of "f" is hidden in "B", and
           code like:

                   B* b;
                   b->f();

           will fail to compile.

       --WWnnoo--ppmmff--ccoonnvveerrssiioonnss (C++ and Objective-C++ only)
           Disable the diagnostic for converting a bound pointer
           to member function to a plain pointer.

       --WWssiiggnn--pprroommoo (C++ and Objective-C++ only)
           Warn when overload resolution chooses a promotion from
           unsigned or enumerated type to a signed type, over a
           conversion to an unsigned type of the same size.
           Previous versions of G++ would try to preserve
           unsignedness, but the standard mandates the current
           behavior.






gcc-4.74                    2014-06-12                         42





GCC(1)                         GNU                         GCC(1)


                   struct A {
                     operator int ();
                     A& operator = (int);
                   };

                   main ()
                   {
                     A a,b;
                     a = b;
                   }

           In this example, G++ will synthesize a default AA&&
           ooppeerraattoorr == ((ccoonnsstt AA&&));;, while cfront will use the
           user-defined ooppeerraattoorr ==.

       OOppttiioonnss CCoonnttrroolllliinngg OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleeccttss

       (NOTE: This manual does not describe the Objective-C and
       Objective-C++ languages themselves.

       This section describes the command-line options that are
       only meaningful for Objective-C and Objective-C++
       programs, but you can also use most of the language-
       independent GNU compiler options.  For example, you might
       compile a file "some_class.m" like this:

               gcc -g -fgnu-runtime -O -c some_class.m

       In this example, --ffggnnuu--rruunnttiimmee is an option meant only for
       Objective-C and Objective-C++ programs; you can use the
       other options with any language supported by GCC.

       Note that since Objective-C is an extension of the C
       language, Objective-C compilations may also use options
       specific to the C front-end (e.g., --WWttrraaddiittiioonnaall).
       Similarly, Objective-C++ compilations may use C++-specific
       options (e.g., --WWaabbii).

       Here is a list of options that are _o_n_l_y for compiling
       Objective-C and Objective-C++ programs:

       --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e
           Use _c_l_a_s_s_-_n_a_m_e as the name of the class to instantiate
           for each literal string specified with the syntax
           "@"..."".  The default class name is
           "NXConstantString" if the GNU runtime is being used,
           and "NSConstantString" if the NeXT runtime is being
           used (see below).  The --ffccoonnssttaanntt--ccffssttrriinnggss option, if
           also present, will override the
           --ffccoonnssttaanntt--ssttrriinngg--ccllaassss setting and cause "@"...""
           literals to be laid out as constant CoreFoundation
           strings.





gcc-4.74                    2014-06-12                         43





GCC(1)                         GNU                         GCC(1)


       --ffggnnuu--rruunnttiimmee
           Generate object code compatible with the standard GNU
           Objective-C runtime.  This is the default for most
           types of systems.

       --ffnneexxtt--rruunnttiimmee
           Generate output compatible with the NeXT runtime.
           This is the default for NeXT-based systems, including
           Darwin and Mac OS X.  The macro "__NEXT_RUNTIME__" is
           predefined if (and only if) this option is used.

       --ffnnoo--nniill--rreecceeiivveerrss
           Assume that all Objective-C message dispatches
           ("[receiver message:arg]") in this translation unit
           ensure that the receiver is not "nil".  This allows
           for more efficient entry points in the runtime to be
           used.  This option is only available in conjunction
           with the NeXT runtime and ABI version 0 or 1.

       --ffoobbjjcc--aabbii--vveerrssiioonn==_n
           Use version _n of the Objective-C ABI for the selected
           runtime.  This option is currently supported only for
           the NeXT runtime.  In that case, Version 0 is the
           traditional (32-bit) ABI without support for
           properties and other Objective-C 2.0 additions.
           Version 1 is the traditional (32-bit) ABI with support
           for properties and other Objective-C 2.0 additions.
           Version 2 is the modern (64-bit) ABI.  If nothing is
           specified, the default is Version 0 on 32-bit target
           machines, and Version 2 on 64-bit target machines.

       --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss
           For each Objective-C class, check if any of its
           instance variables is a C++ object with a non-trivial
           default constructor.  If so, synthesize a special "-
           (id) .cxx_construct" instance method which will run
           non-trivial default constructors on any such instance
           variables, in order, and then return "self".
           Similarly, check if any instance variable is a C++
           object with a non-trivial destructor, and if so,
           synthesize a special "- (void) .cxx_destruct" method
           which will run all such default destructors, in
           reverse order.

           The "- (id) .cxx_construct" and "- (void)
           .cxx_destruct" methods thusly generated will only
           operate on instance variables declared in the current
           Objective-C class, and not those inherited from
           superclasses.  It is the responsibility of the
           Objective-C runtime to invoke all such methods in an
           object's inheritance hierarchy.  The "- (id)
           .cxx_construct" methods will be invoked by the runtime
           immediately after a new object instance is allocated;
           the "- (void) .cxx_destruct" methods will be invoked



gcc-4.74                    2014-06-12                         44





GCC(1)                         GNU                         GCC(1)


           immediately before the runtime deallocates an object
           instance.

           As of this writing, only the NeXT runtime on Mac OS X
           10.4 and later has support for invoking the "- (id)
           .cxx_construct" and "- (void) .cxx_destruct" methods.

       --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           Allow fast jumps to the message dispatcher.  On Darwin
           this is accomplished via the comm page.

       --ffoobbjjcc--eexxcceeppttiioonnss
           Enable syntactic support for structured exception
           handling in Objective-C, similar to what is offered by
           C++ and Java.  This option is required to use the
           Objective-C keywords @try, @throw, @catch, @finally
           and @synchronized.  This option is available with both
           the GNU runtime and the NeXT runtime (but not
           available in conjunction with the NeXT runtime on Mac
           OS X 10.2 and earlier).

       --ffoobbjjcc--ggcc
           Enable garbage collection (GC) in Objective-C and
           Objective-C++ programs.  This option is only available
           with the NeXT runtime; the GNU runtime has a different
           garbage collection implementation that does not
           require special compiler flags.

       --ffoobbjjcc--nniillcchheecckk
           For the NeXT runtime with version 2 of the ABI, check
           for a nil receiver in method invocations before doing
           the actual method call.  This is the default and can
           be disabled using --ffnnoo--oobbjjcc--nniillcchheecckk.  Class methods
           and super calls are never checked for nil in this way
           no matter what this flag is set to.  Currently this
           flag does nothing when the GNU runtime, or an older
           version of the NeXT runtime ABI, is used.

       --ffoobbjjcc--ssttdd==oobbjjcc11
           Conform to the language syntax of Objective-C 1.0, the
           language recognized by GCC 4.0.  This only affects the
           Objective-C additions to the C/C++ language; it does
           not affect conformance to C/C++ standards, which is
           controlled by the separate C/C++ dialect option flags.
           When this option is used with the Objective-C or
           Objective-C++ compiler, any Objective-C syntax that is
           not recognized by GCC 4.0 is rejected.  This is useful
           if you need to make sure that your Objective-C code
           can be compiled with older versions of GCC.

       --ffrreeppllaaccee--oobbjjcc--ccllaasssseess
           Emit a special marker instructing _ll_dd((11)) not to
           statically link in the resulting object file, and
           allow _dd_yy_ll_dd((11)) to load it in at run time instead.  This



gcc-4.74                    2014-06-12                         45





GCC(1)                         GNU                         GCC(1)


           is used in conjunction with the Fix-and-Continue
           debugging mode, where the object file in question may
           be recompiled and dynamically reloaded in the course
           of program execution, without the need to restart the
           program itself.  Currently, Fix-and-Continue
           functionality is only available in conjunction with
           the NeXT runtime on Mac OS X 10.3 and later.

       --ffzzeerroo--lliinnkk
           When compiling for the NeXT runtime, the compiler
           ordinarily replaces calls to "objc_getClass("...")"
           (when the name of the class is known at compile time)
           with static class references that get initialized at
           load time, which improves run-time performance.
           Specifying the --ffzzeerroo--lliinnkk flag suppresses this
           behavior and causes calls to "objc_getClass("...")"
           to be retained.  This is useful in Zero-Link debugging
           mode, since it allows for individual class
           implementations to be modified during program
           execution.  The GNU runtime currently always retains
           calls to "objc_get_class("...")"  regardless of
           command-line options.

       --ggeenn--ddeeccllss
           Dump interface declarations for all classes seen in
           the source file to a file named _s_o_u_r_c_e_n_a_m_e_._d_e_c_l.

       --WWaassssiiggnn--iinntteerrcceepptt (Objective-C and Objective-C++ only)
           Warn whenever an Objective-C assignment is being
           intercepted by the garbage collector.

       --WWnnoo--pprroottooccooll (Objective-C and Objective-C++ only)
           If a class is declared to implement a protocol, a
           warning is issued for every method in the protocol
           that is not implemented by the class.  The default
           behavior is to issue a warning for every method not
           explicitly implemented in the class, even if a method
           implementation is inherited from the superclass.  If
           you use the --WWnnoo--pprroottooccooll option, then methods
           inherited from the superclass are considered to be
           implemented, and no warning is issued for them.

       --WWsseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if multiple methods of different types for the
           same selector are found during compilation.  The check
           is performed on the list of methods in the final stage
           of compilation.  Additionally, a check is performed
           for each selector appearing in a "@selector(...)"
           expression, and a corresponding method for that
           selector has been found during compilation.  Because
           these checks scan the method table only at the end of
           compilation, these warnings are not produced if the
           final stage of compilation is not reached, for example
           because an error is found during compilation, or



gcc-4.74                    2014-06-12                         46





GCC(1)                         GNU                         GCC(1)


           because the --ffssyynnttaaxx--oonnllyy option is being used.

       --WWssttrriicctt--sseelleeccttoorr--mmaattcchh (Objective-C and Objective-C++
       only)
           Warn if multiple methods with differing argument
           and/or return types are found for a given selector
           when attempting to send a message using this selector
           to a receiver of type "id" or "Class".  When this flag
           is off (which is the default behavior), the compiler
           will omit such warnings if any differences found are
           confined to types that share the same size and
           alignment.

       --WWuunnddeeccllaarreedd--sseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if a "@selector(...)" expression referring to an
           undeclared selector is found.  A selector is
           considered undeclared if no method with that name has
           been declared before the "@selector(...)" expression,
           either explicitly in an @interface or @protocol
           declaration, or implicitly in an @implementation
           section.  This option always performs its checks as
           soon as a "@selector(...)" expression is found, while
           --WWsseelleeccttoorr only performs its checks in the final stage
           of compilation.  This also enforces the coding style
           convention that methods and selectors must be declared
           before being used.

       --pprriinntt--oobbjjcc--rruunnttiimmee--iinnffoo
           Generate C header describing the largest structure
           that is passed by value, if any.

       OOppttiioonnss ttoo CCoonnttrrooll DDiiaaggnnoossttiicc MMeessssaaggeess FFoorrmmaattttiinngg

       Traditionally, diagnostic messages have been formatted
       irrespective of the output device's aspect (e.g. its
       width, ...).  The options described below can be used to
       control the diagnostic messages formatting algorithm, e.g.
       how many characters per line, how often source location
       information should be reported.  Right now, only the C++
       front end can honor these options.  However it is
       expected, in the near future, that the remaining front
       ends would be able to digest them correctly.

       --ffmmeessssaaggee--lleennggtthh==_n
           Try to format error messages so that they fit on lines
           of about _n characters.  The default is 72 characters
           for gg++++ and 0 for the rest of the front ends supported
           by GCC.  If _n is zero, then no line-wrapping will be
           done; each error message will appear on a single line.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==oonnccee
           Only meaningful in line-wrapping mode.  Instructs the
           diagnostic messages reporter to emit _o_n_c_e source
           location information; that is, in case the message is



gcc-4.74                    2014-06-12                         47





GCC(1)                         GNU                         GCC(1)


           too long to fit on a single physical line and has to
           be wrapped, the source location won't be emitted (as
           prefix) again, over and over, in subsequent
           continuation lines.  This is the default behavior.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==eevveerryy--lliinnee
           Only meaningful in line-wrapping mode.  Instructs the
           diagnostic messages reporter to emit the same source
           location information (as prefix) for physical lines
           that result from the process of breaking a message
           which is too long to fit on a single line.

       --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn
           By default, each diagnostic emitted includes text
           indicating the command-line option that directly
           controls the diagnostic (if such an option is known to
           the diagnostic machinery).  Specifying the
           --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn flag suppresses that
           behavior.

       OOppttiioonnss ttoo RReeqquueesstt oorr SSuupppprreessss WWaarrnniinnggss

       Warnings are diagnostic messages that report constructions
       that are not inherently erroneous but that are risky or
       suggest there may have been an error.

       The following language-independent options do not enable
       specific warnings but control the kinds of diagnostics
       produced by GCC.

       --ffssyynnttaaxx--oonnllyy
           Check the code for syntax errors, but don't do
           anything beyond that.

       --ffmmaaxx--eerrrroorrss==_n
           Limits the maximum number of error messages to _n, at
           which point GCC bails out rather than attempting to
           continue processing the source code.  If _n is 0 (the
           default), there is no limit on the number of error
           messages produced.  If --WWffaattaall--eerrrroorrss is also
           specified, then --WWffaattaall--eerrrroorrss takes precedence over
           this option.

       --ww  Inhibit all warning messages.

       --WWeerrrroorr
           Make all warnings into errors.

       --WWeerrrroorr==
           Make the specified warning into an error.  The
           specifier for a warning is appended, for example
           --WWeerrrroorr==sswwiittcchh turns the warnings controlled by
           --WWsswwiittcchh into errors.  This switch takes a negative
           form, to be used to negate --WWeerrrroorr for specific



gcc-4.74                    2014-06-12                         48





GCC(1)                         GNU                         GCC(1)


           warnings, for example --WWnnoo--eerrrroorr==sswwiittcchh makes --WWsswwiittcchh
           warnings not be errors, even when --WWeerrrroorr is in
           effect.

           The warning message for each controllable warning
           includes the option that controls the warning.  That
           option can then be used with --WWeerrrroorr== and --WWnnoo--eerrrroorr==
           as described above.  (Printing of the option in the
           warning message can be disabled using the
           --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn flag.)

           Note that specifying --WWeerrrroorr==_f_o_o automatically implies
           --WW_f_o_o.  However, --WWnnoo--eerrrroorr==_f_o_o does not imply
           anything.

       --WWffaattaall--eerrrroorrss
           This option causes the compiler to abort compilation
           on the first error occurred rather than trying to keep
           going and printing further error messages.

       You can request many specific warnings with options
       beginning --WW, for example --WWiimmpplliicciitt to request warnings
       on implicit declarations.  Each of these specific warning
       options also has a negative form beginning --WWnnoo-- to turn
       off warnings; for example, --WWnnoo--iimmpplliicciitt.  This manual
       lists only one of the two forms, whichever is not the
       default.  For further, language-specific options also
       refer to CC++++ DDiiaalleecctt OOppttiioonnss and OObbjjeeccttiivvee--CC aanndd
       OObbjjeeccttiivvee--CC++++ DDiiaalleecctt OOppttiioonnss.

       When an unrecognized warning option is requested (e.g.,
       --WWuunnkknnoowwnn--wwaarrnniinngg), GCC will emit a diagnostic stating
       that the option is not recognized.  However, if the --WWnnoo--
       form is used, the behavior is slightly different: No
       diagnostic will be produced for --WWnnoo--uunnkknnoowwnn--wwaarrnniinngg
       unless other diagnostics are being produced.  This allows
       the use of new --WWnnoo-- options with old compilers, but if
       something goes wrong, the compiler will warn that an
       unrecognized option was used.

       --ppeeddaannttiicc
           Issue all the warnings demanded by strict ISO C and
           ISO C++; reject all programs that use forbidden
           extensions, and some other programs that do not follow
           ISO C and ISO C++.  For ISO C, follows the version of
           the ISO C standard specified by any --ssttdd option used.

           Valid ISO C and ISO C++ programs should compile
           properly with or without this option (though a rare
           few will require --aannssii or a --ssttdd option specifying the
           required version of ISO C).  However, without this
           option, certain GNU extensions and traditional C and
           C++ features are supported as well.  With this option,
           they are rejected.



gcc-4.74                    2014-06-12                         49





GCC(1)                         GNU                         GCC(1)


           --ppeeddaannttiicc does not cause warning messages for use of
           the alternate keywords whose names begin and end with
           ____.  Pedantic warnings are also disabled in the
           expression that follows "__extension__".  However,
           only system header files should use these escape
           routes; application programs should avoid them.

           Some users try to use --ppeeddaannttiicc to check programs for
           strict ISO C conformance.  They soon find that it does
           not do quite what they want: it finds some non-ISO
           practices, but not all---only those for which ISO C
           _r_e_q_u_i_r_e_s a diagnostic, and some others for which
           diagnostics have been added.

           A feature to report any failure to conform to ISO C
           might be useful in some instances, but would require
           considerable additional work and would be quite
           different from --ppeeddaannttiicc.  We don't have plans to
           support such a feature in the near future.

           Where the standard specified with --ssttdd represents a
           GNU extended dialect of C, such as ggnnuu9900 or ggnnuu9999,
           there is a corresponding _b_a_s_e _s_t_a_n_d_a_r_d, the version of
           ISO C on which the GNU extended dialect is based.
           Warnings from --ppeeddaannttiicc are given where they are
           required by the base standard.  (It would not make
           sense for such warnings to be given only for features
           not in the specified GNU C dialect, since by
           definition the GNU dialects of C include all features
           the compiler supports with the given option, and there
           would be nothing to warn about.)

       --ppeeddaannttiicc--eerrrroorrss
           Like --ppeeddaannttiicc, except that errors are produced rather
           than warnings.

       --WWaallll
           This enables all the warnings about constructions that
           some users consider questionable, and that are easy to
           avoid (or modify to prevent the warning), even in
           conjunction with macros.  This also enables some
           language-specific warnings described in CC++++ DDiiaalleecctt
           OOppttiioonnss and OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleecctt
           OOppttiioonnss.

           --WWaallll turns on the following warning flags:

           --WWaaddddrreessss --WWaarrrraayy--bboouunnddss (only with --OO22)
           --WWcc++++1111--ccoommppaatt --WWcchhaarr--ssuubbssccrriippttss --WWeennuumm--ccoommppaarree (in
           C/Objc; this is on by default in C++) --WWiimmpplliicciitt--iinntt
           (C and Objective-C only)
           --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn (C and Objective-C
           only) --WWccoommmmeenntt --WWffoorrmmaatt --WWmmaaiinn (only for C/ObjC and
           unless --ffffrreeeessttaannddiinngg) --WWmmaayybbee--uunniinniittiiaalliizzeedd



gcc-4.74                    2014-06-12                         50





GCC(1)                         GNU                         GCC(1)


           --WWmmiissssiinngg--bbrraacceess --WWnnoonnnnuullll --WWppaarreenntthheesseess
           --WWppooiinntteerr--ssiiggnn --WWrreeoorrddeerr --WWrreettuurrnn--ttyyppee
           --WWsseeqquueennccee--ppooiinntt --WWssiiggnn--ccoommppaarree (only in C++)
           --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--oovveerrffllooww==11 --WWsswwiittcchh
           --WWttrriiggrraapphhss --WWuunniinniittiiaalliizzeedd --WWuunnkknnoowwnn--pprraaggmmaass
           --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell --WWuunnuusseedd--vvaalluuee
           --WWuunnuusseedd--vvaarriiaabbllee --WWvvoollaattiillee--rreeggiisstteerr--vvaarr

           Note that some warning flags are not implied by --WWaallll.
           Some of them warn about constructions that users
           generally do not consider questionable, but which
           occasionally you might wish to check for; others warn
           about constructions that are necessary or hard to
           avoid in some cases, and there is no simple way to
           modify the code to suppress the warning. Some of them
           are enabled by --WWeexxttrraa but many of them must be
           enabled individually.

       --WWeexxttrraa
           This enables some extra warning flags that are not
           enabled by --WWaallll. (This option used to be called --WW.
           The older name is still supported, but the newer name
           is more descriptive.)

           --WWcclloobbbbeerreedd --WWeemmppttyy--bbooddyy --WWiiggnnoorreedd--qquuaalliiffiieerrss
           --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee
           (C only) --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C only)
           --WWoovveerrrriiddee--iinniitt --WWssiiggnn--ccoommppaarree --WWttyyppee--lliimmiittss
           --WWuunniinniittiiaalliizzeedd --WWuunnuusseedd--ppaarraammeetteerr (only with --WWuunnuusseedd
           or --WWaallll) --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr (only with
           --WWuunnuusseedd or --WWaallll)

           The option --WWeexxttrraa also prints warning messages for
           the following cases:

           *   A pointer is compared against integer zero with <<,
               <<==, >>, or >>==.

           *   (C++ only) An enumerator and a non-enumerator both
               appear in a conditional expression.

           *   (C++ only) Ambiguous virtual bases.

           *   (C++ only) Subscripting an array that has been
               declared rreeggiisstteerr.

           *   (C++ only) Taking the address of a variable that
               has been declared rreeggiisstteerr.

           *   (C++ only) A base class is not initialized in a
               derived class' copy constructor.

       --WWcchhaarr--ssuubbssccrriippttss
           Warn if an array subscript has type "char".  This is a



gcc-4.74                    2014-06-12                         51





GCC(1)                         GNU                         GCC(1)


           common cause of error, as programmers often forget
           that this type is signed on some machines.  This
           warning is enabled by --WWaallll.

       --WWccoommmmeenntt
           Warn whenever a comment-start sequence //** appears in a
           //** comment, or whenever a Backslash-Newline appears in
           a //// comment.  This warning is enabled by --WWaallll.

       --WWnnoo--ccoovveerraaggee--mmiissmmaattcchh
           Warn if feedback profiles do not match when using the
           --ffpprrooffiillee--uussee option.  If a source file was changed
           between --ffpprrooffiillee--ggeenn and --ffpprrooffiillee--uussee, the files
           with the profile feedback can fail to match the source
           file and GCC cannot use the profile feedback
           information.  By default, this warning is enabled and
           is treated as an error.  --WWnnoo--ccoovveerraaggee--mmiissmmaattcchh can be
           used to disable the warning or
           --WWnnoo--eerrrroorr==ccoovveerraaggee--mmiissmmaattcchh can be used to disable
           the error.  Disabling the error for this warning can
           result in poorly optimized code and is useful only in
           the case of very minor changes such as bug fixes to an
           existing code-base.  Completely disabling the warning
           is not recommended.

       --WWnnoo--ccpppp
           (C, Objective-C, C++, Objective-C++ and Fortran only)

           Suppress warning messages emitted by "#warning"
           directives.

       --WWddoouubbllee--pprroommoottiioonn (C, C++, Objective-C and Objective-C++
       only)
           Give a warning when a value of type "float" is
           implicitly promoted to "double".  CPUs with a 32-bit
           "single-precision" floating-point unit implement
           "float" in hardware, but emulate "double" in software.
           On such a machine, doing computations using "double"
           values is much more expensive because of the overhead
           required for software emulation.

           It is easy to accidentally do computations with
           "double" because floating-point literals are
           implicitly of type "double".  For example, in:

                   float area(float radius)
                   {
                      return 3.14159 * radius * radius;
                   }

           the compiler will perform the entire computation with
           "double" because the floating-point literal is a
           "double".




gcc-4.74                    2014-06-12                         52





GCC(1)                         GNU                         GCC(1)


       --WWffoorrmmaatt
           Check calls to "printf" and "scanf", etc., to make
           sure that the arguments supplied have types
           appropriate to the format string specified, and that
           the conversions specified in the format string make
           sense.  This includes standard functions, and others
           specified by format attributes, in the "printf",
           "scanf", "strftime" and "strfmon" (an X/Open
           extension, not in the C standard) families (or other
           target-specific families).  Which functions are
           checked without format attributes having been
           specified depends on the standard version selected,
           and such checks of functions without the attribute
           specified are disabled by --ffffrreeeessttaannddiinngg or
           --ffnnoo--bbuuiillttiinn.

           The formats are checked against the format features
           supported by GNU libc version 2.2.  These include all
           ISO C90 and C99 features, as well as features from the
           Single Unix Specification and some BSD and GNU
           extensions.  Other library implementations may not
           support all these features; GCC does not support
           warning about features that go beyond a particular
           library's limitations.  However, if --ppeeddaannttiicc is used
           with --WWffoorrmmaatt, warnings will be given about format
           features not in the selected standard version (but not
           for "strfmon" formats, since those are not in any
           version of the C standard).

           Since --WWffoorrmmaatt also checks for null format arguments
           for several functions, --WWffoorrmmaatt also implies
           --WWnnoonnnnuullll.

           --WWffoorrmmaatt is included in --WWaallll.  For more control over
           some aspects of format checking, the options
           --WWffoorrmmaatt--yy22kk, --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss,
           --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh, --WWffoorrmmaatt--nnoonnlliitteerraall,
           --WWffoorrmmaatt--sseeccuurriittyy, and --WWffoorrmmaatt==22 are available, but
           are not included in --WWaallll.

       --WWffoorrmmaatt--yy22kk
           If --WWffoorrmmaatt is specified, also warn about "strftime"
           formats that may yield only a two-digit year.

       --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull
           If --WWffoorrmmaatt is specified, do not warn about format
           strings that contain NUL bytes.

       --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
           If --WWffoorrmmaatt is specified, do not warn about excess
           arguments to a "printf" or "scanf" format function.
           The C standard specifies that such arguments are
           ignored.




gcc-4.74                    2014-06-12                         53





GCC(1)                         GNU                         GCC(1)


           Where the unused arguments lie between used arguments
           that are specified with $$ operand number
           specifications, normally warnings are still given,
           since the implementation could not know what type to
           pass to "va_arg" to skip the unused arguments.
           However, in the case of "scanf" formats, this option
           will suppress the warning if the unused arguments are
           all pointers, since the Single Unix Specification says
           that such unused arguments are allowed.

       --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh
           If --WWffoorrmmaatt is specified, do not warn about zero-
           length formats.  The C standard specifies that zero-
           length formats are allowed.

       --WWffoorrmmaatt--nnoonnlliitteerraall
           If --WWffoorrmmaatt is specified, also warn if the format
           string is not a string literal and so cannot be
           checked, unless the format function takes its format
           arguments as a "va_list".

       --WWffoorrmmaatt--sseeccuurriittyy
           If --WWffoorrmmaatt is specified, also warn about uses of
           format functions that represent possible security
           problems.  At present, this warns about calls to
           "printf" and "scanf" functions where the format string
           is not a string literal and there are no format
           arguments, as in "printf (foo);".  This may be a
           security hole if the format string came from untrusted
           input and contains %%nn.  (This is currently a subset of
           what --WWffoorrmmaatt--nnoonnlliitteerraall warns about, but in future
           warnings may be added to --WWffoorrmmaatt--sseeccuurriittyy that are
           not included in --WWffoorrmmaatt--nnoonnlliitteerraall.)

       --WWffoorrmmaatt==22
           Enable --WWffoorrmmaatt plus format checks not included in
           --WWffoorrmmaatt.  Currently equivalent to --WWffoorrmmaatt
           --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuurriittyy --WWffoorrmmaatt--yy22kk.

       --WWnnoonnnnuullll
           Warn about passing a null pointer for arguments marked
           as requiring a non-null value by the "nonnull"
           function attribute.

           --WWnnoonnnnuullll is included in --WWaallll and --WWffoorrmmaatt.  It can
           be disabled with the --WWnnoo--nnoonnnnuullll option.

       --WWiinniitt--sseellff (C, C++, Objective-C and Objective-C++ only)
           Warn about uninitialized variables that are
           initialized with themselves.  Note this option can
           only be used with the --WWuunniinniittiiaalliizzeedd option.

           For example, GCC will warn about "i" being
           uninitialized in the following snippet only when



gcc-4.74                    2014-06-12                         54





GCC(1)                         GNU                         GCC(1)


           --WWiinniitt--sseellff has been specified:

                   int f()
                   {
                     int i = i;
                     return i;
                   }

       --WWiimmpplliicciitt--iinntt (C and Objective-C only)
           Warn when a declaration does not specify a type.  This
           warning is enabled by --WWaallll.

       --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn (C and Objective-C only)
           Give a warning whenever a function is used before
           being declared. In C99 mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999),
           this warning is enabled by default and it is made into
           an error by --ppeeddaannttiicc--eerrrroorrss. This warning is also
           enabled by --WWaallll.

       --WWiimmpplliicciitt (C and Objective-C only)
           Same as --WWiimmpplliicciitt--iinntt and
           --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn.  This warning is
           enabled by --WWaallll.

       --WWiiggnnoorreedd--qquuaalliiffiieerrss (C and C++ only)
           Warn if the return type of a function has a type
           qualifier such as "const".  For ISO C such a type
           qualifier has no effect, since the value returned by a
           function is not an lvalue.  For C++, the warning is
           only emitted for scalar types or "void".  ISO C
           prohibits qualified "void" return types on function
           definitions, so such return types always receive a
           warning even without this option.

           This warning is also enabled by --WWeexxttrraa.

       --WWmmaaiinn
           Warn if the type of mmaaiinn is suspicious.  mmaaiinn should
           be a function with external linkage, returning int,
           taking either zero arguments, two, or three arguments
           of appropriate types.  This warning is enabled by
           default in C++ and is enabled by either --WWaallll or
           --ppeeddaannttiicc.

       --WWmmiissssiinngg--bbrraacceess
           Warn if an aggregate or union initializer is not fully
           bracketed.  In the following example, the initializer
           for aa is not fully bracketed, but that for bb is fully
           bracketed.

                   int a[2][2] = { 0, 1, 2, 3 };
                   int b[2][2] = { { 0, 1 }, { 2, 3 } };

           This warning is enabled by --WWaallll.



gcc-4.74                    2014-06-12                         55





GCC(1)                         GNU                         GCC(1)


       --WWmmiissssiinngg--iinncclluuddee--ddiirrss (C, C++, Objective-C and
       Objective-C++ only)
           Warn if a user-supplied include directory does not
           exist.

       --WWppaarreenntthheesseess
           Warn if parentheses are omitted in certain contexts,
           such as when there is an assignment in a context where
           a truth value is expected, or when operators are
           nested whose precedence people often get confused
           about.

           Also warn if a comparison like xx<<==yy<<==zz appears; this
           is equivalent to ((xx<<==yy ?? 11 :: 00)) <<== zz, which is a
           different interpretation from that of ordinary
           mathematical notation.

           Also warn about constructions where there may be
           confusion to which "if" statement an "else" branch
           belongs.  Here is an example of such a case:

                   {
                     if (a)
                       if (b)
                         foo ();
                     else
                       bar ();
                   }

           In C/C++, every "else" branch belongs to the innermost
           possible "if" statement, which in this example is "if
           (b)".  This is often not what the programmer expected,
           as illustrated in the above example by indentation the
           programmer chose.  When there is the potential for
           this confusion, GCC will issue a warning when this
           flag is specified.  To eliminate the warning, add
           explicit braces around the innermost "if" statement so
           there is no way the "else" could belong to the
           enclosing "if".  The resulting code would look like
           this:

                   {
                     if (a)
                       {
                         if (b)
                           foo ();
                         else
                           bar ();
                       }
                   }

           Also warn for dangerous uses of the ?: with omitted
           middle operand GNU extension. When the condition in
           the ?: operator is a boolean expression the omitted



gcc-4.74                    2014-06-12                         56





GCC(1)                         GNU                         GCC(1)


           value will be always 1. Often the user expects it to
           be a value computed inside the conditional expression
           instead.

           This warning is enabled by --WWaallll.

       --WWsseeqquueennccee--ppooiinntt
           Warn about code that may have undefined semantics
           because of violations of sequence point rules in the C
           and C++ standards.

           The C and C++ standards defines the order in which
           expressions in a C/C++ program are evaluated in terms
           of _s_e_q_u_e_n_c_e _p_o_i_n_t_s, which represent a partial ordering
           between the execution of parts of the program: those
           executed before the sequence point, and those executed
           after it.  These occur after the evaluation of a full
           expression (one which is not part of a larger
           expression), after the evaluation of the first operand
           of a "&&", "||", "? :" or "," (comma) operator, before
           a function is called (but after the evaluation of its
           arguments and the expression denoting the called
           function), and in certain other places.  Other than as
           expressed by the sequence point rules, the order of
           evaluation of subexpressions of an expression is not
           specified.  All these rules describe only a partial
           order rather than a total order, since, for example,
           if two functions are called within one expression with
           no sequence point between them, the order in which the
           functions are called is not specified.  However, the
           standards committee have ruled that function calls do
           not overlap.

           It is not specified when between sequence points
           modifications to the values of objects take effect.
           Programs whose behavior depends on this have undefined
           behavior; the C and C++ standards specify that
           "Between the previous and next sequence point an
           object shall have its stored value modified at most
           once by the evaluation of an expression.  Furthermore,
           the prior value shall be read only to determine the
           value to be stored.".  If a program breaks these
           rules, the results on any particular implementation
           are entirely unpredictable.

           Examples of code with undefined behavior are "a =
           a++;", "a[n] = b[n++]" and "a[i++] = i;".  Some more
           complicated cases are not diagnosed by this option,
           and it may give an occasional false positive result,
           but in general it has been found fairly effective at
           detecting this sort of problem in programs.

           The standard is worded confusingly, therefore there is
           some debate over the precise meaning of the sequence



gcc-4.74                    2014-06-12                         57





GCC(1)                         GNU                         GCC(1)


           point rules in subtle cases.  Links to discussions of
           the problem, including proposed formal definitions,
           may be found on the GCC readings page, at
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//rreeaaddiinnggss..hhttmmll>.

           This warning is enabled by --WWaallll for C and C++.

       --WWrreettuurrnn--ttyyppee
           Warn whenever a function is defined with a return-type
           that defaults to "int".  Also warn about any "return"
           statement with no return-value in a function whose
           return-type is not "void" (falling off the end of the
           function body is considered returning without a
           value), and about a "return" statement with an
           expression in a function whose return-type is "void".

           For C++, a function without return type always
           produces a diagnostic message, even when
           --WWnnoo--rreettuurrnn--ttyyppee is specified.  The only exceptions
           are mmaaiinn and functions defined in system headers.

           This warning is enabled by --WWaallll.

       --WWsswwiittcchh
           Warn whenever a "switch" statement has an index of
           enumerated type and lacks a "case" for one or more of
           the named codes of that enumeration.  (The presence of
           a "default" label prevents this warning.)  "case"
           labels outside the enumeration range also provoke
           warnings when this option is used (even if there is a
           "default" label).  This warning is enabled by --WWaallll.

       --WWsswwiittcchh--ddeeffaauulltt
           Warn whenever a "switch" statement does not have a
           "default" case.

       --WWsswwiittcchh--eennuumm
           Warn whenever a "switch" statement has an index of
           enumerated type and lacks a "case" for one or more of
           the named codes of that enumeration.  "case" labels
           outside the enumeration range also provoke warnings
           when this option is used.  The only difference between
           --WWsswwiittcchh and this option is that this option gives a
           warning about an omitted enumeration code even if
           there is a "default" label.

       --WWssyynncc--nnaanndd (C and C++ only)
           Warn when "__sync_fetch_and_nand" and
           "__sync_nand_and_fetch" built-in functions are used.
           These functions changed semantics in GCC 4.4.

       --WWttrriiggrraapphhss
           Warn if any trigraphs are encountered that might
           change the meaning of the program (trigraphs within



gcc-4.74                    2014-06-12                         58





GCC(1)                         GNU                         GCC(1)


           comments are not warned about).  This warning is
           enabled by --WWaallll.

       --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr
           Warn whenever a function parameter is assigned to, but
           otherwise unused (aside from its declaration).

           To suppress this warning use the uunnuusseedd attribute.

           This warning is also enabled by --WWuunnuusseedd together with
           --WWeexxttrraa.

       --WWuunnuusseedd--bbuutt--sseett--vvaarriiaabbllee
           Warn whenever a local variable is assigned to, but
           otherwise unused (aside from its declaration).  This
           warning is enabled by --WWaallll.

           To suppress this warning use the uunnuusseedd attribute.

           This warning is also enabled by --WWuunnuusseedd, which is
           enabled by --WWaallll.

       --WWuunnuusseedd--ffuunnccttiioonn
           Warn whenever a static function is declared but not
           defined or a non-inline static function is unused.
           This warning is enabled by --WWaallll.

       --WWuunnuusseedd--llaabbeell
           Warn whenever a label is declared but not used.  This
           warning is enabled by --WWaallll.

           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--llooccaall--ttyyppeeddeeffss (C, Objective-C, C++ and
       Objective-C++ only)
           Warn when a typedef locally defined in a function is
           not used.

       --WWuunnuusseedd--ppaarraammeetteerr
           Warn whenever a function parameter is unused aside
           from its declaration.

           To suppress this warning use the uunnuusseedd attribute.

       --WWnnoo--uunnuusseedd--rreessuulltt
           Do not warn if a caller of a function marked with
           attribute "warn_unused_result" does not use its return
           value. The default is --WWuunnuusseedd--rreessuulltt.

       --WWuunnuusseedd--vvaarriiaabbllee
           Warn whenever a local variable or non-constant static
           variable is unused aside from its declaration.  This
           warning is enabled by --WWaallll.




gcc-4.74                    2014-06-12                         59





GCC(1)                         GNU                         GCC(1)


           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--vvaalluuee
           Warn whenever a statement computes a result that is
           explicitly not used. To suppress this warning cast the
           unused expression to vvooiidd. This includes an
           expression-statement or the left-hand side of a comma
           expression that contains no side effects. For example,
           an expression such as xx[[ii,,jj]] will cause a warning,
           while xx[[((vvooiidd))ii,,jj]] will not.

           This warning is enabled by --WWaallll.

       --WWuunnuusseedd
           All the above --WWuunnuusseedd options combined.

           In order to get a warning about an unused function
           parameter, you must either specify --WWeexxttrraa --WWuunnuusseedd
           (note that --WWaallll implies --WWuunnuusseedd), or separately
           specify --WWuunnuusseedd--ppaarraammeetteerr.

       --WWuunniinniittiiaalliizzeedd
           Warn if an automatic variable is used without first
           being initialized or if a variable may be clobbered by
           a "setjmp" call. In C++, warn if a non-static
           reference or non-static ccoonnsstt member appears in a
           class without constructors.

           If you want to warn about code that uses the
           uninitialized value of the variable in its own
           initializer, use the --WWiinniitt--sseellff option.

           These warnings occur for individual uninitialized or
           clobbered elements of structure, union or array
           variables as well as for variables that are
           uninitialized or clobbered as a whole.  They do not
           occur for variables or elements declared "volatile".
           Because these warnings depend on optimization, the
           exact variables or elements for which there are
           warnings will depend on the precise optimization
           options and version of GCC used.

           Note that there may be no warning about a variable
           that is used only to compute a value that itself is
           never used, because such computations may be deleted
           by data flow analysis before the warnings are printed.

       --WWmmaayybbee--uunniinniittiiaalliizzeedd
           For an automatic variable, if there exists a path from
           the function entry to a use of the variable that is
           initialized, but there exist some other paths the
           variable is not initialized, the compiler will emit a
           warning if it can not prove the uninitialized paths do
           not happen at run time. These warnings are made



gcc-4.74                    2014-06-12                         60





GCC(1)                         GNU                         GCC(1)


           optional because GCC is not smart enough to see all
           the reasons why the code might be correct despite
           appearing to have an error.  Here is one example of
           how this can happen:

                   {
                     int x;
                     switch (y)
                       {
                       case 1: x = 1;
                         break;
                       case 2: x = 4;
                         break;
                       case 3: x = 5;
                       }
                     foo (x);
                   }

           If the value of "y" is always 1, 2 or 3, then "x" is
           always initialized, but GCC doesn't know this. To
           suppress the warning, the user needs to provide a
           default case with _a_s_s_e_r_t(0) or similar code.

           This option also warns when a non-volatile automatic
           variable might be changed by a call to "longjmp".
           These warnings as well are possible only in optimizing
           compilation.

           The compiler sees only the calls to "setjmp".  It
           cannot know where "longjmp" will be called; in fact, a
           signal handler could call it at any point in the code.
           As a result, you may get a warning even when there is
           in fact no problem because "longjmp" cannot in fact be
           called at the place that would cause a problem.

           Some spurious warnings can be avoided if you declare
           all the functions you use that never return as
           "noreturn".

           This warning is enabled by --WWaallll or --WWeexxttrraa.

       --WWuunnkknnoowwnn--pprraaggmmaass
           Warn when a "#pragma" directive is encountered that is
           not understood by GCC.  If this command-line option is
           used, warnings will even be issued for unknown pragmas
           in system header files.  This is not the case if the
           warnings were only enabled by the --WWaallll command-line
           option.

       --WWnnoo--pprraaggmmaass
           Do not warn about misuses of pragmas, such as
           incorrect parameters, invalid syntax, or conflicts
           between pragmas.  See also --WWuunnkknnoowwnn--pprraaggmmaass.




gcc-4.74                    2014-06-12                         61





GCC(1)                         GNU                         GCC(1)


       --WWssttrriicctt--aalliiaassiinngg
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is
           active.  It warns about code that might break the
           strict aliasing rules that the compiler is using for
           optimization.  The warning does not catch all cases,
           but does attempt to catch the more common pitfalls.
           It is included in --WWaallll.  It is equivalent to
           --WWssttrriicctt--aalliiaassiinngg==33

       --WWssttrriicctt--aalliiaassiinngg==nn
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is
           active.  It warns about code that might break the
           strict aliasing rules that the compiler is using for
           optimization.  Higher levels correspond to higher
           accuracy (fewer false positives).  Higher levels also
           correspond to more effort, similar to the way -O
           works.  --WWssttrriicctt--aalliiaassiinngg is equivalent to
           --WWssttrriicctt--aalliiaassiinngg==nn, with n=3.

           Level 1: Most aggressive, quick, least accurate.
           Possibly useful when higher levels do not warn but
           -fstrict-aliasing still breaks the code, as it has
           very few false negatives.  However, it has many false
           positives.  Warns for all pointer conversions between
           possibly incompatible types, even if never
           dereferenced.  Runs in the front end only.

           Level 2: Aggressive, quick, not too precise.  May
           still have many false positives (not as many as level
           1 though), and few false negatives (but possibly more
           than level 1).  Unlike level 1, it only warns when an
           address is taken.  Warns about incomplete types.  Runs
           in the front end only.

           Level 3 (default for --WWssttrriicctt--aalliiaassiinngg): Should have
           very few false positives and few false negatives.
           Slightly slower than levels 1 or 2 when optimization
           is enabled.  Takes care of the common pun+dereference
           pattern in the front end: "*(int*)&some_float".  If
           optimization is enabled, it also runs in the back end,
           where it deals with multiple statement cases using
           flow-sensitive points-to information.  Only warns when
           the converted pointer is dereferenced.  Does not warn
           about incomplete types.

       --WWssttrriicctt--oovveerrffllooww
       --WWssttrriicctt--oovveerrffllooww==_n
           This option is only active when --ffssttrriicctt--oovveerrffllooww is
           active.  It warns about cases where the compiler
           optimizes based on the assumption that signed overflow
           does not occur.  Note that it does not warn about all
           cases where the code might overflow: it only warns
           about cases where the compiler implements some
           optimization.  Thus this warning depends on the



gcc-4.74                    2014-06-12                         62





GCC(1)                         GNU                         GCC(1)


           optimization level.

           An optimization that assumes that signed overflow does
           not occur is perfectly safe if the values of the
           variables involved are such that overflow never does,
           in fact, occur.  Therefore this warning can easily
           give a false positive: a warning about code that is
           not actually a problem.  To help focus on important
           issues, several warning levels are defined.  No
           warnings are issued for the use of undefined signed
           overflow when estimating how many iterations a loop
           will require, in particular when determining whether a
           loop will be executed at all.

           --WWssttrriicctt--oovveerrffllooww==11
               Warn about cases that are both questionable and
               easy to avoid.  For example: "x + 1 > x"; with
               --ffssttrriicctt--oovveerrffllooww, the compiler will simplify this
               to 1.  This level of --WWssttrriicctt--oovveerrffllooww is enabled
               by --WWaallll; higher levels are not, and must be
               explicitly requested.

           --WWssttrriicctt--oovveerrffllooww==22
               Also warn about other cases where a comparison is
               simplified to a constant.  For example: "abs (x)
               >= 0".  This can only be simplified when
               --ffssttrriicctt--oovveerrffllooww is in effect, because "abs
               (INT_MIN)" overflows to "INT_MIN", which is less
               than zero.  --WWssttrriicctt--oovveerrffllooww (with no level) is
               the same as --WWssttrriicctt--oovveerrffllooww==22.

           --WWssttrriicctt--oovveerrffllooww==33
               Also warn about other cases where a comparison is
               simplified.  For example: "x + 1 > 1" will be
               simplified to "x > 0".

           --WWssttrriicctt--oovveerrffllooww==44
               Also warn about other simplifications not covered
               by the above cases.  For example: "(x * 10) / 5"
               will be simplified to "x * 2".

           --WWssttrriicctt--oovveerrffllooww==55
               Also warn about cases where the compiler reduces
               the magnitude of a constant involved in a
               comparison.  For example: "x + 2 > y" will be
               simplified to "x + 1 >= y".  This is reported only
               at the highest warning level because this
               simplification applies to many comparisons, so
               this warning level will give a very large number
               of false positives.

       --WWssuuggggeesstt--aattttrriibbuuttee==[ppuurree|ccoonnsstt|nnoorreettuurrnn]
           Warn for cases where adding an attribute may be
           beneficial. The attributes currently supported are



gcc-4.74                    2014-06-12                         63





GCC(1)                         GNU                         GCC(1)


           listed below.

           --WWssuuggggeesstt--aattttrriibbuuttee==ppuurree
           --WWssuuggggeesstt--aattttrriibbuuttee==ccoonnsstt
           --WWssuuggggeesstt--aattttrriibbuuttee==nnoorreettuurrnn
               Warn about functions that might be candidates for
               attributes "pure", "const" or "noreturn".  The
               compiler only warns for functions visible in other
               compilation units or (in the case of "pure" and
               "const") if it cannot prove that the function
               returns normally. A function returns normally if
               it doesn't contain an infinite loop nor returns
               abnormally by throwing, calling "abort()" or
               trapping.  This analysis requires option
               --ffiippaa--ppuurree--ccoonnsstt, which is enabled by default at
               --OO and higher.  Higher optimization levels improve
               the accuracy of the analysis.

       --WWaarrrraayy--bboouunnddss
           This option is only active when --ffttrreeee--vvrrpp is active
           (default for --OO22 and above). It warns about subscripts
           to arrays that are always out of bounds. This warning
           is enabled by --WWaallll.

       --WWnnoo--ddiivv--bbyy--zzeerroo
           Do not warn about compile-time integer division by
           zero.  Floating-point division by zero is not warned
           about, as it can be a legitimate way of obtaining
           infinities and NaNs.

       --WWssyysstteemm--hheeaaddeerrss
           Print warning messages for constructs found in system
           header files.  Warnings from system headers are
           normally suppressed, on the assumption that they
           usually do not indicate real problems and would only
           make the compiler output harder to read.  Using this
           command-line option tells GCC to emit warnings from
           system headers as if they occurred in user code.
           However, note that using --WWaallll in conjunction with
           this option will _n_o_t warn about unknown pragmas in
           system headers---for that, --WWuunnkknnoowwnn--pprraaggmmaass must also
           be used.

       --WWttrraammppoolliinneess
            Warn about trampolines generated for pointers to nested functions.

            A trampoline is a small piece of data or code that is created at run
            time on the stack when the address of a nested function is taken, and
            is used to call the nested function indirectly.  For some targets, it
            is made up of data only and thus requires no special treatment.  But,
            for most targets, it is made up of code and thus requires the stack
            to be made executable in order for the program to work properly.





gcc-4.74                    2014-06-12                         64





GCC(1)                         GNU                         GCC(1)


       --WWffllooaatt--eeqquuaall
           Warn if floating-point values are used in equality
           comparisons.

           The idea behind this is that sometimes it is
           convenient (for the programmer) to consider floating-
           point values as approximations to infinitely precise
           real numbers.  If you are doing this, then you need to
           compute (by analyzing the code, or in some other way)
           the maximum or likely maximum error that the
           computation introduces, and allow for it when
           performing comparisons (and when producing output, but
           that's a different problem).  In particular, instead
           of testing for equality, you would check to see
           whether the two values have ranges that overlap; and
           this is done with the relational operators, so
           equality comparisons are probably mistaken.

       --WWttrraaddiittiioonnaall (C and Objective-C only)
           Warn about certain constructs that behave differently
           in traditional and ISO C.  Also warn about ISO C
           constructs that have no traditional C equivalent,
           and/or problematic constructs that should be avoided.

           *   Macro parameters that appear within string
               literals in the macro body.  In traditional C
               macro replacement takes place within string
               literals, but does not in ISO C.

           *   In traditional C, some preprocessor directives did
               not exist.  Traditional preprocessors would only
               consider a line to be a directive if the ##
               appeared in column 1 on the line.  Therefore
               --WWttrraaddiittiioonnaall warns about directives that
               traditional C understands but would ignore because
               the ## does not appear as the first character on
               the line.  It also suggests you hide directives
               like ##pprraaggmmaa not understood by traditional C by
               indenting them.  Some traditional implementations
               would not recognize ##eelliiff, so it suggests avoiding
               it altogether.

           *   A function-like macro that appears without
               arguments.

           *   The unary plus operator.

           *   The UU integer constant suffix, or the FF or LL
               floating-point constant suffixes.  (Traditional C
               does support the LL suffix on integer constants.)
               Note, these suffixes appear in macros defined in
               the system headers of most modern systems, e.g.
               the __MMIINN/__MMAAXX macros in "<limits.h>".  Use of
               these macros in user code might normally lead to



gcc-4.74                    2014-06-12                         65





GCC(1)                         GNU                         GCC(1)


               spurious warnings, however GCC's integrated
               preprocessor has enough context to avoid warning
               in these cases.

           *   A function declared external in one block and then
               used after the end of the block.

           *   A "switch" statement has an operand of type
               "long".

           *   A non-"static" function declaration follows a
               "static" one.  This construct is not accepted by
               some traditional C compilers.

           *   The ISO type of an integer constant has a
               different width or signedness from its traditional
               type.  This warning is only issued if the base of
               the constant is ten.  I.e. hexadecimal or octal
               values, which typically represent bit patterns,
               are not warned about.

           *   Usage of ISO string concatenation is detected.

           *   Initialization of automatic aggregates.

           *   Identifier conflicts with labels.  Traditional C
               lacks a separate namespace for labels.

           *   Initialization of unions.  If the initializer is
               zero, the warning is omitted.  This is done under
               the assumption that the zero initializer in user
               code appears conditioned on e.g. "__STDC__" to
               avoid missing initializer warnings and relies on
               default initialization to zero in the traditional
               C case.

           *   Conversions by prototypes between
               fixed/floating-point values and vice versa.  The
               absence of these prototypes when compiling with
               traditional C would cause serious problems.  This
               is a subset of the possible conversion warnings,
               for the full set use --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn.

           *   Use of ISO C style function definitions.  This
               warning intentionally is _n_o_t issued for prototype
               declarations or variadic functions because these
               ISO C features will appear in your code when using
               libiberty's traditional C compatibility macros,
               "PARAMS" and "VPARAMS".  This warning is also
               bypassed for nested functions because that feature
               is already a GCC extension and thus not relevant
               to traditional C compatibility.





gcc-4.74                    2014-06-12                         66





GCC(1)                         GNU                         GCC(1)


       --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn (C and Objective-C only)
           Warn if a prototype causes a type conversion that is
           different from what would happen to the same argument
           in the absence of a prototype.  This includes
           conversions of fixed point to floating and vice versa,
           and conversions changing the width or signedness of a
           fixed-point argument except when the same as the
           default promotion.

       --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt (C and Objective-C only)
           Warn when a declaration is found after a statement in
           a block.  This construct, known from C++, was
           introduced with ISO C99 and is by default allowed in
           GCC.  It is not supported by ISO C90 and was not
           supported by GCC versions before GCC 3.0.

       --WWuunnddeeff
           Warn if an undefined identifier is evaluated in an ##iiff
           directive.

       --WWnnoo--eennddiiff--llaabbeellss
           Do not warn whenever an ##eellssee or an ##eennddiiff are
           followed by text.

       --WWsshhaaddooww
           Warn whenever a local variable or type declaration
           shadows another variable, parameter, type, or class
           member (in C++), or whenever a built-in function is
           shadowed. Note that in C++, the compiler will not warn
           if a local variable shadows a struct/class/enum, but
           will warn if it shadows an explicit typedef.

       --WWllaarrggeerr--tthhaann==_l_e_n
           Warn whenever an object of larger than _l_e_n bytes is
           defined.

       --WWffrraammee--llaarrggeerr--tthhaann==_l_e_n
           Warn if the size of a function frame is larger than
           _l_e_n bytes.  The computation done to determine the
           stack frame size is approximate and not conservative.
           The actual requirements may be somewhat greater than
           _l_e_n even if you do not get a warning.  In addition,
           any space allocated via "alloca", variable-length
           arrays, or related constructs is not included by the
           compiler when determining whether or not to issue a
           warning.

       --WWnnoo--ffrreeee--nnoonnhheeaapp--oobbjjeecctt
           Do not warn when attempting to free an object that was
           not allocated on the heap.

       --WWssttaacckk--uussaaggee==_l_e_n
           Warn if the stack usage of a function might be larger
           than _l_e_n bytes.  The computation done to determine the



gcc-4.74                    2014-06-12                         67





GCC(1)                         GNU                         GCC(1)


           stack usage is conservative.  Any space allocated via
           "alloca", variable-length arrays, or related
           constructs is included by the compiler when
           determining whether or not to issue a warning.

           The message is in keeping with the output of
           --ffssttaacckk--uussaaggee.

           *   If the stack usage is fully static but exceeds the
               specified amount, it's:

                         warning: stack usage is 1120 bytes

           *   If the stack usage is (partly) dynamic but
               bounded, it's:

                         warning: stack usage might be 1648 bytes

           *   If the stack usage is (partly) dynamic and not
               bounded, it's:

                         warning: stack usage might be unbounded

       --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           Warn if the loop cannot be optimized because the
           compiler could not assume anything on the bounds of
           the loop indices.  With --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           warn if the compiler made such assumptions.

       --WWnnoo--ppeeddaannttiicc--mmss--ffoorrmmaatt (MinGW targets only)
           Disables the warnings about non-ISO "printf" / "scanf"
           format width specifiers "I32", "I64", and "I" used on
           Windows targets depending on the MS runtime, when you
           are using the options --WWffoorrmmaatt and --ppeeddaannttiicc without
           gnu-extensions.

       --WWppooiinntteerr--aarriitthh
           Warn about anything that depends on the "size of" a
           function type or of "void".  GNU C assigns these types
           a size of 1, for convenience in calculations with
           "void *" pointers and pointers to functions.  In C++,
           warn also when an arithmetic operation involves
           "NULL".  This warning is also enabled by --ppeeddaannttiicc.

       --WWttyyppee--lliimmiittss
           Warn if a comparison is always true or always false
           due to the limited range of the data type, but do not
           warn for constant expressions.  For example, warn if
           an unsigned variable is compared against zero with <<
           or >>==.  This warning is also enabled by --WWeexxttrraa.

       --WWbbaadd--ffuunnccttiioonn--ccaasstt (C and Objective-C only)
           Warn whenever a function call is cast to a non-
           matching type.  For example, warn if "int malloc()" is



gcc-4.74                    2014-06-12                         68





GCC(1)                         GNU                         GCC(1)


           cast to "anything *".

       --WWcc++++--ccoommppaatt (C and Objective-C only)
           Warn about ISO C constructs that are outside of the
           common subset of ISO C and ISO C++, e.g. request for
           implicit conversion from "void *" to a pointer to
           non-"void" type.

       --WWcc++++1111--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs
           between ISO C++ 1998 and ISO C++ 2011, e.g.,
           identifiers in ISO C++ 1998 that are keywords in ISO
           C++ 2011.  This warning turns on --WWnnaarrrroowwiinngg and is
           enabled by --WWaallll.

       --WWccaasstt--qquuaall
           Warn whenever a pointer is cast so as to remove a type
           qualifier from the target type.  For example, warn if
           a "const char *" is cast to an ordinary "char *".

           Also warn when making a cast that introduces a type
           qualifier in an unsafe way.  For example, casting
           "char **" to "const char **" is unsafe, as in this
           example:

                     /* p is char ** value.  */
                     const char **q = (const char **) p;
                     /* Assignment of readonly string to const char * is OK.  */
                     *q = "string";
                     /* Now char** pointer points to read-only memory.  */
                     **p = 'b';

       --WWccaasstt--aalliiggnn
           Warn whenever a pointer is cast such that the required
           alignment of the target is increased.  For example,
           warn if a "char *" is cast to an "int *" on machines
           where integers can only be accessed at two- or four-
           byte boundaries.

       --WWwwrriittee--ssttrriinnggss
           When compiling C, give string constants the type
           "const char[length]" so that copying the address of
           one into a non-"const" "char *" pointer will get a
           warning.  These warnings will help you find at compile
           time code that can try to write into a string
           constant, but only if you have been very careful about
           using "const" in declarations and prototypes.
           Otherwise, it will just be a nuisance. This is why we
           did not make --WWaallll request these warnings.

           When compiling C++, warn about the deprecated
           conversion from string literals to "char *".  This
           warning is enabled by default for C++ programs.




gcc-4.74                    2014-06-12                         69





GCC(1)                         GNU                         GCC(1)


       --WWcclloobbbbeerreedd
           Warn for variables that might be changed by lloonnggjjmmpp or
           vvffoorrkk.  This warning is also enabled by --WWeexxttrraa.

       --WWccoonnvveerrssiioonn
           Warn for implicit conversions that may alter a value.
           This includes conversions between real and integer,
           like "abs (x)" when "x" is "double"; conversions
           between signed and unsigned, like "unsigned ui = -1";
           and conversions to smaller types, like "sqrtf (M_PI)".
           Do not warn for explicit casts like "abs ((int) x)"
           and "ui = (unsigned) -1", or if the value is not
           changed by the conversion like in "abs (2.0)".
           Warnings about conversions between signed and unsigned
           integers can be disabled by using
           --WWnnoo--ssiiggnn--ccoonnvveerrssiioonn.

           For C++, also warn for confusing overload resolution
           for user-defined conversions; and conversions that
           will never use a type conversion operator: conversions
           to "void", the same type, a base class or a reference
           to them. Warnings about conversions between signed and
           unsigned integers are disabled by default in C++
           unless --WWssiiggnn--ccoonnvveerrssiioonn is explicitly enabled.

       --WWnnoo--ccoonnvveerrssiioonn--nnuullll (C++ and Objective-C++ only)
           Do not warn for conversions between "NULL" and non-
           pointer types. --WWccoonnvveerrssiioonn--nnuullll is enabled by
           default.

       --WWzzeerroo--aass--nnuullll--ppooiinntteerr--ccoonnssttaanntt (C++ and Objective-C++
       only)
           Warn when a literal '0' is used as null pointer
           constant.  This can be useful to facilitate the
           conversion to "nullptr" in C++11.

       --WWeemmppttyy--bbooddyy
           Warn if an empty body occurs in an iiff, eellssee or ddoo
           wwhhiillee statement.  This warning is also enabled by
           --WWeexxttrraa.

       --WWeennuumm--ccoommppaarree
           Warn about a comparison between values of different
           enumerated types.  In C++ enumeral mismatches in
           conditional expressions are also diagnosed and the
           warning is enabled by default.  In C this warning is
           enabled by --WWaallll.

       --WWjjuummpp--mmiisssseess--iinniitt (C, Objective-C only)
           Warn if a "goto" statement or a "switch" statement
           jumps forward across the initialization of a variable,
           or jumps backward to a label after the variable has
           been initialized.  This only warns about variables
           that are initialized when they are declared.  This



gcc-4.74                    2014-06-12                         70





GCC(1)                         GNU                         GCC(1)


           warning is only supported for C and Objective-C; in
           C++ this sort of branch is an error in any case.

           --WWjjuummpp--mmiisssseess--iinniitt is included in --WWcc++++--ccoommppaatt.  It
           can be disabled with the --WWnnoo--jjuummpp--mmiisssseess--iinniitt option.

       --WWssiiggnn--ccoommppaarree
           Warn when a comparison between signed and unsigned
           values could produce an incorrect result when the
           signed value is converted to unsigned.  This warning
           is also enabled by --WWeexxttrraa; to get the other warnings
           of --WWeexxttrraa without this warning, use --WWeexxttrraa
           --WWnnoo--ssiiggnn--ccoommppaarree.

       --WWssiiggnn--ccoonnvveerrssiioonn
           Warn for implicit conversions that may change the sign
           of an integer value, like assigning a signed integer
           expression to an unsigned integer variable. An
           explicit cast silences the warning. In C, this option
           is enabled also by --WWccoonnvveerrssiioonn.

       --WWaaddddrreessss
           Warn about suspicious uses of memory addresses. These
           include using the address of a function in a
           conditional expression, such as "void func(void); if
           (func)", and comparisons against the memory address of
           a string literal, such as "if (x == "abc")".  Such
           uses typically indicate a programmer error: the
           address of a function always evaluates to true, so
           their use in a conditional usually indicate that the
           programmer forgot the parentheses in a function call;
           and comparisons against string literals result in
           unspecified behavior and are not portable in C, so
           they usually indicate that the programmer intended to
           use "strcmp".  This warning is enabled by --WWaallll.

       --WWllooggiiccaall--oopp
           Warn about suspicious uses of logical operators in
           expressions.  This includes using logical operators in
           contexts where a bit-wise operator is likely to be
           expected.

       --WWaaggggrreeggaattee--rreettuurrnn
           Warn if any functions that return structures or unions
           are defined or called.  (In languages where you can
           return an array, this also elicits a warning.)

       --WWnnoo--aattttrriibbuutteess
           Do not warn if an unexpected "__attribute__" is used,
           such as unrecognized attributes, function attributes
           applied to variables, etc.  This will not stop errors
           for incorrect use of supported attributes.





gcc-4.74                    2014-06-12                         71





GCC(1)                         GNU                         GCC(1)


       --WWnnoo--bbuuiillttiinn--mmaaccrroo--rreeddeeffiinneedd
           Do not warn if certain built-in macros are redefined.
           This suppresses warnings for redefinition of
           "__TIMESTAMP__", "__TIME__", "__DATE__", "__FILE__",
           and "__BASE_FILE__".

       --WWssttrriicctt--pprroottoottyyppeess (C and Objective-C only)
           Warn if a function is declared or defined without
           specifying the argument types.  (An old-style function
           definition is permitted without a warning if preceded
           by a declaration that specifies the argument types.)

       --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C and Objective-C only)
           Warn for obsolescent usages, according to the C
           Standard, in a declaration. For example, warn if
           storage-class specifiers like "static" are not the
           first things in a declaration.  This warning is also
           enabled by --WWeexxttrraa.

       --WWoolldd--ssttyyllee--ddeeffiinniittiioonn (C and Objective-C only)
           Warn if an old-style function definition is used.  A
           warning is given even if there is a previous
           prototype.

       --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee (C and Objective-C only)
           A function parameter is declared without a type
           specifier in K&R-style functions:

                   void foo(bar) { }

           This warning is also enabled by --WWeexxttrraa.

       --WWmmiissssiinngg--pprroottoottyyppeess (C and Objective-C only)
           Warn if a global function is defined without a
           previous prototype declaration.  This warning is
           issued even if the definition itself provides a
           prototype.  The aim is to detect global functions that
           are not declared in header files.

       --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           Warn if a global function is defined without a
           previous declaration.  Do so even if the definition
           itself provides a prototype.  Use this option to
           detect global functions that are not declared in
           header files.  In C++, no warnings are issued for
           function templates, or for inline functions, or for
           functions in anonymous namespaces.

       --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           Warn if a structure's initializer has some fields
           missing.  For example, the following code would cause
           such a warning, because "x.h" is implicitly zero:





gcc-4.74                    2014-06-12                         72





GCC(1)                         GNU                         GCC(1)


                   struct s { int f, g, h; };
                   struct s x = { 3, 4 };

           This option does not warn about designated
           initializers, so the following modification would not
           trigger a warning:

                   struct s { int f, g, h; };
                   struct s x = { .f = 3, .g = 4 };

           This warning is included in --WWeexxttrraa.  To get other
           --WWeexxttrraa warnings without this one, use --WWeexxttrraa
           --WWnnoo--mmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss.

       --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
           Warn about function pointers that might be candidates
           for "format" attributes.  Note these are only possible
           candidates, not absolute ones.  GCC will guess that
           function pointers with "format" attributes that are
           used in assignment, initialization, parameter passing
           or return statements should have a corresponding
           "format" attribute in the resulting type.  I.e. the
           left-hand side of the assignment or initialization,
           the type of the parameter variable, or the return type
           of the containing function respectively should also
           have a "format" attribute to avoid the warning.

           GCC will also warn about function definitions that
           might be candidates for "format" attributes.  Again,
           these are only possible candidates.  GCC will guess
           that "format" attributes might be appropriate for any
           function that calls a function like "vprintf" or
           "vscanf", but this might not always be the case, and
           some functions for which "format" attributes are
           appropriate may not be detected.

       --WWnnoo--mmuullttiicchhaarr
           Do not warn if a multicharacter constant (''FFOOOOFF'') is
           used.  Usually they indicate a typo in the user's
           code, as they have implementation-defined values, and
           should not be used in portable code.

       --WWnnoorrmmaalliizzeedd==<<nnoonnee||iidd||nnffcc||nnffkkcc>>
           In ISO C and ISO C++, two identifiers are different if
           they are different sequences of characters.  However,
           sometimes when characters outside the basic ASCII
           character set are used, you can have two different
           character sequences that look the same.  To avoid
           confusion, the ISO 10646 standard sets out some
           _n_o_r_m_a_l_i_z_a_t_i_o_n _r_u_l_e_s which when applied ensure that two
           sequences that look the same are turned into the same
           sequence.  GCC can warn you if you are using
           identifiers that have not been normalized; this option
           controls that warning.



gcc-4.74                    2014-06-12                         73





GCC(1)                         GNU                         GCC(1)


           There are four levels of warning supported by GCC.
           The default is --WWnnoorrmmaalliizzeedd==nnffcc, which warns about any
           identifier that is not in the ISO 10646 "C" normalized
           form, _N_F_C.  NFC is the recommended form for most uses.

           Unfortunately, there are some characters allowed in
           identifiers by ISO C and ISO C++ that, when turned
           into NFC, are not allowed in identifiers.  That is,
           there's no way to use these symbols in portable ISO C
           or C++ and have all your identifiers in NFC.
           --WWnnoorrmmaalliizzeedd==iidd suppresses the warning for these
           characters.  It is hoped that future versions of the
           standards involved will correct this, which is why
           this option is not the default.

           You can switch the warning off for all characters by
           writing --WWnnoorrmmaalliizzeedd==nnoonnee.  You would only want to do
           this if you were using some other normalization scheme
           (like "D"), because otherwise you can easily create
           bugs that are literally impossible to see.

           Some characters in ISO 10646 have distinct meanings
           but look identical in some fonts or display
           methodologies, especially once formatting has been
           applied.  For instance "\u207F", "SUPERSCRIPT LATIN
           SMALL LETTER N", will display just like a regular "n"
           that has been placed in a superscript.  ISO 10646
           defines the _N_F_K_C normalization scheme to convert all
           these into a standard form as well, and GCC will warn
           if your code is not in NFKC if you use
           --WWnnoorrmmaalliizzeedd==nnffkkcc.  This warning is comparable to
           warning about every identifier that contains the
           letter O because it might be confused with the digit
           0, and so is not the default, but may be useful as a
           local coding convention if the programming environment
           is unable to be fixed to display these characters
           distinctly.

       --WWnnoo--ddeepprreeccaatteedd
           Do not warn about usage of deprecated features.

       --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
           Do not warn about uses of functions, variables, and
           types marked as deprecated by using the "deprecated"
           attribute.

       --WWnnoo--oovveerrffllooww
           Do not warn about compile-time overflow in constant
           expressions.

       --WWoovveerrrriiddee--iinniitt (C and Objective-C only)
           Warn if an initialized field without side effects is
           overridden when using designated initializers.




gcc-4.74                    2014-06-12                         74





GCC(1)                         GNU                         GCC(1)


           This warning is included in --WWeexxttrraa.  To get other
           --WWeexxttrraa warnings without this one, use --WWeexxttrraa
           --WWnnoo--oovveerrrriiddee--iinniitt.

       --WWppaacckkeedd
           Warn if a structure is given the packed attribute, but
           the packed attribute has no effect on the layout or
           size of the structure.  Such structures may be mis-
           aligned for little benefit.  For instance, in this
           code, the variable "f.x" in "struct bar" will be
           misaligned even though "struct bar" does not itself
           have the packed attribute:

                   struct foo {
                     int x;
                     char a, b, c, d;
                   } __attribute__((packed));
                   struct bar {
                     char z;
                     struct foo f;
                   };

       --WWppaacckkeedd--bbiittffiieelldd--ccoommppaatt
           The 4.1, 4.2 and 4.3 series of GCC ignore the "packed"
           attribute on bit-fields of type "char".  This has been
           fixed in GCC 4.4 but the change can lead to
           differences in the structure layout.  GCC informs you
           when the offset of such a field has changed in GCC
           4.4.  For example there is no longer a 4-bit padding
           between field "a" and "b" in this structure:

                   struct foo
                   {
                     char a:4;
                     char b:8;
                   } __attribute__ ((packed));

           This warning is enabled by default.  Use
           --WWnnoo--ppaacckkeedd--bbiittffiieelldd--ccoommppaatt to disable this warning.

       --WWppaaddddeedd
           Warn if padding is included in a structure, either to
           align an element of the structure or to align the
           whole structure.  Sometimes when this happens it is
           possible to rearrange the fields of the structure to
           reduce the padding and so make the structure smaller.

       --WWrreedduunnddaanntt--ddeeccllss
           Warn if anything is declared more than once in the
           same scope, even in cases where multiple declaration
           is valid and changes nothing.

       --WWnneesstteedd--eexxtteerrnnss (C and Objective-C only)
           Warn if an "extern" declaration is encountered within



gcc-4.74                    2014-06-12                         75





GCC(1)                         GNU                         GCC(1)


           a function.

       --WWiinnlliinnee
           Warn if a function can not be inlined and it was
           declared as inline.  Even with this option, the
           compiler will not warn about failures to inline
           functions declared in system headers.

           The compiler uses a variety of heuristics to determine
           whether or not to inline a function.  For example, the
           compiler takes into account the size of the function
           being inlined and the amount of inlining that has
           already been done in the current function.  Therefore,
           seemingly insignificant changes in the source program
           can cause the warnings produced by --WWiinnlliinnee to appear
           or disappear.

       --WWnnoo--iinnvvaalliidd--ooffffsseettooff (C++ and Objective-C++ only)
           Suppress warnings from applying the ooffffsseettooff macro to
           a non-POD type.  According to the 1998 ISO C++
           standard, applying ooffffsseettooff to a non-POD type is
           undefined.  In existing C++ implementations, however,
           ooffffsseettooff typically gives meaningful results even when
           applied to certain kinds of non-POD types. (Such as a
           simple ssttrruucctt that fails to be a POD type only by
           virtue of having a constructor.)  This flag is for
           users who are aware that they are writing nonportable
           code and who have deliberately chosen to ignore the
           warning about it.

           The restrictions on ooffffsseettooff may be relaxed in a
           future version of the C++ standard.

       --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt
           Suppress warnings from casts to pointer type of an
           integer of a different size. In C++, casting to a
           pointer type of smaller size is an error. WWiinntt--ttoo--
           ppooiinntteerr--ccaasstt is enabled by default.

       --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt (C and Objective-C only)
           Suppress warnings from casts from a pointer to an
           integer type of a different size.

       --WWiinnvvaalliidd--ppcchh
           Warn if a precompiled header is found in the search
           path but can't be used.

       --WWlloonngg--lloonngg
           Warn if lloonngg lloonngg type is used.  This is enabled by
           either --ppeeddaannttiicc or --WWttrraaddiittiioonnaall in ISO C90 and C++98
           modes.  To inhibit the warning messages, use
           --WWnnoo--lloonngg--lloonngg.





gcc-4.74                    2014-06-12                         76





GCC(1)                         GNU                         GCC(1)


       --WWvvaarriiaaddiicc--mmaaccrrooss
           Warn if variadic macros are used in pedantic ISO C90
           mode, or the GNU alternate syntax when in pedantic ISO
           C99 mode.  This is default.  To inhibit the warning
           messages, use --WWnnoo--vvaarriiaaddiicc--mmaaccrrooss.

       --WWvveeccttoorr--ooppeerraattiioonn--ppeerrffoorrmmaannccee
           Warn if vector operation is not implemented via SIMD
           capabilities of the architecture.  Mainly useful for
           the performance tuning.  Vector operation can be
           implemented "piecewise", which means that the scalar
           operation is performed on every vector element; "in
           parallel", which means that the vector operation is
           implemented using scalars of wider type, which
           normally is more performance efficient; and "as a
           single scalar", which means that vector fits into a
           scalar type.

       --WWvvllaa
           Warn if variable length array is used in the code.
           --WWnnoo--vvllaa will prevent the --ppeeddaannttiicc warning of the
           variable length array.

       --WWvvoollaattiillee--rreeggiisstteerr--vvaarr
           Warn if a register variable is declared volatile.  The
           volatile modifier does not inhibit all optimizations
           that may eliminate reads and/or writes to register
           variables.  This warning is enabled by --WWaallll.

       --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
           Warn if a requested optimization pass is disabled.
           This warning does not generally indicate that there is
           anything wrong with your code; it merely indicates
           that GCC's optimizers were unable to handle the code
           effectively.  Often, the problem is that your code is
           too big or too complex; GCC will refuse to optimize
           programs when the optimization itself is likely to
           take inordinate amounts of time.

       --WWppooiinntteerr--ssiiggnn (C and Objective-C only)
           Warn for pointer argument passing or assignment with
           different signedness.  This option is only supported
           for C and Objective-C.  It is implied by --WWaallll and by
           --ppeeddaannttiicc, which can be disabled with
           --WWnnoo--ppooiinntteerr--ssiiggnn.

       --WWssttaacckk--pprrootteeccttoorr
           This option is only active when --ffssttaacckk--pprrootteeccttoorr is
           active.  It warns about functions that will not be
           protected against stack smashing.

       --WWnnoo--mmuuddffllaapp
           Suppress warnings about constructs that cannot be
           instrumented by --ffmmuuddffllaapp.



gcc-4.74                    2014-06-12                         77





GCC(1)                         GNU                         GCC(1)


       --WWoovveerrlleennggtthh--ssttrriinnggss
           Warn about string constants that are longer than the
           "minimum maximum" length specified in the C standard.
           Modern compilers generally allow string constants that
           are much longer than the standard's minimum limit, but
           very portable programs should avoid using longer
           strings.

           The limit applies _a_f_t_e_r string constant concatenation,
           and does not count the trailing NUL.  In C90, the
           limit was 509 characters; in C99, it was raised to
           4095.  C++98 does not specify a normative minimum
           maximum, so we do not diagnose overlength strings in
           C++.

           This option is implied by --ppeeddaannttiicc, and can be
           disabled with --WWnnoo--oovveerrlleennggtthh--ssttrriinnggss.

       --WWuunnssuuffffiixxeedd--ffllooaatt--ccoonnssttaannttss (C and Objective-C only)
           GCC will issue a warning for any floating constant
           that does not have a suffix.  When used together with
           --WWssyysstteemm--hheeaaddeerrss it will warn about such constants in
           system header files.  This can be useful when
           preparing code to use with the "FLOAT_CONST_DECIMAL64"
           pragma from the decimal floating-point extension to
           C99.

       OOppttiioonnss ffoorr DDeebbuuggggiinngg YYoouurr PPrrooggrraamm oorr GGCCCC

       GCC has various special options that are used for
       debugging either your program or GCC:

       --gg  Produce debugging information in the operating
           system's native format (stabs, COFF, XCOFF, or DWARF
           2).  GDB can work with this debugging information.

           On most systems that use stabs format, --gg enables use
           of extra debugging information that only GDB can use;
           this extra information makes debugging work better in
           GDB but will probably make other debuggers crash or
           refuse to read the program.  If you want to control
           for certain whether to generate the extra information,
           use --ggssttaabbss++, --ggssttaabbss, --ggxxccooffff++, --ggxxccooffff, or --ggvvmmss
           (see below).

           GCC allows you to use --gg with --OO.  The shortcuts taken
           by optimized code may occasionally produce surprising
           results: some variables you declared may not exist at
           all; flow of control may briefly move where you did
           not expect it; some statements may not be executed
           because they compute constant results or their values
           were already at hand; some statements may execute in
           different places because they were moved out of loops.




gcc-4.74                    2014-06-12                         78





GCC(1)                         GNU                         GCC(1)


           Nevertheless it proves possible to debug optimized
           output.  This makes it reasonable to use the optimizer
           for programs that might have bugs.

           The following options are useful when GCC is generated
           with the capability for more than one debugging
           format.

       --ggggddbb
           Produce debugging information for use by GDB.  This
           means to use the most expressive format available
           (DWARF 2, stabs, or the native format if neither of
           those are supported), including GDB extensions if at
           all possible.

       --ggssttaabbss
           Produce debugging information in stabs format (if that
           is supported), without GDB extensions.  This is the
           format used by DBX on most BSD systems.  On MIPS,
           Alpha and System V Release 4 systems this option
           produces stabs debugging output that is not understood
           by DBX or SDB.  On System V Release 4 systems this
           option requires the GNU assembler.

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss
           Produce debugging information in stabs format (if that
           is supported), for only symbols that are actually
           used.

       --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss
           Instead of emitting debugging information for a C++
           class in only one object file, emit it in all object
           files using the class.  This option should be used
           only with debuggers that are unable to handle the way
           GCC normally emits debugging information for classes
           because using this option will increase the size of
           debugging information by as much as a factor of two.

       --ffnnoo--ddeebbuugg--ttyyppeess--sseeccttiioonn
           By default when using DWARF v4 or higher type DIEs
           will be put into their own .debug_types section
           instead of making them part of the .debug_info
           section.  It is more efficient to put them in a
           separate comdat sections since the linker will then be
           able to remove duplicates.  But not all DWARF
           consumers support .debug_types sections yet.

       --ggssttaabbss++
           Produce debugging information in stabs format (if that
           is supported), using GNU extensions understood only by
           the GNU debugger (GDB).  The use of these extensions
           is likely to make other debuggers crash or refuse to
           read the program.




gcc-4.74                    2014-06-12                         79





GCC(1)                         GNU                         GCC(1)


       --ggccooffff
           Produce debugging information in COFF format (if that
           is supported).  This is the format used by SDB on most
           System V systems prior to System V Release 4.

       --ggxxccooffff
           Produce debugging information in XCOFF format (if that
           is supported).  This is the format used by the DBX
           debugger on IBM RS/6000 systems.

       --ggxxccooffff++
           Produce debugging information in XCOFF format (if that
           is supported), using GNU extensions understood only by
           the GNU debugger (GDB).  The use of these extensions
           is likely to make other debuggers crash or refuse to
           read the program, and may cause assemblers other than
           the GNU assembler (GAS) to fail with an error.

       --ggddwwaarrff--_v_e_r_s_i_o_n
           Produce debugging information in DWARF format (if that
           is supported).  This is the format used by DBX on IRIX
           6.  The value of _v_e_r_s_i_o_n may be either 2, 3 or 4; the
           default version is 2.

           Note that with DWARF version 2 some ports require, and
           will always use, some non-conflicting DWARF 3
           extensions in the unwind tables.

           Version 4 may require GDB 7.0 and
           --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss for maximum benefit.

       --ggrreeccoorrdd--ggcccc--sswwiittcchheess
           This switch causes the command-line options used to
           invoke the compiler that may affect code generation to
           be appended to the DW_AT_producer attribute in DWARF
           debugging information.  The options are concatenated
           with spaces separating them from each other and from
           the compiler version.  See also --ffrreeccoorrdd--ggcccc--sswwiittcchheess
           for another way of storing compiler options into the
           object file.

       --ggnnoo--rreeccoorrdd--ggcccc--sswwiittcchheess
           Disallow appending command-line options to the
           DW_AT_producer attribute in DWARF debugging
           information.  This is the default.

       --ggssttrriicctt--ddwwaarrff
           Disallow using extensions of later DWARF standard
           version than selected with --ggddwwaarrff--_v_e_r_s_i_o_n.  On most
           targets using non-conflicting DWARF extensions from
           later standard versions is allowed.

       --ggnnoo--ssttrriicctt--ddwwaarrff
           Allow using extensions of later DWARF standard version



gcc-4.74                    2014-06-12                         80





GCC(1)                         GNU                         GCC(1)


           than selected with --ggddwwaarrff--_v_e_r_s_i_o_n.

       --ggvvmmss
           Produce debugging information in VMS debug format (if
           that is supported).  This is the format used by DEBUG
           on VMS systems.

       --gg_l_e_v_e_l
       --ggggddbb_l_e_v_e_l
       --ggssttaabbss_l_e_v_e_l
       --ggccooffff_l_e_v_e_l
       --ggxxccooffff_l_e_v_e_l
       --ggvvmmss_l_e_v_e_l
           Request debugging information and also use _l_e_v_e_l to
           specify how much information.  The default level is 2.

           Level 0 produces no debug information at all.  Thus,
           --gg00 negates --gg.

           Level 1 produces minimal information, enough for
           making backtraces in parts of the program that you
           don't plan to debug.  This includes descriptions of
           functions and external variables, but no information
           about local variables and no line numbers.

           Level 3 includes extra information, such as all the
           macro definitions present in the program.  Some
           debuggers support macro expansion when you use --gg33.

           --ggddwwaarrff--22 does not accept a concatenated debug level,
           because GCC used to support an option --ggddwwaarrff that
           meant to generate debug information in version 1 of
           the DWARF format (which is very different from version
           2), and it would have been too confusing.  That debug
           format is long obsolete, but the option cannot be
           changed now.  Instead use an additional --gg_l_e_v_e_l option
           to change the debug level for DWARF.

       --ggttooggggllee
           Turn off generation of debug info, if leaving out this
           option would have generated it, or turn it on at level
           2 otherwise.  The position of this argument in the
           command line does not matter, it takes effect after
           all other options are processed, and it does so only
           once, no matter how many times it is given.  This is
           mainly intended to be used with --ffccoommppaarree--ddeebbuugg.

       --ffdduummpp--ffiinnaall--iinnssnnss[==_f_i_l_e]
           Dump the final internal representation (RTL) to _f_i_l_e.
           If the optional argument is omitted (or if _f_i_l_e is
           "."), the name of the dump file will be determined by
           appending ".gkd" to the compilation output file name.





gcc-4.74                    2014-06-12                         81





GCC(1)                         GNU                         GCC(1)


       --ffccoommppaarree--ddeebbuugg[==_o_p_t_s]
           If no error occurs during compilation, run the
           compiler a second time, adding _o_p_t_s and
           --ffccoommppaarree--ddeebbuugg--sseeccoonndd to the arguments passed to the
           second compilation.  Dump the final internal
           representation in both compilations, and print an
           error if they differ.

           If the equal sign is omitted, the default --ggttooggggllee is
           used.

           The environment variable GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG, if
           defined, non-empty and nonzero, implicitly enables
           --ffccoommppaarree--ddeebbuugg.  If GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG is defined to a
           string starting with a dash, then it is used for _o_p_t_s,
           otherwise the default --ggttooggggllee is used.

           --ffccoommppaarree--ddeebbuugg==, with the equal sign but without
           _o_p_t_s, is equivalent to --ffnnoo--ccoommppaarree--ddeebbuugg, which
           disables the dumping of the final representation and
           the second compilation, preventing even
           GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG from taking effect.

           To verify full coverage during --ffccoommppaarree--ddeebbuugg
           testing, set GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG to say
           --ffccoommppaarree--ddeebbuugg--nnoott--oovveerrrriiddddeenn, which GCC will reject
           as an invalid option in any actual compilation (rather
           than preprocessing, assembly or linking).  To get just
           a warning, setting GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG to
           --ww%%nn--ffccoommppaarree--ddeebbuugg nnoott oovveerrrriiddddeenn will do.

       --ffccoommppaarree--ddeebbuugg--sseeccoonndd
           This option is implicitly passed to the compiler for
           the second compilation requested by --ffccoommppaarree--ddeebbuugg,
           along with options to silence warnings, and omitting
           other options that would cause side-effect compiler
           outputs to files or to the standard output.  Dump
           files and preserved temporary files are renamed so as
           to contain the ".gk" additional extension during the
           second compilation, to avoid overwriting those
           generated by the first.

           When this option is passed to the compiler driver, it
           causes the _f_i_r_s_t compilation to be skipped, which
           makes it useful for little other than debugging the
           compiler proper.

       --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss
           Compress DWARF2 debugging information by eliminating
           duplicated information about each symbol.  This option
           only makes sense when generating DWARF2 debugging
           information with --ggddwwaarrff--22.





gcc-4.74                    2014-06-12                         82





GCC(1)                         GNU                         GCC(1)


       --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy
           Emit debug information for struct-like types only when
           the base name of the compilation source file matches
           the base name of file in which the struct was defined.

           This option substantially reduces the size of
           debugging information, but at significant potential
           loss in type information to the debugger.  See
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd for a less aggressive
           option.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more
           detailed control.

           This option works only with DWARF 2.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           Emit debug information for struct-like types only when
           the base name of the compilation source file matches
           the base name of file in which the type was defined,
           unless the struct is a template or defined in a system
           header.

           This option significantly reduces the size of
           debugging information, with some potential loss in
           type information to the debugger.  See
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy for a more aggressive
           option.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more
           detailed control.

           This option works only with DWARF 2.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t]
           Specify the struct-like types for which the compiler
           will generate debug information.  The intent is to
           reduce duplicate struct debug information between
           different object files within the same program.

           This option is a detailed version of
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd and
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy, which will serve for
           most needs.

           A specification has the
           syntax[ddiirr::|iinndd::][oorrdd::|ggeenn::](aannyy|ssyyss|bbaassee|nnoonnee)

           The optional first word limits the specification to
           structs that are used directly (ddiirr::) or used
           indirectly (iinndd::).  A struct type is used directly
           when it is the type of a variable, member.  Indirect
           uses arise through pointers to structs.  That is, when
           use of an incomplete struct would be legal, the use is
           indirect.  An example is ssttrruucctt oonnee ddiirreecctt;; ssttrruucctt ttwwoo
           ** iinnddiirreecctt;;.

           The optional second word limits the specification to



gcc-4.74                    2014-06-12                         83





GCC(1)                         GNU                         GCC(1)


           ordinary structs (oorrdd::) or generic structs (ggeenn::).
           Generic structs are a bit complicated to explain.  For
           C++, these are non-explicit specializations of
           template classes, or non-template classes within the
           above.  Other programming languages have generics, but
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd does not yet implement
           them.

           The third word specifies the source files for those
           structs for which the compiler will emit debug
           information.  The values nnoonnee and aannyy have the normal
           meaning.  The value bbaassee means that the base of name
           of the file in which the type declaration appears must
           match the base of the name of the main compilation
           file.  In practice, this means that types declared in
           _f_o_o_._c and _f_o_o_._h will have debug information, but types
           declared in other header will not.  The value ssyyss
           means those types satisfying bbaassee or declared in
           system or compiler headers.

           You may need to experiment to determine the best
           settings for your application.

           The default is --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd==aallll.

           This option works only with DWARF 2.

       --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss
           Direct the linker to not merge together strings in the
           debugging information that are identical in different
           object files.  Merging is not supported by all
           assemblers or linkers.  Merging decreases the size of
           the debug information in the output file at the cost
           of increasing link processing time.  Merging is
           enabled by default.

       --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           When compiling files in directory _o_l_d, record
           debugging information describing them as in _n_e_w
           instead.

       --ffnnoo--ddwwaarrff22--ccffii--aassmm
           Emit DWARF 2 unwind info as compiler generated
           ".eh_frame" section instead of using GAS ".cfi_*"
           directives.

       --pp  Generate extra code to write profile information
           suitable for the analysis program pprrooff.  You must use
           this option when compiling the source files you want
           data about, and you must also use it when linking.

       --ppgg Generate extra code to write profile information
           suitable for the analysis program ggpprrooff.  You must use
           this option when compiling the source files you want



gcc-4.74                    2014-06-12                         84





GCC(1)                         GNU                         GCC(1)


           data about, and you must also use it when linking.

       --QQ  Makes the compiler print out each function name as it
           is compiled, and print some statistics about each pass
           when it finishes.

       --ffttiimmee--rreeppoorrtt
           Makes the compiler print some statistics about the
           time consumed by each pass when it finishes.

       --ffmmeemm--rreeppoorrtt
           Makes the compiler print some statistics about
           permanent memory allocation when it finishes.

       --ffpprree--iippaa--mmeemm--rreeppoorrtt
       --ffppoosstt--iippaa--mmeemm--rreeppoorrtt
           Makes the compiler print some statistics about
           permanent memory allocation before or after
           interprocedural optimization.

       --ffssttaacckk--uussaaggee
           Makes the compiler output stack usage information for
           the program, on a per-function basis.  The filename
           for the dump is made by appending _._s_u to the _a_u_x_n_a_m_e.
           _a_u_x_n_a_m_e is generated from the name of the output file,
           if explicitly specified and it is not an executable,
           otherwise it is the basename of the source file.  An
           entry is made up of three fields:

           *   The name of the function.

           *   A number of bytes.

           *   One or more qualifiers: "static", "dynamic",
               "bounded".

           The qualifier "static" means that the function
           manipulates the stack statically: a fixed number of
           bytes are allocated for the frame on function entry
           and released on function exit; no stack adjustments
           are otherwise made in the function.  The second field
           is this fixed number of bytes.

           The qualifier "dynamic" means that the function
           manipulates the stack dynamically: in addition to the
           static allocation described above, stack adjustments
           are made in the body of the function, for example to
           push/pop arguments around function calls.  If the
           qualifier "bounded" is also present, the amount of
           these adjustments is bounded at compile time and the
           second field is an upper bound of the total amount of
           stack used by the function.  If it is not present, the
           amount of these adjustments is not bounded at compile
           time and the second field only represents the bounded



gcc-4.74                    2014-06-12                         85





GCC(1)                         GNU                         GCC(1)


           part.

       --ffpprrooffiillee--aarrccss
           Add code so that program flow _a_r_c_s are instrumented.
           During execution the program records how many times
           each branch and call is executed and how many times it
           is taken or returns.  When the compiled program exits
           it saves this data to a file called _a_u_x_n_a_m_e_._g_c_d_a for
           each source file.  The data may be used for profile-
           directed optimizations (--ffbbrraanncchh--pprroobbaabbiilliittiieess), or
           for test coverage analysis (--fftteesstt--ccoovveerraaggee).  Each
           object file's _a_u_x_n_a_m_e is generated from the name of
           the output file, if explicitly specified and it is not
           the final executable, otherwise it is the basename of
           the source file.  In both cases any suffix is removed
           (e.g. _f_o_o_._g_c_d_a for input file _d_i_r_/_f_o_o_._c, or
           _d_i_r_/_f_o_o_._g_c_d_a for output file specified as --oo
           ddiirr//ffoooo..oo).

       ----ccoovveerraaggee
           This option is used to compile and link code
           instrumented for coverage analysis.  The option is a
           synonym for --ffpprrooffiillee--aarrccss --fftteesstt--ccoovveerraaggee (when
           compiling) and --llggccoovv (when linking).  See the
           documentation for those options for more details.

           *   Compile the source files with --ffpprrooffiillee--aarrccss plus
               optimization and code generation options.  For
               test coverage analysis, use the additional
               --fftteesstt--ccoovveerraaggee option.  You do not need to
               profile every source file in a program.

           *   Link your object files with --llggccoovv or
               --ffpprrooffiillee--aarrccss (the latter implies the former).

           *   Run the program on a representative workload to
               generate the arc profile information.  This may be
               repeated any number of times.  You can run
               concurrent instances of your program, and provided
               that the file system supports locking, the data
               files will be correctly updated.  Also "fork"
               calls are detected and correctly handled (double
               counting will not happen).

           *   For profile-directed optimizations, compile the
               source files again with the same optimization and
               code generation options plus
               --ffbbrraanncchh--pprroobbaabbiilliittiieess.

           *   For test coverage analysis, use ggccoovv to produce
               human readable information from the _._g_c_n_o and
               _._g_c_d_a files.  Refer to the ggccoovv documentation for
               further information.




gcc-4.74                    2014-06-12                         86





GCC(1)                         GNU                         GCC(1)


           With --ffpprrooffiillee--aarrccss, for each function of your program
           GCC creates a program flow graph, then finds a
           spanning tree for the graph.  Only arcs that are not
           on the spanning tree have to be instrumented: the
           compiler adds code to count the number of times that
           these arcs are executed.  When an arc is the only exit
           or only entrance to a block, the instrumentation code
           can be added to the block; otherwise, a new basic
           block must be created to hold the instrumentation
           code.

       --fftteesstt--ccoovveerraaggee
           Produce a notes file that the ggccoovv code-coverage
           utility can use to show program coverage.  Each source
           file's note file is called _a_u_x_n_a_m_e_._g_c_n_o.  Refer to the
           --ffpprrooffiillee--aarrccss option above for a description of
           _a_u_x_n_a_m_e and instructions on how to generate test
           coverage data.  Coverage data will match the source
           files more closely, if you do not optimize.

       --ffddbbgg--ccnntt--lliisstt
           Print the name and the counter upper bound for all
           debug counters.

       --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t
           Set the internal debug counter upper bound.  _c_o_u_n_t_e_r_-
           _v_a_l_u_e_-_l_i_s_t is a comma-separated list of _n_a_m_e:_v_a_l_u_e
           pairs which sets the upper bound of each debug counter
           _n_a_m_e to _v_a_l_u_e.  All debug counters have the initial
           upper bound of _U_I_N_T___M_A_X, thus _d_b_g___c_n_t_(_) returns true
           always unless the upper bound is set by this option.
           e.g. With -fdbg-cnt=dce:10,tail_call:0 dbg_cnt(dce)
           will return true only for first 10 invocations

       --ffeennaabbllee--_k_i_n_d--_p_a_s_s
       --ffddiissaabbllee--_k_i_n_d--_p_a_s_s==_r_a_n_g_e_-_l_i_s_t
           This is a set of debugging options that are used to
           explicitly disable/enable optimization passes. For
           compiler users, regular options for enabling/disabling
           passes should be used instead.

           *<-fdisable-ipa-_p_a_s_s>
               Disable ipa pass _p_a_s_s. _p_a_s_s is the pass name.  If
               the same pass is statically invoked in the
               compiler multiple times, the pass name should be
               appended with a sequential number starting from 1.

           *<-fdisable-rtl-_p_a_s_s>
           *<-fdisable-rtl-_p_a_s_s=_r_a_n_g_e_-_l_i_s_t>
               Disable rtl pass _p_a_s_s.  _p_a_s_s is the pass name.  If
               the same pass is statically invoked in the
               compiler multiple times, the pass name should be
               appended with a sequential number starting from 1.
               _r_a_n_g_e_-_l_i_s_t is a comma seperated list of function



gcc-4.74                    2014-06-12                         87





GCC(1)                         GNU                         GCC(1)


               ranges or assembler names.  Each range is a number
               pair seperated by a colon.  The range is inclusive
               in both ends.  If the range is trivial, the number
               pair can be simplified as a single number.  If the
               function's cgraph node's _u_i_d is falling within one
               of the specified ranges, the _p_a_s_s is disabled for
               that function.  The _u_i_d is shown in the function
               header of a dump file, and the pass names can be
               dumped by using option --ffdduummpp--ppaasssseess.

           *<-fdisable-tree-_p_a_s_s>
           *<-fdisable-tree-_p_a_s_s=_r_a_n_g_e_-_l_i_s_t>
               Disable tree pass _p_a_s_s.  See --ffddiissaabbllee--rrttll for the
               description of option arguments.

           *<-fenable-ipa-_p_a_s_s>
               Enable ipa pass _p_a_s_s.  _p_a_s_s is the pass name.  If
               the same pass is statically invoked in the
               compiler multiple times, the pass name should be
               appended with a sequential number starting from 1.

           *<-fenable-rtl-_p_a_s_s>
           *<-fenable-rtl-_p_a_s_s=_r_a_n_g_e_-_l_i_s_t>
               Enable rtl pass _p_a_s_s.  See --ffddiissaabbllee--rrttll for
               option argument description and examples.

           *<-fenable-tree-_p_a_s_s>
           *<-fenable-tree-_p_a_s_s=_r_a_n_g_e_-_l_i_s_t>
               Enable tree pass _p_a_s_s.  See --ffddiissaabbllee--rrttll for the
               description of option arguments.

                       # disable ccp1 for all functions
                          -fdisable-tree-ccp1
                       # disable complete unroll for function whose cgraph node uid is 1
                          -fenable-tree-cunroll=1
                       # disable gcse2 for functions at the following ranges [1,1],
                       # [300,400], and [400,1000]
                       # disable gcse2 for functions foo and foo2
                          -fdisable-rtl-gcse2=foo,foo2
                       # disable early inlining
                          -fdisable-tree-einline
                       # disable ipa inlining
                          -fdisable-ipa-inline
                       # enable tree full unroll
                          -fenable-tree-unroll

       --dd_l_e_t_t_e_r_s
       --ffdduummpp--rrttll--_p_a_s_s
           Says to make debugging dumps during compilation at
           times specified by _l_e_t_t_e_r_s.  This is used for
           debugging the RTL-based passes of the compiler.  The
           file names for most of the dumps are made by appending
           a pass number and a word to the _d_u_m_p_n_a_m_e, and the
           files are created in the directory of the output file.



gcc-4.74                    2014-06-12                         88





GCC(1)                         GNU                         GCC(1)


           Note that the pass number is computed statically as
           passes get registered into the pass manager.  Thus the
           numbering is not related to the dynamic order of
           execution of passes.  In particular, a pass installed
           by a plugin could have a number over 200 even if it
           executed quite early.  _d_u_m_p_n_a_m_e is generated from the
           name of the output file, if explicitly specified and
           it is not an executable, otherwise it is the basename
           of the source file. These switches may have different
           effects when --EE is used for preprocessing.

           Debug dumps can be enabled with a --ffdduummpp--rrttll switch or
           some --dd option _l_e_t_t_e_r_s.  Here are the possible letters
           for use in _p_a_s_s and _l_e_t_t_e_r_s, and their meanings:

           --ffdduummpp--rrttll--aalliiggnnmmeennttss
               Dump after branch alignments have been computed.

           --ffdduummpp--rrttll--aassmmccoonnss
               Dump after fixing rtl statements that have
               unsatisfied in/out constraints.

           --ffdduummpp--rrttll--aauuttoo__iinncc__ddeecc
               Dump after auto-inc-dec discovery.  This pass is
               only run on architectures that have auto inc or
               auto dec instructions.

           --ffdduummpp--rrttll--bbaarrrriieerrss
               Dump after cleaning up the barrier instructions.

           --ffdduummpp--rrttll--bbbbppaarrtt
               Dump after partitioning hot and cold basic blocks.

           --ffdduummpp--rrttll--bbbbrroo
               Dump after block reordering.

           --ffdduummpp--rrttll--bbttll11
           --ffdduummpp--rrttll--bbttll22
               --ffdduummpp--rrttll--bbttll11 and --ffdduummpp--rrttll--bbttll22 enable dumping
               after the two branch target load optimization
               passes.

           --ffdduummpp--rrttll--bbyyppaassss
               Dump after jump bypassing and control flow
               optimizations.

           --ffdduummpp--rrttll--ccoommbbiinnee
               Dump after the RTL instruction combination pass.

           --ffdduummpp--rrttll--ccoommppggoottooss
               Dump after duplicating the computed gotos.

           --ffdduummpp--rrttll--ccee11




gcc-4.74                    2014-06-12                         89





GCC(1)                         GNU                         GCC(1)


           --ffdduummpp--rrttll--ccee22
           --ffdduummpp--rrttll--ccee33
               --ffdduummpp--rrttll--ccee11, --ffdduummpp--rrttll--ccee22, and --ffdduummpp--rrttll--ccee33
               enable dumping after the three if conversion
               passes.

           --ffdduummpp--rrttll--ccpprroopp__hhaarrddrreegg
               Dump after hard register copy propagation.

           --ffdduummpp--rrttll--ccssaa
               Dump after combining stack adjustments.

           --ffdduummpp--rrttll--ccssee11
           --ffdduummpp--rrttll--ccssee22
               --ffdduummpp--rrttll--ccssee11 and --ffdduummpp--rrttll--ccssee22 enable dumping
               after the two common sub-expression elimination
               passes.

           --ffdduummpp--rrttll--ddccee
               Dump after the standalone dead code elimination
               passes.

           --ffdduummpp--rrttll--ddbbrr
               Dump after delayed branch scheduling.

           --ffdduummpp--rrttll--ddccee11
           --ffdduummpp--rrttll--ddccee22
               --ffdduummpp--rrttll--ddccee11 and --ffdduummpp--rrttll--ddccee22 enable dumping
               after the two dead store elimination passes.

           --ffdduummpp--rrttll--eehh
               Dump after finalization of EH handling code.

           --ffdduummpp--rrttll--eehh__rraannggeess
               Dump after conversion of EH handling range
               regions.

           --ffdduummpp--rrttll--eexxppaanndd
               Dump after RTL generation.

           --ffdduummpp--rrttll--ffwwpprroopp11
           --ffdduummpp--rrttll--ffwwpprroopp22
               --ffdduummpp--rrttll--ffwwpprroopp11 and --ffdduummpp--rrttll--ffwwpprroopp22 enable
               dumping after the two forward propagation passes.

           --ffdduummpp--rrttll--ggccssee11
           --ffdduummpp--rrttll--ggccssee22
               --ffdduummpp--rrttll--ggccssee11 and --ffdduummpp--rrttll--ggccssee22 enable
               dumping after global common subexpression
               elimination.

           --ffdduummpp--rrttll--iinniitt--rreeggss
               Dump after the initialization of the registers.




gcc-4.74                    2014-06-12                         90





GCC(1)                         GNU                         GCC(1)


           --ffdduummpp--rrttll--iinniittvvaallss
               Dump after the computation of the initial value
               sets.

           --ffdduummpp--rrttll--iinnttoo__ccffggllaayyoouutt
               Dump after converting to cfglayout mode.

           --ffdduummpp--rrttll--iirraa
               Dump after iterated register allocation.

           --ffdduummpp--rrttll--jjuummpp
               Dump after the second jump optimization.

           --ffdduummpp--rrttll--lloooopp22
               --ffdduummpp--rrttll--lloooopp22 enables dumping after the rtl
               loop optimization passes.

           --ffdduummpp--rrttll--mmaacchh
               Dump after performing the machine dependent
               reorganization pass, if that pass exists.

           --ffdduummpp--rrttll--mmooddee__ssww
               Dump after removing redundant mode switches.

           --ffdduummpp--rrttll--rrnnrreegg
               Dump after register renumbering.

           --ffdduummpp--rrttll--oouuttooff__ccffggllaayyoouutt
               Dump after converting from cfglayout mode.

           --ffdduummpp--rrttll--ppeeeepphhoollee22
               Dump after the peephole pass.

           --ffdduummpp--rrttll--ppoossttrreellooaadd
               Dump after post-reload optimizations.

           --ffdduummpp--rrttll--pprroo__aanndd__eeppiilloogguuee
               Dump after generating the function prologues and
               epilogues.

           --ffdduummpp--rrttll--rreeggmmoovvee
               Dump after the register move pass.

           --ffdduummpp--rrttll--sscchheedd11
           --ffdduummpp--rrttll--sscchheedd22
               --ffdduummpp--rrttll--sscchheedd11 and --ffdduummpp--rrttll--sscchheedd22 enable
               dumping after the basic block scheduling passes.

           --ffdduummpp--rrttll--sseeee
               Dump after sign extension elimination.

           --ffdduummpp--rrttll--sseeqqaabbssttrr
               Dump after common sequence discovery.




gcc-4.74                    2014-06-12                         91





GCC(1)                         GNU                         GCC(1)


           --ffdduummpp--rrttll--sshhoorrtteenn
               Dump after shortening branches.

           --ffdduummpp--rrttll--ssiibblliinngg
               Dump after sibling call optimizations.

           --ffdduummpp--rrttll--sspplliitt11
           --ffdduummpp--rrttll--sspplliitt22
           --ffdduummpp--rrttll--sspplliitt33
           --ffdduummpp--rrttll--sspplliitt44
           --ffdduummpp--rrttll--sspplliitt55
               --ffdduummpp--rrttll--sspplliitt11, --ffdduummpp--rrttll--sspplliitt22,
               --ffdduummpp--rrttll--sspplliitt33, --ffdduummpp--rrttll--sspplliitt44 and
               --ffdduummpp--rrttll--sspplliitt55 enable dumping after five rounds
               of instruction splitting.

           --ffdduummpp--rrttll--ssmmss
               Dump after modulo scheduling.  This pass is only
               run on some architectures.

           --ffdduummpp--rrttll--ssttaacckk
               Dump after conversion from GCC's "flat register
               file" registers to the x87's stack-like registers.
               This pass is only run on x86 variants.

           --ffdduummpp--rrttll--ssuubbrreegg11
           --ffdduummpp--rrttll--ssuubbrreegg22
               --ffdduummpp--rrttll--ssuubbrreegg11 and --ffdduummpp--rrttll--ssuubbrreegg22 enable
               dumping after the two subreg expansion passes.

           --ffdduummpp--rrttll--uunnsshhaarree
               Dump after all rtl has been unshared.

           --ffdduummpp--rrttll--vvaarrttrraacckk
               Dump after variable tracking.

           --ffdduummpp--rrttll--vvrreeggss
               Dump after converting virtual registers to hard
               registers.

           --ffdduummpp--rrttll--wweebb
               Dump after live range splitting.

           --ffdduummpp--rrttll--rreeggccllaassss
           --ffdduummpp--rrttll--ssuubbrreeggss__ooff__mmooddee__iinniitt
           --ffdduummpp--rrttll--ssuubbrreeggss__ooff__mmooddee__ffiinniisshh
           --ffdduummpp--rrttll--ddffiinniitt
           --ffdduummpp--rrttll--ddffiinniisshh
               These dumps are defined but always produce empty
               files.

           --ddaa
           --ffdduummpp--rrttll--aallll
               Produce all the dumps listed above.



gcc-4.74                    2014-06-12                         92





GCC(1)                         GNU                         GCC(1)


           --ddAA Annotate the assembler output with miscellaneous
               debugging information.

           --ddDD Dump all macro definitions, at the end of
               preprocessing, in addition to normal output.

           --ddHH Produce a core dump whenever an error occurs.

           --ddpp Annotate the assembler output with a comment
               indicating which pattern and alternative was used.
               The length of each instruction is also printed.

           --ddPP Dump the RTL in the assembler output as a comment
               before each instruction.  Also turns on --ddpp
               annotation.

           --ddvv For each of the other indicated dump files
               (--ffdduummpp--rrttll--_p_a_s_s), dump a representation of the
               control flow graph suitable for viewing with VCG
               to _f_i_l_e_._p_a_s_s_._v_c_g.

           --ddxx Just generate RTL for a function instead of
               compiling it.  Usually used with
               --ffdduummpp--rrttll--eexxppaanndd.

       --ffdduummpp--nnooaaddddrr
           When doing debugging dumps, suppress address output.
           This makes it more feasible to use diff on debugging
           dumps for compiler invocations with different compiler
           binaries and/or different text / bss / data / heap /
           stack / dso start locations.

       --ffdduummpp--uunnnnuummbbeerreedd
           When doing debugging dumps, suppress instruction
           numbers and address output.  This makes it more
           feasible to use diff on debugging dumps for compiler
           invocations with different options, in particular with
           and without --gg.

       --ffdduummpp--uunnnnuummbbeerreedd--lliinnkkss
           When doing debugging dumps (see --dd option above),
           suppress instruction numbers for the links to the
           previous and next instructions in a sequence.

       --ffdduummpp--ttrraannssllaattiioonn--uunniitt (C++ only)
       --ffdduummpp--ttrraannssllaattiioonn--uunniitt--_o_p_t_i_o_n_s (C++ only)
           Dump a representation of the tree structure for the
           entire translation unit to a file.  The file name is
           made by appending _._t_u to the source file name, and the
           file is created in the same directory as the output
           file.  If the --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s controls
           the details of the dump as described for the
           --ffdduummpp--ttrreeee options.




gcc-4.74                    2014-06-12                         93





GCC(1)                         GNU                         GCC(1)


       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy (C++ only)
       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy--_o_p_t_i_o_n_s (C++ only)
           Dump a representation of each class's hierarchy and
           virtual function table layout to a file.  The file
           name is made by appending _._c_l_a_s_s to the source file
           name, and the file is created in the same directory as
           the output file.  If the --_o_p_t_i_o_n_s form is used,
           _o_p_t_i_o_n_s controls the details of the dump as described
           for the --ffdduummpp--ttrreeee options.

       --ffdduummpp--iippaa--_s_w_i_t_c_h
           Control the dumping at various stages of inter-
           procedural analysis language tree to a file.  The file
           name is generated by appending a switch specific
           suffix to the source file name, and the file is
           created in the same directory as the output file.  The
           following dumps are possible:

           aallll Enables all inter-procedural analysis dumps.

           ccggrraapphh
               Dumps information about call-graph optimization,
               unused function removal, and inlining decisions.

           iinnlliinnee
               Dump after function inlining.

       --ffdduummpp--ppaasssseess
           Dump the list of optimization passes that are turned
           on and off by the current command-line options.

       --ffdduummpp--ssttaattiissttiiccss--_o_p_t_i_o_n
           Enable and control dumping of pass statistics in a
           separate file.  The file name is generated by
           appending a suffix ending in ..ssttaattiissttiiccss to the source
           file name, and the file is created in the same
           directory as the output file.  If the --_o_p_t_i_o_n form is
           used, --ssttaattss will cause counters to be summed over the
           whole compilation unit while --ddeettaaiillss will dump every
           event as the passes generate them.  The default with
           no option is to sum counters for each function
           compiled.

       --ffdduummpp--ttrreeee--_s_w_i_t_c_h
       --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s
           Control the dumping at various stages of processing
           the intermediate language tree to a file.  The file
           name is generated by appending a switch specific
           suffix to the source file name, and the file is
           created in the same directory as the output file.  If
           the --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s is a list of --
           separated options which control the details of the
           dump.  Not all options are applicable to all dumps;
           those that are not meaningful will be ignored.  The



gcc-4.74                    2014-06-12                         94





GCC(1)                         GNU                         GCC(1)


           following options are available

           aaddddrreessss
               Print the address of each node.  Usually this is
               not meaningful as it changes according to the
               environment and source file.  Its primary use is
               for tying up a dump file with a debug environment.

           aassmmnnaammee
               If "DECL_ASSEMBLER_NAME" has been set for a given
               decl, use that in the dump instead of "DECL_NAME".
               Its primary use is ease of use working backward
               from mangled names in the assembly file.

           sslliimm
               Inhibit dumping of members of a scope or body of a
               function merely because that scope has been
               reached.  Only dump such items when they are
               directly reachable by some other path.  When
               dumping pretty-printed trees, this option inhibits
               dumping the bodies of control structures.

           rraaww Print a raw representation of the tree.  By
               default, trees are pretty-printed into a C-like
               representation.

           ddeettaaiillss
               Enable more detailed dumps (not honored by every
               dump option).

           ssttaattss
               Enable dumping various statistics about the pass
               (not honored by every dump option).

           bblloocckkss
               Enable showing basic block boundaries (disabled in
               raw dumps).

           vvooppss
               Enable showing virtual operands for every
               statement.

           lliinneennoo
               Enable showing line numbers for statements.

           uuiidd Enable showing the unique ID ("DECL_UID") for each
               variable.

           vveerrbboossee
               Enable showing the tree dump for each statement.

           eehh  Enable showing the EH region number holding each
               statement.




gcc-4.74                    2014-06-12                         95





GCC(1)                         GNU                         GCC(1)


           sscceevv
               Enable showing scalar evolution analysis details.

           aallll Turn on all options, except rraaww, sslliimm, vveerrbboossee and
               lliinneennoo.

           The following tree dumps are possible:

           oorriiggiinnaall
               Dump before any tree based optimization, to
               _f_i_l_e_._o_r_i_g_i_n_a_l.

           ooppttiimmiizzeedd
               Dump after all tree based optimization, to
               _f_i_l_e_._o_p_t_i_m_i_z_e_d.

           ggiimmppllee
               Dump each function before and after the
               gimplification pass to a file.  The file name is
               made by appending _._g_i_m_p_l_e to the source file name.

           ccffgg Dump the control flow graph of each function to a
               file.  The file name is made by appending _._c_f_g to
               the source file name.

           vvccgg Dump the control flow graph of each function to a
               file in VCG format.  The file name is made by
               appending _._v_c_g to the source file name.  Note that
               if the file contains more than one function, the
               generated file cannot be used directly by VCG.
               You will need to cut and paste each function's
               graph into its own separate file first.

           cchh  Dump each function after copying loop headers.
               The file name is made by appending _._c_h to the
               source file name.

           ssssaa Dump SSA related information to a file.  The file
               name is made by appending _._s_s_a to the source file
               name.

           aalliiaass
               Dump aliasing information for each function.  The
               file name is made by appending _._a_l_i_a_s to the
               source file name.

           ccccpp Dump each function after CCP.  The file name is
               made by appending _._c_c_p to the source file name.

           ssttoorreeccccpp
               Dump each function after STORE-CCP.  The file name
               is made by appending _._s_t_o_r_e_c_c_p to the source file
               name.




gcc-4.74                    2014-06-12                         96





GCC(1)                         GNU                         GCC(1)


           pprree Dump trees after partial redundancy elimination.
               The file name is made by appending _._p_r_e to the
               source file name.

           ffrree Dump trees after full redundancy elimination.  The
               file name is made by appending _._f_r_e to the source
               file name.

           ccooppyypprroopp
               Dump trees after copy propagation.  The file name
               is made by appending _._c_o_p_y_p_r_o_p to the source file
               name.

           ssttoorree__ccooppyypprroopp
               Dump trees after store copy-propagation.  The file
               name is made by appending _._s_t_o_r_e___c_o_p_y_p_r_o_p to the
               source file name.

           ddccee Dump each function after dead code elimination.
               The file name is made by appending _._d_c_e to the
               source file name.

           mmuuddffllaapp
               Dump each function after adding mudflap
               instrumentation.  The file name is made by
               appending _._m_u_d_f_l_a_p to the source file name.

           ssrraa Dump each function after performing scalar
               replacement of aggregates.  The file name is made
               by appending _._s_r_a to the source file name.

           ssiinnkk
               Dump each function after performing code sinking.
               The file name is made by appending _._s_i_n_k to the
               source file name.

           ddoomm Dump each function after applying dominator tree
               optimizations.  The file name is made by appending
               _._d_o_m to the source file name.

           ddssee Dump each function after applying dead store
               elimination.  The file name is made by appending
               _._d_s_e to the source file name.

           pphhiioopptt
               Dump each function after optimizing PHI nodes into
               straightline code.  The file name is made by
               appending _._p_h_i_o_p_t to the source file name.

           ffoorrwwpprroopp
               Dump each function after forward propagating
               single use variables.  The file name is made by
               appending _._f_o_r_w_p_r_o_p to the source file name.




gcc-4.74                    2014-06-12                         97





GCC(1)                         GNU                         GCC(1)


           ccooppyyrreennaammee
               Dump each function after applying the copy rename
               optimization.  The file name is made by appending
               _._c_o_p_y_r_e_n_a_m_e to the source file name.

           nnrrvv Dump each function after applying the named return
               value optimization on generic trees.  The file
               name is made by appending _._n_r_v to the source file
               name.

           vveecctt
               Dump each function after applying vectorization of
               loops.  The file name is made by appending _._v_e_c_t
               to the source file name.

           ssllpp Dump each function after applying vectorization of
               basic blocks.  The file name is made by appending
               _._s_l_p to the source file name.

           vvrrpp Dump each function after Value Range Propagation
               (VRP).  The file name is made by appending _._v_r_p to
               the source file name.

           aallll Enable all the available tree dumps with the flags
               provided in this option.

       --ffttrreeee--vveeccttoorriizzeerr--vveerrbboossee==_n
           This option controls the amount of debugging output
           the vectorizer prints.  This information is written to
           standard error, unless --ffdduummpp--ttrreeee--aallll or
           --ffdduummpp--ttrreeee--vveecctt is specified, in which case it is
           output to the usual dump listing file, _._v_e_c_t.  For _n=0
           no diagnostic information is reported.  If _n=1 the
           vectorizer reports each loop that got vectorized, and
           the total number of loops that got vectorized.  If _n=2
           the vectorizer also reports non-vectorized loops that
           passed the first analysis phase
           (vect_analyze_loop_form) - i.e. countable, inner-most,
           single-bb, single-entry/exit loops.  This is the same
           verbosity level that --ffdduummpp--ttrreeee--vveecctt--ssttaattss uses.
           Higher verbosity levels mean either more information
           dumped for each reported loop, or same amount of
           information reported for more loops: if _n=3,
           vectorizer cost model information is reported.  If
           _n=4, alignment related information is added to the
           reports.  If _n=5, data-references related information
           (e.g. memory dependences, memory access-patterns) is
           added to the reports.  If _n=6, the vectorizer reports
           also non-vectorized inner-most loops that did not pass
           the first analysis phase (i.e., may not be countable,
           or may have complicated control-flow).  If _n=7, the
           vectorizer reports also non-vectorized nested loops.
           If _n=8, SLP related information is added to the
           reports.  For _n=9, all the information the vectorizer



gcc-4.74                    2014-06-12                         98





GCC(1)                         GNU                         GCC(1)


           generates during its analysis and transformation is
           reported.  This is the same verbosity level that
           --ffdduummpp--ttrreeee--vveecctt--ddeettaaiillss uses.

       --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g
           This option provides a seed that GCC uses when it
           would otherwise use random numbers.  It is used to
           generate certain symbol names that have to be
           different in every compiled file.  It is also used to
           place unique stamps in coverage data files and the
           object files that produce them.  You can use the
           --ffrraannddoomm--sseeeedd option to produce reproducibly identical
           object files.

           The _s_t_r_i_n_g should be different for every file you
           compile.

       --ffsscchheedd--vveerrbboossee==_n
           On targets that use instruction scheduling, this
           option controls the amount of debugging output the
           scheduler prints.  This information is written to
           standard error, unless --ffdduummpp--rrttll--sscchheedd11 or
           --ffdduummpp--rrttll--sscchheedd22 is specified, in which case it is
           output to the usual dump listing file, _._s_c_h_e_d_1 or
           _._s_c_h_e_d_2 respectively.  However for _n greater than
           nine, the output is always printed to standard error.

           For _n greater than zero, --ffsscchheedd--vveerrbboossee outputs the
           same information as --ffdduummpp--rrttll--sscchheedd11 and
           --ffdduummpp--rrttll--sscchheedd22.  For _n greater than one, it also
           output basic block probabilities, detailed ready list
           information and unit/insn info.  For _n greater than
           two, it includes RTL at abort point, control-flow and
           regions info.  And for _n over four, --ffsscchheedd--vveerrbboossee
           also includes dependence info.

       --ssaavvee--tteemmppss
       --ssaavvee--tteemmppss==ccwwdd
           Store the usual "temporary" intermediate files
           permanently; place them in the current directory and
           name them based on the source file.  Thus, compiling
           _f_o_o_._c with --cc --ssaavvee--tteemmppss would produce files _f_o_o_._i
           and _f_o_o_._s, as well as _f_o_o_._o.  This creates a
           preprocessed _f_o_o_._i output file even though the
           compiler now normally uses an integrated preprocessor.

           When used in combination with the --xx command-line
           option, --ssaavvee--tteemmppss is sensible enough to avoid over
           writing an input source file with the same extension
           as an intermediate file.  The corresponding
           intermediate file may be obtained by renaming the
           source file before using --ssaavvee--tteemmppss.

           If you invoke GCC in parallel, compiling several



gcc-4.74                    2014-06-12                         99





GCC(1)                         GNU                         GCC(1)


           different source files that share a common base name
           in different subdirectories or the same source file
           compiled for multiple output destinations, it is
           likely that the different parallel compilers will
           interfere with each other, and overwrite the temporary
           files.  For instance:

                   gcc -save-temps -o outdir1/foo.o indir1/foo.c&
                   gcc -save-temps -o outdir2/foo.o indir2/foo.c&

           may result in _f_o_o_._i and _f_o_o_._o being written to
           simultaneously by both compilers.

       --ssaavvee--tteemmppss==oobbjj
           Store the usual "temporary" intermediate files
           permanently.  If the --oo option is used, the temporary
           files are based on the object file.  If the --oo option
           is not used, the --ssaavvee--tteemmppss==oobbjj switch behaves like
           --ssaavvee--tteemmppss.

           For example:

                   gcc -save-temps=obj -c foo.c
                   gcc -save-temps=obj -c bar.c -o dir/xbar.o
                   gcc -save-temps=obj foobar.c -o dir2/yfoobar

           would create _f_o_o_._i, _f_o_o_._s, _d_i_r_/_x_b_a_r_._i, _d_i_r_/_x_b_a_r_._s,
           _d_i_r_2_/_y_f_o_o_b_a_r_._i, _d_i_r_2_/_y_f_o_o_b_a_r_._s, and _d_i_r_2_/_y_f_o_o_b_a_r_._o.

       --ttiimmee[==_f_i_l_e]
           Report the CPU time taken by each subprocess in the
           compilation sequence.  For C source files, this is the
           compiler proper and assembler (plus the linker if
           linking is done).

           Without the specification of an output file, the
           output looks like this:

                   # cc1 0.12 0.01
                   # as 0.00 0.01

           The first number on each line is the "user time", that
           is time spent executing the program itself.  The
           second number is "system time", time spent executing
           operating system routines on behalf of the program.
           Both numbers are in seconds.

           With the specification of an output file, the output
           is appended to the named file, and it looks like this:

                   0.12 0.01 cc1 <options>
                   0.00 0.01 as <options>

           The "user time" and the "system time" are moved before



gcc-4.74                    2014-06-12                        100





GCC(1)                         GNU                         GCC(1)


           the program name, and the options passed to the
           program are displayed, so that one can later tell what
           file was being compiled, and with which options.

       --ffvvaarr--ttrraacckkiinngg
           Run variable tracking pass.  It computes where
           variables are stored at each position in code.  Better
           debugging information is then generated (if the
           debugging information format supports this
           information).

           It is enabled by default when compiling with
           optimization (--OOss, --OO, --OO22, ...), debugging
           information (--gg) and the debug info format supports
           it.

       --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss
           Annotate assignments to user variables early in the
           compilation and attempt to carry the annotations over
           throughout the compilation all the way to the end, in
           an attempt to improve debug information while
           optimizing.  Use of --ggddwwaarrff--44 is recommended along
           with it.

           It can be enabled even if var-tracking is disabled, in
           which case annotations will be created and maintained,
           but discarded at the end.

       --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss--ttooggggllee
           Toggle --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss, in the same way
           that --ggttooggggllee toggles --gg.

       --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y
           Print the full absolute name of the library file
           _l_i_b_r_a_r_y that would be used when linking---and don't do
           anything else.  With this option, GCC does not compile
           or link anything; it just prints the file name.

       --pprriinntt--mmuullttii--ddiirreeccttoorryy
           Print the directory name corresponding to the multilib
           selected by any other switches present in the command
           line.  This directory is supposed to exist in
           GGCCCC__EEXXEECC__PPRREEFFIIXX.

       --pprriinntt--mmuullttii--lliibb
           Print the mapping from multilib directory names to
           compiler switches that enable them.  The directory
           name is separated from the switches by ;;, and each
           switch starts with an @@ instead of the --, without
           spaces between multiple switches.  This is supposed to
           ease shell-processing.

       --pprriinntt--mmuullttii--ooss--ddiirreeccttoorryy
           Print the path to OS libraries for the selected



gcc-4.74                    2014-06-12                        101





GCC(1)                         GNU                         GCC(1)


           multilib, relative to some _l_i_b subdirectory.  If OS
           libraries are present in the _l_i_b subdirectory and no
           multilibs are used, this is usually just _., if OS
           libraries are present in _l_i_b_s_u_f_f_i_x sibling directories
           this prints e.g. _._._/_l_i_b_6_4, _._._/_l_i_b or _._._/_l_i_b_3_2, or if
           OS libraries are present in _l_i_b_/_s_u_b_d_i_r subdirectories
           it prints e.g. _a_m_d_6_4, _s_p_a_r_c_v_9 or _e_v_6.

       --pprriinntt--mmuullttiiaarrcchh
           Print the path to OS libraries for the selected
           multiarch, relative to some _l_i_b subdirectory.

       --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
           Like --pprriinntt--ffiillee--nnaammee, but searches for a program such
           as ccpppp.

       --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           Same as --pprriinntt--ffiillee--nnaammee==lliibbggcccc..aa.

           This is useful when you use --nnoossttddlliibb or
           --nnooddeeffaauullttlliibbss but you do want to link with _l_i_b_g_c_c_._a.
           You can do

                   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`

       --pprriinntt--sseeaarrcchh--ddiirrss
           Print the name of the configured installation
           directory and a list of program and library
           directories ggcccc will search---and don't do anything
           else.

           This is useful when ggcccc prints the error message
           iinnssttaallllaattiioonn pprroobblleemm,, ccaannnnoott eexxeecc ccpppp00:: NNoo ssuucchh ffiillee
           oorr ddiirreeccttoorryy.  To resolve this you either need to put
           _c_p_p_0 and the other compiler components where ggcccc
           expects to find them, or you can set the environment
           variable GGCCCC__EEXXEECC__PPRREEFFIIXX to the directory where you
           installed them.  Don't forget the trailing //.

       --pprriinntt--ssyyssrroooott
           Print the target sysroot directory that will be used
           during compilation.  This is the target sysroot
           specified either at configure time or using the
           ----ssyyssrroooott option, possibly with an extra suffix that
           depends on compilation options.  If no target sysroot
           is specified, the option prints nothing.

       --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx
           Print the suffix added to the target sysroot when
           searching for headers, or give an error if the
           compiler is not configured with such a suffix---and
           don't do anything else.





gcc-4.74                    2014-06-12                        102





GCC(1)                         GNU                         GCC(1)


       --dduummppmmaacchhiinnee
           Print the compiler's target machine (for example,
           ii668866--ppcc--lliinnuuxx--ggnnuu)---and don't do anything else.

       --dduummppvveerrssiioonn
           Print the compiler version (for example, 33..00)---and
           don't do anything else.

       --dduummppssppeeccss
           Print the compiler's built-in specs---and don't do
           anything else.  (This is used when GCC itself is being
           built.)

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           Normally, when producing DWARF2 output, GCC will emit
           debugging information for all types declared in a
           compilation unit, regardless of whether or not they
           are actually used in that compilation unit.  Sometimes
           this is useful, such as if, in the debugger, you want
           to cast a value to a type that is not actually used in
           your program (but is declared).  More often, however,
           this results in a significant amount of wasted space.
           With this option, GCC will avoid producing debug
           symbol output for types that are nowhere used in the
           source file being compiled.

       OOppttiioonnss TThhaatt CCoonnttrrooll OOppttiimmiizzaattiioonn

       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to
       reduce the cost of compilation and to make debugging
       produce the expected results.  Statements are independent:
       if you stop the program with a breakpoint between
       statements, you can then assign a new value to any
       variable or change the program counter to any other
       statement in the function and get exactly the results you
       would expect from the source code.

       Turning on optimization flags makes the compiler attempt
       to improve the performance and/or code size at the expense
       of compilation time and possibly the ability to debug the
       program.

       The compiler performs optimization based on the knowledge
       it has of the program.  Compiling multiple files at once
       to a single output file mode allows the compiler to use
       information gained from all of the files when compiling
       each of them.

       Not all optimizations are controlled directly by a flag.
       Only optimizations that have a flag are listed in this
       section.




gcc-4.74                    2014-06-12                        103





GCC(1)                         GNU                         GCC(1)


       Most optimizations are only enabled if an --OO level is set
       on the command line.  Otherwise they are disabled, even if
       individual optimization flags are specified.

       Depending on the target and how GCC was configured, a
       slightly different set of optimizations may be enabled at
       each --OO level than those listed here.  You can invoke GCC
       with --QQ ----hheellpp==ooppttiimmiizzeerrss to find out the exact set of
       optimizations that are enabled at each level.

       --OO
       --OO11 Optimize.  Optimizing compilation takes somewhat more
           time, and a lot more memory for a large function.

           With --OO, the compiler tries to reduce code size and
           execution time, without performing any optimizations
           that take a great deal of compilation time.

           --OO turns on the following optimization flags:

           --ffaauuttoo--iinncc--ddeecc --ffccoommppaarree--eelliimm --ffccpprroopp--rreeggiisstteerrss --ffddccee
           --ffddeeffeerr--ppoopp --ffddeellaayyeedd--bbrraanncchh --ffddssee
           --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffiiff--ccoonnvveerrssiioonn22
           --ffiiff--ccoonnvveerrssiioonn --ffiippaa--ppuurree--ccoonnsstt --ffiippaa--pprrooffiillee
           --ffiippaa--rreeffeerreennccee --ffmmeerrggee--ccoonnssttaannttss --ffsspplliitt--wwiiddee--ttyyppeess
           --ffttrreeee--bbiitt--ccccpp --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee --ffttrreeee--ccccpp
           --ffttrreeee--cchh --ffttrreeee--ccooppyyrreennaammee --ffttrreeee--ddccee
           --ffttrreeee--ddoommiinnaattoorr--ooppttss --ffttrreeee--ddssee --ffttrreeee--ffoorrwwpprroopp
           --ffttrreeee--ffrree --ffttrreeee--pphhiipprroopp --ffttrreeee--ssrraa --ffttrreeee--ppttaa
           --ffttrreeee--tteerr --ffuunniitt--aatt--aa--ttiimmee

           --OO also turns on --ffoommiitt--ffrraammee--ppooiinntteerr on machines
           where doing so does not interfere with debugging.

       --OO22 Optimize even more.  GCC performs nearly all supported
           optimizations that do not involve a space-speed
           tradeoff.  As compared to --OO, this option increases
           both compilation time and the performance of the
           generated code.

           --OO22 turns on all optimization flags specified by --OO.
           It also turns on the following optimization flags:
           --fftthhrreeaadd--jjuummppss --ffaalliiggnn--ffuunnccttiioonnss  --ffaalliiggnn--jjuummppss
           --ffaalliiggnn--llooooppss  --ffaalliiggnn--llaabbeellss --ffccaalllleerr--ssaavveess
           --ffccrroossssjjuummppiinngg --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffddeevviirrttuuaalliizzee
           --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss --ffggccssee  --ffggccssee--llmm
           --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss --ffiinnddiirreecctt--iinnlliinniinngg --ffiippaa--ssrraa
           --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffppaarrttiiaall--iinnlliinniinngg
           --ffppeeeepphhoollee22 --ffrreeggmmoovvee --ffrreeoorrddeerr--bblloocckkss
           --ffrreeoorrddeerr--ffuunnccttiioonnss --ffrreerruunn--ccssee--aafftteerr--lloooopp
           --ffsscchheedd--iinntteerrbblloocckk  --ffsscchheedd--ssppeecc --ffsscchheedduullee--iinnssnnss
           --ffsscchheedduullee--iinnssnnss22 --ffssttrriicctt--aalliiaassiinngg --ffssttrriicctt--oovveerrffllooww
           --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn --ffttrreeee--ttaaiill--mmeerrggee --ffttrreeee--pprree



gcc-4.74                    2014-06-12                        104





GCC(1)                         GNU                         GCC(1)


           --ffttrreeee--vvrrpp

           Please note the warning under --ffggccssee about invoking
           --OO22 on programs that use computed gotos.

       --OO33 Optimize yet more.  --OO33 turns on all optimizations
           specified by --OO22 and also turns on the
           --ffiinnlliinnee--ffuunnccttiioonnss, --ffuunnsswwiittcchh--llooooppss,
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg, --ffggccssee--aafftteerr--rreellooaadd,
           --ffttrreeee--vveeccttoorriizzee and --ffiippaa--ccpp--cclloonnee options.

       --OO00 Reduce compilation time and make debugging produce the
           expected results.  This is the default.

       --OOss Optimize for size.  --OOss enables all --OO22 optimizations
           that do not typically increase code size.  It also
           performs further optimizations designed to reduce code
           size.

           --OOss disables the following optimization flags:
           --ffaalliiggnn--ffuunnccttiioonnss  --ffaalliiggnn--jjuummppss  --ffaalliiggnn--llooooppss
           --ffaalliiggnn--llaabbeellss  --ffrreeoorrddeerr--bblloocckkss
           --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn

       --OOffaasstt
           Disregard strict standards compliance.  --OOffaasstt enables
           all --OO33 optimizations.  It also enables optimizations
           that are not valid for all standard compliant
           programs.  It turns on --ffffaasstt--mmaatthh and the Fortran-
           specific --ffnnoo--pprrootteecctt--ppaarreennss and --ffssttaacckk--aarrrraayyss.

           If you use multiple --OO options, with or without level
           numbers, the last such option is the one that is
           effective.

       Options of the form --ff_f_l_a_g specify machine-independent
       flags.  Most flags have both positive and negative forms;
       the negative form of --ffffoooo would be --ffnnoo--ffoooo.  In the
       table below, only one of the forms is listed---the one you
       typically will use.  You can figure out the other form by
       either removing nnoo-- or adding it.

       The following options control specific optimizations.
       They are either activated by --OO options or are related to
       ones that are.  You can use the following flags in the
       rare cases when "fine-tuning" of optimizations to be
       performed is desired.

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
           Do not make member functions inline by default merely
           because they are defined inside the class scope (C++
           only).  Otherwise, when you specify --OO, member
           functions defined inside class scope are compiled



gcc-4.74                    2014-06-12                        105





GCC(1)                         GNU                         GCC(1)


           inline by default; i.e., you don't need to add iinnlliinnee
           in front of the member function name.

       --ffnnoo--ddeeffeerr--ppoopp
           Always pop the arguments to each function call as soon
           as that function returns.  For machines that must pop
           arguments after a function call, the compiler normally
           lets arguments accumulate on the stack for several
           function calls and pops them all at once.

           Disabled at levels --OO, --OO22, --OO33, --OOss.

       --ffffoorrwwaarrdd--pprrooppaaggaattee
           Perform a forward propagation pass on RTL.  The pass
           tries to combine two instructions and checks if the
           result can be simplified.  If loop unrolling is
           active, two passes are performed and the second is
           scheduled after loop unrolling.

           This option is enabled by default at optimization
           levels --OO, --OO22, --OO33, --OOss.

       --ffffpp--ccoonnttrraacctt==_s_t_y_l_e
           --ffffpp--ccoonnttrraacctt==ooffff disables floating-point expression
           contraction.  --ffffpp--ccoonnttrraacctt==ffaasstt enables floating-
           point expression contraction such as forming of fused
           multiply-add operations if the target has native
           support for them.  --ffffpp--ccoonnttrraacctt==oonn enables floating-
           point expression contraction if allowed by the
           language standard.  This is currently not implemented
           and treated equal to --ffffpp--ccoonnttrraacctt==ooffff.

           The default is --ffffpp--ccoonnttrraacctt==ffaasstt.

       --ffoommiitt--ffrraammee--ppooiinntteerr
           Don't keep the frame pointer in a register for
           functions that don't need one.  This avoids the
           instructions to save, set up and restore frame
           pointers; it also makes an extra register available in
           many functions.  IItt aallssoo mmaakkeess ddeebbuuggggiinngg iimmppoossssiibbllee oonn
           ssoommee mmaacchhiinneess..

           On some machines, such as the VAX, this flag has no
           effect, because the standard calling sequence
           automatically handles the frame pointer and nothing is
           saved by pretending it doesn't exist.  The machine-
           description macro "FRAME_POINTER_REQUIRED" controls
           whether a target machine supports this flag.

           Starting with GCC version 4.6, the default setting
           (when not optimizing for size) for 32-bit Linux x86
           and 32-bit Darwin x86 targets has been changed to
           --ffoommiitt--ffrraammee--ppooiinntteerr.  The default can be reverted to
           --ffnnoo--oommiitt--ffrraammee--ppooiinntteerr by configuring GCC with the



gcc-4.74                    2014-06-12                        106





GCC(1)                         GNU                         GCC(1)


           ----eennaabbllee--ffrraammee--ppooiinntteerr configure option.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss
           Optimize sibling and tail recursive calls.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--iinnlliinnee
           Do not expand any functions inline apart from those
           marked with the "always_inline" attribute.  This is
           the default when not optimizing.

           Single functions can be exempted from inlining by
           marking them with the "noinline" attribute.

       --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss
           Integrate functions into their callers when their body
           is smaller than expected function call code (so
           overall size of program gets smaller).  The compiler
           heuristically decides which functions are simple
           enough to be worth integrating in this way.  This
           inlining applies to all functions, even those not
           declared inline.

           Enabled at level --OO22.

       --ffiinnddiirreecctt--iinnlliinniinngg
           Inline also indirect calls that are discovered to be
           known at compile time thanks to previous inlining.
           This option has any effect only when inlining itself
           is turned on by the --ffiinnlliinnee--ffuunnccttiioonnss or
           --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss options.

           Enabled at level --OO22.

       --ffiinnlliinnee--ffuunnccttiioonnss
           Consider all functions for inlining, even if they are
           not declared inline.  The compiler heuristically
           decides which functions are worth integrating in this
           way.

           If all calls to a given function are integrated, and
           the function is declared "static", then the function
           is normally not output as assembler code in its own
           right.

           Enabled at level --OO33.

       --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee
           Consider all "static" functions called once for
           inlining into their caller even if they are not marked
           "inline".  If a call to a given function is



gcc-4.74                    2014-06-12                        107





GCC(1)                         GNU                         GCC(1)


           integrated, then the function is not output as
           assembler code in its own right.

           Enabled at levels --OO11, --OO22, --OO33 and --OOss.

       --ffeeaarrllyy--iinnlliinniinngg
           Inline functions marked by "always_inline" and
           functions whose body seems smaller than the function
           call overhead early before doing --ffpprrooffiillee--ggeenneerraattee
           instrumentation and real inlining pass.  Doing so
           makes profiling significantly cheaper and usually
           inlining faster on programs having large chains of
           nested wrapper functions.

           Enabled by default.

       --ffiippaa--ssrraa
           Perform interprocedural scalar replacement of
           aggregates, removal of unused parameters and
           replacement of parameters passed by reference by
           parameters passed by value.

           Enabled at levels --OO22, --OO33 and --OOss.

       --ffiinnlliinnee--lliimmiitt==_n
           By default, GCC limits the size of functions that can
           be inlined.  This flag allows coarse control of this
           limit.  _n is the size of functions that can be inlined
           in number of pseudo instructions.

           Inlining is actually controlled by a number of
           parameters, which may be specified individually by
           using ----ppaarraamm _n_a_m_e==_v_a_l_u_e.  The --ffiinnlliinnee--lliimmiitt==_n option
           sets some of these parameters as follows:

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               is set to _n/2.

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               is set to _n/2.

           See below for a documentation of the individual
           parameters controlling inlining and for the defaults
           of these parameters.

           _N_o_t_e_: there may be no value to --ffiinnlliinnee--lliimmiitt that
           results in default behavior.

           _N_o_t_e_: pseudo instruction represents, in this
           particular context, an abstract measurement of
           function's size.  In no way does it represent a count
           of assembly instructions and as such its exact meaning
           might change from one release to an another.




gcc-4.74                    2014-06-12                        108





GCC(1)                         GNU                         GCC(1)


       --ffnnoo--kkeeeepp--iinnlliinnee--ddlllleexxppoorrtt
           This is a more fine-grained version of
           --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss, which applies only to
           functions that are declared using the "dllexport"
           attribute or declspec

       --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
           In C, emit "static" functions that are declared
           "inline" into the object file, even if the function
           has been inlined into all of its callers.  This switch
           does not affect functions using the "extern inline"
           extension in GNU C90.  In C++, emit any and all inline
           functions into the object file.

       --ffkkeeeepp--ssttaattiicc--ccoonnssttss
           Emit variables declared "static const" when
           optimization isn't turned on, even if the variables
           aren't referenced.

           GCC enables this option by default.  If you want to
           force the compiler to check if the variable was
           referenced, regardless of whether or not optimization
           is turned on, use the --ffnnoo--kkeeeepp--ssttaattiicc--ccoonnssttss option.

       --ffmmeerrggee--ccoonnssttaannttss
           Attempt to merge identical constants (string constants
           and floating-point constants) across compilation
           units.

           This option is the default for optimized compilation
           if the assembler and linker support it.  Use
           --ffnnoo--mmeerrggee--ccoonnssttaannttss to inhibit this behavior.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffmmeerrggee--aallll--ccoonnssttaannttss
           Attempt to merge identical constants and identical
           variables.

           This option implies --ffmmeerrggee--ccoonnssttaannttss.  In addition to
           --ffmmeerrggee--ccoonnssttaannttss this considers e.g. even constant
           initialized arrays or initialized constant variables
           with integral or floating-point types.  Languages like
           C or C++ require each variable, including multiple
           instances of the same variable in recursive calls, to
           have distinct locations, so using this option will
           result in non-conforming behavior.

       --ffmmoodduulloo--sscchheedd
           Perform swing modulo scheduling immediately before the
           first scheduling pass.  This pass looks at innermost
           loops and reorders their instructions by overlapping
           different iterations.




gcc-4.74                    2014-06-12                        109





GCC(1)                         GNU                         GCC(1)


       --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess
           Perform more aggressive SMS based modulo scheduling
           with register moves allowed.  By setting this flag
           certain anti-dependences edges will be deleted which
           will trigger the generation of reg-moves based on the
           life-range analysis.  This option is effective only
           with --ffmmoodduulloo--sscchheedd enabled.

       --ffnnoo--bbrraanncchh--ccoouunntt--rreegg
           Do not use "decrement and branch" instructions on a
           count register, but instead generate a sequence of
           instructions that decrement a register, compare it
           against zero, then branch based upon the result.  This
           option is only meaningful on architectures that
           support such instructions, which include x86, PowerPC,
           IA-64 and S/390.

           The default is --ffbbrraanncchh--ccoouunntt--rreegg.

       --ffnnoo--ffuunnccttiioonn--ccssee
           Do not put function addresses in registers; make each
           instruction that calls a constant function contain the
           function's address explicitly.

           This option results in less efficient code, but some
           strange hacks that alter the assembler output may be
           confused by the optimizations performed when this
           option is not used.

           The default is --ffffuunnccttiioonn--ccssee

       --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           If the target supports a BSS section, GCC by default
           puts variables that are initialized to zero into BSS.
           This can save space in the resulting code.

           This option turns off this behavior because some
           programs explicitly rely on variables going to the
           data section.  E.g., so that the resulting executable
           can find the beginning of that section and/or make
           assumptions based on that.

           The default is --ffzzeerroo--iinniittiiaalliizzeedd--iinn--bbssss.

       --ffmmuuddffllaapp --ffmmuuddffllaapptthh --ffmmuuddffllaappiirr
           For front-ends that support it (C and C++), instrument
           all risky pointer/array dereferencing operations, some
           standard library string/heap functions, and some other
           associated constructs with range/validity tests.
           Modules so instrumented should be immune to buffer
           overflows, invalid heap use, and some other classes of
           C/C++ programming errors.  The instrumentation relies
           on a separate runtime library (_l_i_b_m_u_d_f_l_a_p), which will
           be linked into a program if --ffmmuuddffllaapp is given at link



gcc-4.74                    2014-06-12                        110





GCC(1)                         GNU                         GCC(1)


           time.  Run-time behavior of the instrumented program
           is controlled by the MMUUDDFFLLAAPP__OOPPTTIIOONNSS environment
           variable.  See "env MUDFLAP_OPTIONS=-help a.out" for
           its options.

           Use --ffmmuuddffllaapptthh instead of --ffmmuuddffllaapp to compile and to
           link if your program is multi-threaded.  Use
           --ffmmuuddffllaappiirr, in addition to --ffmmuuddffllaapp or --ffmmuuddffllaapptthh,
           if instrumentation should ignore pointer reads.  This
           produces less instrumentation (and therefore faster
           execution) and still provides some protection against
           outright memory corrupting writes, but allows
           erroneously read data to propagate within a program.

       --fftthhrreeaadd--jjuummppss
           Perform optimizations where we check to see if a jump
           branches to a location where another comparison
           subsumed by the first is found.  If so, the first
           branch is redirected to either the destination of the
           second branch or a point immediately following it,
           depending on whether the condition is known to be true
           or false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffsspplliitt--wwiiddee--ttyyppeess
           When using a type that occupies multiple registers,
           such as "long long" on a 32-bit system, split the
           registers apart and allocate them independently.  This
           normally generates better code for those types, but
           may make debugging more difficult.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccssee--ffoollllooww--jjuummppss
           In common subexpression elimination (CSE), scan
           through jump instructions when the target of the jump
           is not reached by any other path.  For example, when
           CSE encounters an "if" statement with an "else"
           clause, CSE will follow the jump when the condition
           tested is false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccssee--sskkiipp--bblloocckkss
           This is similar to --ffccssee--ffoollllooww--jjuummppss, but causes CSE
           to follow jumps that conditionally skip over blocks.
           When CSE encounters a simple "if" statement with no
           else clause, --ffccssee--sskkiipp--bblloocckkss causes CSE to follow
           the jump around the body of the "if".

           Enabled at levels --OO22, --OO33, --OOss.





gcc-4.74                    2014-06-12                        111





GCC(1)                         GNU                         GCC(1)


       --ffrreerruunn--ccssee--aafftteerr--lloooopp
           Re-run common subexpression elimination after loop
           optimizations has been performed.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee
           Perform a global common subexpression elimination
           pass.  This pass also performs global constant and
           copy propagation.

           _N_o_t_e_: When compiling a program using computed gotos, a
           GCC extension, you may get better run-time performance
           if you disable the global common subexpression
           elimination pass by adding --ffnnoo--ggccssee to the command
           line.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee--llmm
           When --ffggccssee--llmm is enabled, global common subexpression
           elimination will attempt to move loads that are only
           killed by stores into themselves.  This allows a loop
           containing a load/store sequence to be changed to a
           load outside the loop, and a copy/store within the
           loop.

           Enabled by default when gcse is enabled.

       --ffggccssee--ssmm
           When --ffggccssee--ssmm is enabled, a store motion pass is run
           after global common subexpression elimination.  This
           pass will attempt to move stores out of loops.  When
           used in conjunction with --ffggccssee--llmm, loops containing a
           load/store sequence can be changed to a load before
           the loop and a store after the loop.

           Not enabled at any optimization level.

       --ffggccssee--llaass
           When --ffggccssee--llaass is enabled, the global common
           subexpression elimination pass eliminates redundant
           loads that come after stores to the same memory
           location (both partial and full redundancies).

           Not enabled at any optimization level.

       --ffggccssee--aafftteerr--rreellooaadd
           When --ffggccssee--aafftteerr--rreellooaadd is enabled, a redundant load
           elimination pass is performed after reload.  The
           purpose of this pass is to cleanup redundant spilling.

       --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           If given, the loop optimizer will assume that loop



gcc-4.74                    2014-06-12                        112





GCC(1)                         GNU                         GCC(1)


           indices do not overflow, and that the loops with
           nontrivial exit condition are not infinite.  This
           enables a wider range of loop optimizations even if
           the loop optimizer itself cannot prove that these
           assumptions are valid.  Using
           --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss, the compiler will warn
           you if it finds this kind of loop.

       --ffccrroossssjjuummppiinngg
           Perform cross-jumping transformation.  This
           transformation unifies equivalent code and save code
           size.  The resulting code may or may not perform
           better than without cross-jumping.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffaauuttoo--iinncc--ddeecc
           Combine increments or decrements of addresses with
           memory accesses.  This pass is always skipped on
           architectures that do not have instructions to support
           this.  Enabled by default at --OO and higher on
           architectures that support this.

       --ffddccee
           Perform dead code elimination (DCE) on RTL.  Enabled
           by default at --OO and higher.

       --ffddssee
           Perform dead store elimination (DSE) on RTL.  Enabled
           by default at --OO and higher.

       --ffiiff--ccoonnvveerrssiioonn
           Attempt to transform conditional jumps into branch-
           less equivalents.  This include use of conditional
           moves, min, max, set flags and abs instructions, and
           some tricks doable by standard arithmetics.  The use
           of conditional execution on chips where it is
           available is controlled by "if-conversion2".

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffiiff--ccoonnvveerrssiioonn22
           Use conditional execution (where available) to
           transform conditional jumps into branch-less
           equivalents.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss
           Assume that programs cannot safely dereference null
           pointers, and that no code or data element resides
           there.  This enables simple constant folding
           optimizations at all optimization levels.  In
           addition, other optimization passes in GCC use this



gcc-4.74                    2014-06-12                        113





GCC(1)                         GNU                         GCC(1)


           flag to control global dataflow analyses that
           eliminate useless checks for null pointers; these
           assume that if a pointer is checked after it has
           already been dereferenced, it cannot be null.

           Note however that in some environments this assumption
           is not true.  Use --ffnnoo--ddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss to
           disable this optimization for programs that depend on
           that behavior.

           Some targets, especially embedded ones, disable this
           option at all levels.  Otherwise it is enabled at all
           levels: --OO00, --OO11, --OO22, --OO33, --OOss.  Passes that use the
           information are enabled independently at different
           optimization levels.

       --ffddeevviirrttuuaalliizzee
           Attempt to convert calls to virtual functions to
           direct calls.  This is done both within a procedure
           and interprocedurally as part of indirect inlining
           ("-findirect-inlining") and interprocedural constant
           propagation (--ffiippaa--ccpp).  Enabled at levels --OO22, --OO33,
           --OOss.

       --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
           Perform a number of minor optimizations that are
           relatively expensive.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffrreeee
           Attempt to remove redundant extension instructions.
           This is especially helpful for the x86-64 architecture
           which implicitly zero-extends in 64-bit registers
           after writing to their lower 32-bit half.

           Enabled for x86 at levels --OO22, --OO33.

       --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee
       --ffrreeggmmoovvee
           Attempt to reassign register numbers in move
           instructions and as operands of other simple
           instructions in order to maximize the amount of
           register tying.  This is especially helpful on
           machines with two-operand instructions.

           Note --ffrreeggmmoovvee and --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee are the
           same optimization.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffiirraa--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m
           Use the specified coloring algorithm for the
           integrated register allocator.  The _a_l_g_o_r_i_t_h_m argument



gcc-4.74                    2014-06-12                        114





GCC(1)                         GNU                         GCC(1)


           can be pprriioorriittyy, which specifies Chow's priority
           coloring, or CCBB, which specifies Chaitin-Briggs
           coloring.  Chaitin-Briggs coloring is not implemented
           for all architectures, but for those targets that do
           support it, it is the default because it generates
           better code.

       --ffiirraa--rreeggiioonn==_r_e_g_i_o_n
           Use specified regions for the integrated register
           allocator.  The _r_e_g_i_o_n argument should be one of the
           following:

           aallll Use all loops as register allocation regions.
               This can give the best results for machines with a
               small and/or irregular register set.

           mmiixxeedd
               Use all loops except for loops with small register
               pressure as the regions.  This value usually gives
               the best results in most cases and for most
               architectures, and is enabled by default when
               compiling with optimization for speed (--OO, --OO22,
               ...).

           oonnee Use all functions as a single region.  This
               typically results in the smallest code size, and
               is enabled by default for --OOss or --OO00.

       --ffiirraa--lloooopp--pprreessssuurree
           Use IRA to evaluate register pressure in loops for
           decisions to move loop invariants.  This option
           usually results in generation of faster and smaller
           code on machines with large register files (>= 32
           registers), but it can slow the compiler down.

           This option is enabled at level --OO33 for some targets.

       --ffnnoo--iirraa--sshhaarree--ssaavvee--sslloottss
           Disable sharing of stack slots used for saving call-
           used hard registers living through a call.  Each hard
           register gets a separate stack slot, and as a result
           function stack frames are larger.

       --ffnnoo--iirraa--sshhaarree--ssppiillll--sslloottss
           Disable sharing of stack slots allocated for
           pseudo-registers.  Each pseudo-register that does not
           get a hard register gets a separate stack slot, and as
           a result function stack frames are larger.

       --ffiirraa--vveerrbboossee==_n
           Control the verbosity of the dump file for the
           integrated register allocator.  The default value is
           5.  If the value _n is greater or equal to 10, the dump
           output is sent to stderr using the same format as _n



gcc-4.74                    2014-06-12                        115





GCC(1)                         GNU                         GCC(1)


           minus 10.

       --ffddeellaayyeedd--bbrraanncchh
           If supported for the target machine, attempt to
           reorder instructions to exploit instruction slots
           available after delayed branch instructions.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss
           If supported for the target machine, attempt to
           reorder instructions to eliminate execution stalls due
           to required data being unavailable.  This helps
           machines that have slow floating point or memory load
           instructions by allowing other instructions to be
           issued until the result of the load or floating-point
           instruction is required.

           Enabled at levels --OO22, --OO33.

       --ffsscchheedduullee--iinnssnnss22
           Similar to --ffsscchheedduullee--iinnssnnss, but requests an
           additional pass of instruction scheduling after
           register allocation has been done.  This is especially
           useful on machines with a relatively small number of
           registers and where memory load instructions take more
           than one cycle.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--sscchheedd--iinntteerrbblloocckk
           Don't schedule instructions across basic blocks.  This
           is normally enabled by default when scheduling before
           register allocation, i.e.  with --ffsscchheedduullee--iinnssnnss or at
           --OO22 or higher.

       --ffnnoo--sscchheedd--ssppeecc
           Don't allow speculative motion of non-load
           instructions.  This is normally enabled by default
           when scheduling before register allocation, i.e.  with
           --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--pprreessssuurree
           Enable register pressure sensitive insn scheduling
           before the register allocation.  This only makes sense
           when scheduling before register allocation is enabled,
           i.e. with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.  Usage
           of this option can improve the generated code and
           decrease its size by preventing register pressure
           increase above the number of available hard registers
           and as a consequence register spills in the register
           allocation.





gcc-4.74                    2014-06-12                        116





GCC(1)                         GNU                         GCC(1)


       --ffsscchheedd--ssppeecc--llooaadd
           Allow speculative motion of some load instructions.
           This only makes sense when scheduling before register
           allocation, i.e. with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.

       --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
           Allow speculative motion of more load instructions.
           This only makes sense when scheduling before register
           allocation, i.e. with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss
       --ffsscchheedd--ssttaalllleedd--iinnssnnss==_n
           Define how many insns (if any) can be moved
           prematurely from the queue of stalled insns into the
           ready list, during the second scheduling pass.
           --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss means that no insns will be
           moved prematurely, --ffsscchheedd--ssttaalllleedd--iinnssnnss==00 means there
           is no limit on how many queued insns can be moved
           prematurely.  --ffsscchheedd--ssttaalllleedd--iinnssnnss without a value is
           equivalent to --ffsscchheedd--ssttaalllleedd--iinnssnnss==11.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp
       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==_n
           Define how many insn groups (cycles) will be examined
           for a dependency on a stalled insn that is candidate
           for premature removal from the queue of stalled insns.
           This has an effect only during the second scheduling
           pass, and only if --ffsscchheedd--ssttaalllleedd--iinnssnnss is used.
           --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss--ddeepp is equivalent to
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==00.
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp without a value is
           equivalent to --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==11.

       --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss
           When scheduling after register allocation, do use
           superblock scheduling algorithm.  Superblock
           scheduling allows motion across basic block boundaries
           resulting on faster schedules.  This option is
           experimental, as not all machine descriptions used by
           GCC model the CPU closely enough to avoid unreliable
           results from the algorithm.

           This only makes sense when scheduling after register
           allocation, i.e. with --ffsscchheedduullee--iinnssnnss22 or at --OO22 or
           higher.

       --ffsscchheedd--ggrroouupp--hheeuurriissttiicc
           Enable the group heuristic in the scheduler.  This
           heuristic favors the instruction that belongs to a
           schedule group.  This is enabled by default when
           scheduling is enabled, i.e. with --ffsscchheedduullee--iinnssnnss or
           --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.



gcc-4.74                    2014-06-12                        117





GCC(1)                         GNU                         GCC(1)


       --ffsscchheedd--ccrriittiiccaall--ppaatthh--hheeuurriissttiicc
           Enable the critical-path heuristic in the scheduler.
           This heuristic favors instructions on the critical
           path.  This is enabled by default when scheduling is
           enabled, i.e. with --ffsscchheedduullee--iinnssnnss or
           --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--iinnssnn--hheeuurriissttiicc
           Enable the speculative instruction heuristic in the
           scheduler.  This heuristic favors speculative
           instructions with greater dependency weakness.  This
           is enabled by default when scheduling is enabled, i.e.
           with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22
           or higher.

       --ffsscchheedd--rraannkk--hheeuurriissttiicc
           Enable the rank heuristic in the scheduler.  This
           heuristic favors the instruction belonging to a basic
           block with greater size or frequency.  This is enabled
           by default when scheduling is enabled, i.e.  with
           --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22 or
           higher.

       --ffsscchheedd--llaasstt--iinnssnn--hheeuurriissttiicc
           Enable the last-instruction heuristic in the
           scheduler.  This heuristic favors the instruction that
           is less dependent on the last instruction scheduled.
           This is enabled by default when scheduling is enabled,
           i.e. with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at
           --OO22 or higher.

       --ffsscchheedd--ddeepp--ccoouunntt--hheeuurriissttiicc
           Enable the dependent-count heuristic in the scheduler.
           This heuristic favors the instruction that has more
           instructions depending on it.  This is enabled by
           default when scheduling is enabled, i.e.  with
           --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22 or
           higher.

       --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss
           The modulo scheduling comes before the traditional
           scheduling, if a loop was modulo scheduled we may want
           to prevent the later scheduling passes from changing
           its schedule, we use this option to control that.

       --ffsseelleeccttiivvee--sscchheedduulliinngg
           Schedule instructions using selective scheduling
           algorithm.  Selective scheduling runs instead of the
           first scheduler pass.

       --ffsseelleeccttiivvee--sscchheedduulliinngg22
           Schedule instructions using selective scheduling
           algorithm.  Selective scheduling runs instead of the
           second scheduler pass.



gcc-4.74                    2014-06-12                        118





GCC(1)                         GNU                         GCC(1)


       --ffsseell--sscchheedd--ppiippeelliinniinngg
           Enable software pipelining of innermost loops during
           selective scheduling.  This option has no effect until
           one of --ffsseelleeccttiivvee--sscchheedduulliinngg or
           --ffsseelleeccttiivvee--sscchheedduulliinngg22 is turned on.

       --ffsseell--sscchheedd--ppiippeelliinniinngg--oouutteerr--llooooppss
           When pipelining loops during selective scheduling,
           also pipeline outer loops.  This option has no effect
           until --ffsseell--sscchheedd--ppiippeelliinniinngg is turned on.

       --ffsshhrriinnkk--wwrraapp
           Emit function prologues only before parts of the
           function that need it, rather than at the top of the
           function.  This flag is enabled by default at --OO and
           higher.

       --ffccaalllleerr--ssaavveess
           Enable values to be allocated in registers that will
           be clobbered by function calls, by emitting extra
           instructions to save and restore the registers around
           such calls.  Such allocation is done only when it
           seems to result in better code than would otherwise be
           produced.

           This option is always enabled by default on certain
           machines, usually those which have no call-preserved
           registers to use instead.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccoommbbiinnee--ssttaacckk--aaddjjuussttmmeennttss
           Tracks stack adjustments (pushes and pops) and stack
           memory references and then tries to find ways to
           combine them.

           Enabled by default at --OO11 and higher.

       --ffccoonnsseerrvvee--ssttaacckk
           Attempt to minimize stack usage.  The compiler will
           attempt to use less stack space, even if that makes
           the program slower.  This option implies setting the
           llaarrggee--ssttaacckk--ffrraammee parameter to 100 and the llaarrggee--
           ssttaacckk--ffrraammee--ggrroowwtthh parameter to 400.

       --ffttrreeee--rreeaassssoocc
           Perform reassociation on trees.  This flag is enabled
           by default at --OO and higher.

       --ffttrreeee--pprree
           Perform partial redundancy elimination (PRE) on trees.
           This flag is enabled by default at --OO22 and --OO33.





gcc-4.74                    2014-06-12                        119





GCC(1)                         GNU                         GCC(1)


       --ffttrreeee--ffoorrwwpprroopp
           Perform forward propagation on trees.  This flag is
           enabled by default at --OO and higher.

       --ffttrreeee--ffrree
           Perform full redundancy elimination (FRE) on trees.
           The difference between FRE and PRE is that FRE only
           considers expressions that are computed on all paths
           leading to the redundant computation.  This analysis
           is faster than PRE, though it exposes fewer
           redundancies.  This flag is enabled by default at --OO
           and higher.

       --ffttrreeee--pphhiipprroopp
           Perform hoisting of loads from conditional pointers on
           trees.  This pass is enabled by default at --OO and
           higher.

       --ffttrreeee--ccooppyy--pprroopp
           Perform copy propagation on trees.  This pass
           eliminates unnecessary copy operations.  This flag is
           enabled by default at --OO and higher.

       --ffiippaa--ppuurree--ccoonnsstt
           Discover which functions are pure or constant.
           Enabled by default at --OO and higher.

       --ffiippaa--rreeffeerreennccee
           Discover which static variables do not escape cannot
           escape the compilation unit.  Enabled by default at --OO
           and higher.

       --ffiippaa--ppttaa
           Perform interprocedural pointer analysis and
           interprocedural modification and reference analysis.
           This option can cause excessive memory and compile-
           time usage on large compilation units.  It is not
           enabled by default at any optimization level.

       --ffiippaa--pprrooffiillee
           Perform interprocedural profile propagation.  The
           functions called only from cold functions are marked
           as cold. Also functions executed once (such as "cold",
           "noreturn", static constructors or destructors) are
           identified. Cold functions and loop less parts of
           functions executed once are then optimized for size.
           Enabled by default at --OO and higher.

       --ffiippaa--ccpp
           Perform interprocedural constant propagation.  This
           optimization analyzes the program to determine when
           values passed to functions are constants and then
           optimizes accordingly.  This optimization can
           substantially increase performance if the application



gcc-4.74                    2014-06-12                        120





GCC(1)                         GNU                         GCC(1)


           has constants passed to functions.  This flag is
           enabled by default at --OO22, --OOss and --OO33.

       --ffiippaa--ccpp--cclloonnee
           Perform function cloning to make interprocedural
           constant propagation stronger.  When enabled,
           interprocedural constant propagation will perform
           function cloning when externally visible function can
           be called with constant arguments.  Because this
           optimization can create multiple copies of functions,
           it may significantly increase code size (see ----ppaarraamm
           iippccpp--uunniitt--ggrroowwtthh==_v_a_l_u_e).  This flag is enabled by
           default at --OO33.

       --ffiippaa--mmaattrriixx--rreeoorrgg
           Perform matrix flattening and transposing.  Matrix
           flattening tries to replace an m-dimensional matrix
           with its equivalent n-dimensional matrix, where n < m.
           This reduces the level of indirection needed for
           accessing the elements of the matrix. The second
           optimization is matrix transposing, which attempts to
           change the order of the matrix's dimensions in order
           to improve cache locality.  Both optimizations need
           the --ffwwhhoollee--pprrooggrraamm flag.  Transposing is enabled only
           if profiling information is available.

       --ffttrreeee--ssiinnkk
           Perform forward store motion  on trees.  This flag is
           enabled by default at --OO and higher.

       --ffttrreeee--bbiitt--ccccpp
           Perform sparse conditional bit constant propagation on
           trees and propagate pointer alignment information.
           This pass only operates on local scalar variables and
           is enabled by default at --OO and higher.  It requires
           that --ffttrreeee--ccccpp is enabled.

       --ffttrreeee--ccccpp
           Perform sparse conditional constant propagation (CCP)
           on trees.  This pass only operates on local scalar
           variables and is enabled by default at --OO and higher.

       --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn
           Perform conversion of simple initializations in a
           switch to initializations from a scalar array.  This
           flag is enabled by default at --OO22 and higher.

       --ffttrreeee--ttaaiill--mmeerrggee
           Look for identical code sequences.  When found,
           replace one with a jump to the other.  This
           optimization is known as tail merging or cross
           jumping.  This flag is enabled by default at --OO22 and
           higher.  The compilation time in this pass can be
           limited using mmaaxx--ttaaiill--mmeerrggee--ccoommppaarriissoonnss parameter and



gcc-4.74                    2014-06-12                        121





GCC(1)                         GNU                         GCC(1)


           mmaaxx--ttaaiill--mmeerrggee--iitteerraattiioonnss parameter.

       --ffttrreeee--ddccee
           Perform dead code elimination (DCE) on trees.  This
           flag is enabled by default at --OO and higher.

       --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee
           Perform conditional dead code elimination (DCE) for
           calls to builtin functions that may set "errno" but
           are otherwise side-effect free.  This flag is enabled
           by default at --OO22 and higher if --OOss is not also
           specified.

       --ffttrreeee--ddoommiinnaattoorr--ooppttss
           Perform a variety of simple scalar cleanups
           (constant/copy propagation, redundancy elimination,
           range propagation and expression simplification) based
           on a dominator tree traversal.  This also performs
           jump threading (to reduce jumps to jumps). This flag
           is enabled by default at --OO and higher.

       --ffttrreeee--ddssee
           Perform dead store elimination (DSE) on trees.  A dead
           store is a store into a memory location that is later
           overwritten by another store without any intervening
           loads.  In this case the earlier store can be deleted.
           This flag is enabled by default at --OO and higher.

       --ffttrreeee--cchh
           Perform loop header copying on trees.  This is
           beneficial since it increases effectiveness of code
           motion optimizations.  It also saves one jump.  This
           flag is enabled by default at --OO and higher.  It is
           not enabled for --OOss, since it usually increases code
           size.

       --ffttrreeee--lloooopp--ooppttiimmiizzee
           Perform loop optimizations on trees.  This flag is
           enabled by default at --OO and higher.

       --ffttrreeee--lloooopp--lliinneeaarr
           Perform loop interchange transformations on tree.
           Same as --fflloooopp--iinntteerrcchhaannggee.  To use this code
           transformation, GCC has to be configured with
           ----wwiitthh--ppppll and ----wwiitthh--cclloooogg to enable the Graphite
           loop transformation infrastructure.

       --fflloooopp--iinntteerrcchhaannggee
           Perform loop interchange transformations on loops.
           Interchanging two nested loops switches the inner and
           outer loops.  For example, given a loop like:






gcc-4.74                    2014-06-12                        122





GCC(1)                         GNU                         GCC(1)


                   DO J = 1, M
                     DO I = 1, N
                       A(J, I) = A(J, I) * C
                     ENDDO
                   ENDDO

           loop interchange will transform the loop as if the
           user had written:

                   DO I = 1, N
                     DO J = 1, M
                       A(J, I) = A(J, I) * C
                     ENDDO
                   ENDDO

           which can be beneficial when "N" is larger than the
           caches, because in Fortran, the elements of an array
           are stored in memory contiguously by column, and the
           original loop iterates over rows, potentially creating
           at each access a cache miss.  This optimization
           applies to all the languages supported by GCC and is
           not limited to Fortran.  To use this code
           transformation, GCC has to be configured with
           ----wwiitthh--ppppll and ----wwiitthh--cclloooogg to enable the Graphite
           loop transformation infrastructure.

       --fflloooopp--ssttrriipp--mmiinnee
           Perform loop strip mining transformations on loops.
           Strip mining splits a loop into two nested loops.  The
           outer loop has strides equal to the strip size and the
           inner loop has strides of the original loop within a
           strip.  The strip length can be changed using the
           lloooopp--bblloocckk--ttiillee--ssiizzee parameter.  For example, given a
           loop like:

                   DO I = 1, N
                     A(I) = A(I) + C
                   ENDDO

           loop strip mining will transform the loop as if the
           user had written:

                   DO II = 1, N, 51
                     DO I = II, min (II + 50, N)
                       A(I) = A(I) + C
                     ENDDO
                   ENDDO

           This optimization applies to all the languages
           supported by GCC and is not limited to Fortran.  To
           use this code transformation, GCC has to be configured
           with ----wwiitthh--ppppll and ----wwiitthh--cclloooogg to enable the
           Graphite loop transformation infrastructure.




gcc-4.74                    2014-06-12                        123





GCC(1)                         GNU                         GCC(1)


       --fflloooopp--bblloocckk
           Perform loop blocking transformations on loops.
           Blocking strip mines each loop in the loop nest such
           that the memory accesses of the element loops fit
           inside caches.  The strip length can be changed using
           the lloooopp--bblloocckk--ttiillee--ssiizzee parameter.  For example,
           given a loop like:

                   DO I = 1, N
                     DO J = 1, M
                       A(J, I) = B(I) + C(J)
                     ENDDO
                   ENDDO

           loop blocking will transform the loop as if the user
           had written:

                   DO II = 1, N, 51
                     DO JJ = 1, M, 51
                       DO I = II, min (II + 50, N)
                         DO J = JJ, min (JJ + 50, M)
                           A(J, I) = B(I) + C(J)
                         ENDDO
                       ENDDO
                     ENDDO
                   ENDDO

           which can be beneficial when "M" is larger than the
           caches, because the innermost loop will iterate over a
           smaller amount of data which can be kept in the
           caches.  This optimization applies to all the
           languages supported by GCC and is not limited to
           Fortran.  To use this code transformation, GCC has to
           be configured with ----wwiitthh--ppppll and ----wwiitthh--cclloooogg to
           enable the Graphite loop transformation
           infrastructure.

       --ffggrraapphhiittee--iiddeennttiittyy
           Enable the identity transformation for graphite.  For
           every SCoP we generate the polyhedral representation
           and transform it back to gimple.  Using
           --ffggrraapphhiittee--iiddeennttiittyy we can check the costs or benefits
           of the GIMPLE -> GRAPHITE -> GIMPLE transformation.
           Some minimal optimizations are also performed by the
           code generator CLooG, like index splitting and dead
           code elimination in loops.

       --fflloooopp--ffllaatttteenn
           Removes the loop nesting structure: transforms the
           loop nest into a single loop.  This transformation can
           be useful as an enablement transform for vectorization
           and parallelization.  This feature is experimental.
           To use this code transformation, GCC has to be
           configured with ----wwiitthh--ppppll and ----wwiitthh--cclloooogg to enable



gcc-4.74                    2014-06-12                        124





GCC(1)                         GNU                         GCC(1)


           the Graphite loop transformation infrastructure.

       --fflloooopp--ppaarraalllleelliizzee--aallll
           Use the Graphite data dependence analysis to identify
           loops that can be parallelized.  Parallelize all the
           loops that can be analyzed to not contain loop carried
           dependences without checking that it is profitable to
           parallelize the loops.

       --ffcchheecckk--ddaattaa--ddeeppss
           Compare the results of several data dependence
           analyzers.  This option is used for debugging the data
           dependence analyzers.

       --ffttrreeee--lloooopp--iiff--ccoonnvveerrtt
           Attempt to transform conditional jumps in the
           innermost loops to branch-less equivalents.  The
           intent is to remove control-flow from the innermost
           loops in order to improve the ability of the
           vectorization pass to handle these loops.  This is
           enabled by default if vectorization is enabled.

       --ffttrreeee--lloooopp--iiff--ccoonnvveerrtt--ssttoorreess
           Attempt to also if-convert conditional jumps
           containing memory writes.  This transformation can be
           unsafe for multi-threaded programs as it transforms
           conditional memory writes into unconditional memory
           writes.  For example,

                   for (i = 0; i < N; i++)
                     if (cond)
                       A[i] = expr;

           would be transformed to

                   for (i = 0; i < N; i++)
                     A[i] = cond ? expr : A[i];

           potentially producing data races.

       --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           Perform loop distribution.  This flag can improve
           cache performance on big loop bodies and allow further
           loop optimizations, like parallelization or
           vectorization, to take place.  For example, the loop

                   DO I = 1, N
                     A(I) = B(I) + C
                     D(I) = E(I) * F
                   ENDDO

           is transformed to





gcc-4.74                    2014-06-12                        125





GCC(1)                         GNU                         GCC(1)


                   DO I = 1, N
                      A(I) = B(I) + C
                   ENDDO
                   DO I = 1, N
                      D(I) = E(I) * F
                   ENDDO

       --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss
           Perform loop distribution of patterns that can be code
           generated with calls to a library.  This flag is
           enabled by default at --OO33.

           This pass distributes the initialization loops and
           generates a call to memset zero.  For example, the
           loop

                   DO I = 1, N
                     A(I) = 0
                     B(I) = A(I) + I
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = 0
                   ENDDO
                   DO I = 1, N
                      B(I) = A(I) + I
                   ENDDO

           and the initialization loop is transformed into a call
           to memset zero.

       --ffttrreeee--lloooopp--iimm
           Perform loop invariant motion on trees.  This pass
           moves only invariants that would be hard to handle at
           RTL level (function calls, operations that expand to
           nontrivial sequences of insns).  With --ffuunnsswwiittcchh--llooooppss
           it also moves operands of conditions that are
           invariant out of the loop, so that we can use just
           trivial invariantness analysis in loop unswitching.
           The pass also includes store motion.

       --ffttrreeee--lloooopp--iivvccaannoonn
           Create a canonical counter for number of iterations in
           loops for which determining number of iterations
           requires complicated analysis.  Later optimizations
           then may determine the number easily.  Useful
           especially in connection with unrolling.

       --ffiivvooppttss
           Perform induction variable optimizations (strength
           reduction, induction variable merging and induction
           variable elimination) on trees.



gcc-4.74                    2014-06-12                        126





GCC(1)                         GNU                         GCC(1)


       --ffttrreeee--ppaarraalllleelliizzee--llooooppss==nn
           Parallelize loops, i.e., split their iteration space
           to run in n threads.  This is only possible for loops
           whose iterations are independent and can be
           arbitrarily reordered.  The optimization is only
           profitable on multiprocessor machines, for loops that
           are CPU-intensive, rather than constrained e.g. by
           memory bandwidth.  This option implies --pptthhrreeaadd, and
           thus is only supported on targets that have support
           for --pptthhrreeaadd.

       --ffttrreeee--ppttaa
           Perform function-local points-to analysis on trees.
           This flag is enabled by default at --OO and higher.

       --ffttrreeee--ssrraa
           Perform scalar replacement of aggregates.  This pass
           replaces structure references with scalars to prevent
           committing structures to memory too early.  This flag
           is enabled by default at --OO and higher.

       --ffttrreeee--ccooppyyrreennaammee
           Perform copy renaming on trees.  This pass attempts to
           rename compiler temporaries to other variables at copy
           locations, usually resulting in variable names which
           more closely resemble the original variables.  This
           flag is enabled by default at --OO and higher.

       --ffttrreeee--tteerr
           Perform temporary expression replacement during the
           SSA->normal phase.  Single use/single def temporaries
           are replaced at their use location with their defining
           expression.  This results in non-GIMPLE code, but
           gives the expanders much more complex trees to work on
           resulting in better RTL generation.  This is enabled
           by default at --OO and higher.

       --ffttrreeee--vveeccttoorriizzee
           Perform loop vectorization on trees. This flag is
           enabled by default at --OO33.

       --ffttrreeee--ssllpp--vveeccttoorriizzee
           Perform basic block vectorization on trees. This flag
           is enabled by default at --OO33 and when --ffttrreeee--vveeccttoorriizzee
           is enabled.

       --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn
           Perform loop versioning when doing loop vectorization
           on trees.  When a loop appears to be vectorizable
           except that data alignment or data dependence cannot
           be determined at compile time, then vectorized and
           non-vectorized versions of the loop are generated
           along with run-time checks for alignment or dependence
           to control which version is executed.  This option is



gcc-4.74                    2014-06-12                        127





GCC(1)                         GNU                         GCC(1)


           enabled by default except at level --OOss where it is
           disabled.

       --ffvveecctt--ccoosstt--mmooddeell
           Enable cost model for vectorization.

       --ffttrreeee--vvrrpp
           Perform Value Range Propagation on trees.  This is
           similar to the constant propagation pass, but instead
           of values, ranges of values are propagated.  This
           allows the optimizers to remove unnecessary range
           checks like array bound checks and null pointer
           checks.  This is enabled by default at --OO22 and higher.
           Null pointer check elimination is only done if
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss is enabled.

       --ffttrraacceerr
           Perform tail duplication to enlarge superblock size.
           This transformation simplifies the control flow of the
           function allowing other optimizations to do better
           job.

       --ffuunnrroollll--llooooppss
           Unroll loops whose number of iterations can be
           determined at compile time or upon entry to the loop.
           --ffuunnrroollll--llooooppss implies --ffrreerruunn--ccssee--aafftteerr--lloooopp.  This
           option makes code larger, and may or may not make it
           run faster.

       --ffuunnrroollll--aallll--llooooppss
           Unroll all loops, even if their number of iterations
           is uncertain when the loop is entered.  This usually
           makes programs run more slowly.  --ffuunnrroollll--aallll--llooooppss
           implies the same options as --ffuunnrroollll--llooooppss,

       --ffsspplliitt--iivvss--iinn--uunnrroolllleerr
           Enables expressing of values of induction variables in
           later iterations of the unrolled loop using the value
           in the first iteration.  This breaks long dependency
           chains, thus improving efficiency of the scheduling
           passes.

           Combination of --ffwweebb and CSE is often sufficient to
           obtain the same effect.  However in cases the loop
           body is more complicated than a single basic block,
           this is not reliable.  It also does not work at all on
           some of the architectures due to restrictions in the
           CSE pass.

           This optimization is enabled by default.

       --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr
           With this option, the compiler will create multiple
           copies of some local variables when unrolling a loop



gcc-4.74                    2014-06-12                        128





GCC(1)                         GNU                         GCC(1)


           which can result in superior code.

       --ffppaarrttiiaall--iinnlliinniinngg
           Inline parts of functions.  This option has any effect
           only when inlining itself is turned on by the
           --ffiinnlliinnee--ffuunnccttiioonnss or --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss
           options.

           Enabled at level --OO22.

       --ffpprreeddiiccttiivvee--ccoommmmoonniinngg
           Perform predictive commoning optimization, i.e.,
           reusing computations (especially memory loads and
           stores) performed in previous iterations of loops.

           This option is enabled at level --OO33.

       --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           If supported by the target machine, generate
           instructions to prefetch memory to improve the
           performance of loops that access large arrays.

           This option may generate better or worse code; results
           are highly dependent on the structure of loops within
           the source code.

           Disabled at level --OOss.

       --ffnnoo--ppeeeepphhoollee
       --ffnnoo--ppeeeepphhoollee22
           Disable any machine-specific peephole optimizations.
           The difference between --ffnnoo--ppeeeepphhoollee and
           --ffnnoo--ppeeeepphhoollee22 is in how they are implemented in the
           compiler; some targets use one, some use the other, a
           few use both.

           --ffppeeeepphhoollee is enabled by default.  --ffppeeeepphhoollee22 enabled
           at levels --OO22, --OO33, --OOss.

       --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy
           Do not guess branch probabilities using heuristics.

           GCC will use heuristics to guess branch probabilities
           if they are not provided by profiling feedback
           (--ffpprrooffiillee--aarrccss).  These heuristics are based on the
           control flow graph.  If some branch probabilities are
           specified by ____bbuuiillttiinn__eexxppeecctt, then the heuristics
           will be used to guess branch probabilities for the
           rest of the control flow graph, taking the
           ____bbuuiillttiinn__eexxppeecctt info into account.  The interactions
           between the heuristics and ____bbuuiillttiinn__eexxppeecctt can be
           complex, and in some cases, it may be useful to
           disable the heuristics so that the effects of
           ____bbuuiillttiinn__eexxppeecctt are easier to understand.



gcc-4.74                    2014-06-12                        129





GCC(1)                         GNU                         GCC(1)


           The default is --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy at levels
           --OO, --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--bblloocckkss
           Reorder basic blocks in the compiled function in order
           to reduce number of taken branches and improve code
           locality.

           Enabled at levels --OO22, --OO33.

       --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn
           In addition to reordering basic blocks in the compiled
           function, in order to reduce number of taken branches,
           partitions hot and cold basic blocks into separate
           sections of the assembly and .o files, to improve
           paging and cache locality performance.

           This optimization is automatically turned off in the
           presence of exception handling, for linkonce sections,
           for functions with a user-defined section attribute
           and on any architecture that does not support named
           sections.

       --ffrreeoorrddeerr--ffuunnccttiioonnss
           Reorder functions in the object file in order to
           improve code locality.  This is implemented by using
           special subsections ".text.hot" for most frequently
           executed functions and ".text.unlikely" for unlikely
           executed functions.  Reordering is done by the linker
           so object file format must support named sections and
           linker must place them in a reasonable way.

           Also profile feedback must be available in to make
           this option effective.  See --ffpprrooffiillee--aarrccss for
           details.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffssttrriicctt--aalliiaassiinngg
           Allow the compiler to assume the strictest aliasing
           rules applicable to the language being compiled.  For
           C (and C++), this activates optimizations based on the
           type of expressions.  In particular, an object of one
           type is assumed never to reside at the same address as
           an object of a different type, unless the types are
           almost the same.  For example, an "unsigned int" can
           alias an "int", but not a "void*" or a "double".  A
           character type may alias any other type.

           Pay special attention to code like this:







gcc-4.74                    2014-06-12                        130





GCC(1)                         GNU                         GCC(1)


                   union a_union {
                     int i;
                     double d;
                   };

                   int f() {
                     union a_union t;
                     t.d = 3.0;
                     return t.i;
                   }

           The practice of reading from a different union member
           than the one most recently written to (called
           "type-punning") is common.  Even with
           --ffssttrriicctt--aalliiaassiinngg, type-punning is allowed, provided
           the memory is accessed through the union type.  So,
           the code above will work as expected.    However, this
           code might not:

                   int f() {
                     union a_union t;
                     int* ip;
                     t.d = 3.0;
                     ip = &t.i;
                     return *ip;
                   }

           Similarly, access by taking the address, casting the
           resulting pointer and dereferencing the result has
           undefined behavior, even if the cast uses a union
           type, e.g.:

                   int f() {
                     double d = 3.0;
                     return ((union a_union *) &d)->i;
                   }

           The --ffssttrriicctt--aalliiaassiinngg option is enabled at levels --OO22,
           --OO33, --OOss.

       --ffssttrriicctt--oovveerrffllooww
           Allow the compiler to assume strict signed overflow
           rules, depending on the language being compiled.  For
           C (and C++) this means that overflow when doing
           arithmetic with signed numbers is undefined, which
           means that the compiler may assume that it will not
           happen.  This permits various optimizations.  For
           example, the compiler will assume that an expression
           like "i + 10 > i" will always be true for signed "i".
           This assumption is only valid if signed overflow is
           undefined, as the expression is false if "i + 10"
           overflows when using twos complement arithmetic.  When
           this option is in effect any attempt to determine
           whether an operation on signed numbers will overflow



gcc-4.74                    2014-06-12                        131





GCC(1)                         GNU                         GCC(1)


           must be written carefully to not actually involve
           overflow.

           This option also allows the compiler to assume strict
           pointer semantics: given a pointer to an object, if
           adding an offset to that pointer does not produce a
           pointer to the same object, the addition is undefined.
           This permits the compiler to conclude that "p + u > p"
           is always true for a pointer "p" and unsigned integer
           "u".  This assumption is only valid because pointer
           wraparound is undefined, as the expression is false if
           "p + u" overflows using twos complement arithmetic.

           See also the --ffwwrraappvv option.  Using --ffwwrraappvv means that
           integer signed overflow is fully defined: it wraps.
           When --ffwwrraappvv is used, there is no difference between
           --ffssttrriicctt--oovveerrffllooww and --ffnnoo--ssttrriicctt--oovveerrffllooww for
           integers.  With --ffwwrraappvv certain types of overflow are
           permitted.  For example, if the compiler gets an
           overflow when doing arithmetic on constants, the
           overflowed value can still be used with --ffwwrraappvv, but
           not otherwise.

           The --ffssttrriicctt--oovveerrffllooww option is enabled at levels --OO22,
           --OO33, --OOss.

       --ffaalliiggnn--ffuunnccttiioonnss
       --ffaalliiggnn--ffuunnccttiioonnss==_n
           Align the start of functions to the next power-of-two
           greater than _n, skipping up to _n bytes.  For instance,
           --ffaalliiggnn--ffuunnccttiioonnss==3322 aligns functions to the next
           32-byte boundary, but --ffaalliiggnn--ffuunnccttiioonnss==2244 would align
           to the next 32-byte boundary only if this can be done
           by skipping 23 bytes or less.

           --ffnnoo--aalliiggnn--ffuunnccttiioonnss and --ffaalliiggnn--ffuunnccttiioonnss==11 are
           equivalent and mean that functions will not be
           aligned.

           Some assemblers only support this flag when _n is a
           power of two; in that case, it is rounded up.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llaabbeellss
       --ffaalliiggnn--llaabbeellss==_n
           Align all branch targets to a power-of-two boundary,
           skipping up to _n bytes like --ffaalliiggnn--ffuunnccttiioonnss.  This
           option can easily make code slower, because it must
           insert dummy operations for when the branch target is
           reached in the usual flow of the code.



gcc-4.74                    2014-06-12                        132





GCC(1)                         GNU                         GCC(1)


           --ffnnoo--aalliiggnn--llaabbeellss and --ffaalliiggnn--llaabbeellss==11 are equivalent
           and mean that labels will not be aligned.

           If --ffaalliiggnn--llooooppss or --ffaalliiggnn--jjuummppss are applicable and
           are greater than this value, then their values are
           used instead.

           If _n is not specified or is zero, use a machine-
           dependent default which is very likely to be 11,
           meaning no alignment.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llooooppss
       --ffaalliiggnn--llooooppss==_n
           Align loops to a power-of-two boundary, skipping up to
           _n bytes like --ffaalliiggnn--ffuunnccttiioonnss.  The hope is that the
           loop will be executed many times, which will make up
           for any execution of the dummy operations.

           --ffnnoo--aalliiggnn--llooooppss and --ffaalliiggnn--llooooppss==11 are equivalent
           and mean that loops will not be aligned.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--jjuummppss
       --ffaalliiggnn--jjuummppss==_n
           Align branch targets to a power-of-two boundary, for
           branch targets where the targets can only be reached
           by jumping, skipping up to _n bytes like
           --ffaalliiggnn--ffuunnccttiioonnss.  In this case, no dummy operations
           need be executed.

           --ffnnoo--aalliiggnn--jjuummppss and --ffaalliiggnn--jjuummppss==11 are equivalent
           and mean that loops will not be aligned.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels --OO22, --OO33.

       --ffuunniitt--aatt--aa--ttiimmee
           This option is left for compatibility reasons.
           --ffuunniitt--aatt--aa--ttiimmee has no effect, while
           --ffnnoo--uunniitt--aatt--aa--ttiimmee implies --ffnnoo--ttoopplleevveell--rreeoorrddeerr and
           --ffnnoo--sseeccttiioonn--aanncchhoorrss.

           Enabled by default.

       --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           Do not reorder top-level functions, variables, and



gcc-4.74                    2014-06-12                        133





GCC(1)                         GNU                         GCC(1)


           "asm" statements.  Output them in the same order that
           they appear in the input file.  When this option is
           used, unreferenced static variables will not be
           removed.  This option is intended to support existing
           code that relies on a particular ordering.  For new
           code, it is better to use attributes.

           Enabled at level --OO00.  When disabled explicitly, it
           also implies --ffnnoo--sseeccttiioonn--aanncchhoorrss, which is otherwise
           enabled at --OO00 on some targets.

       --ffwweebb
           Constructs webs as commonly used for register
           allocation purposes and assign each web individual
           pseudo register.  This allows the register allocation
           pass to operate on pseudos directly, but also
           strengthens several other optimization passes, such as
           CSE, loop optimizer and trivial dead code remover.  It
           can, however, make debugging impossible, since
           variables will no longer stay in a "home register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffwwhhoollee--pprrooggrraamm
           Assume that the current compilation unit represents
           the whole program being compiled.  All public
           functions and variables with the exception of "main"
           and those merged by attribute "externally_visible"
           become static functions and in effect are optimized
           more aggressively by interprocedural optimizers. If
           ggoolldd is used as the linker plugin,
           "externally_visible" attributes are automatically
           added to functions (not variable yet due to a current
           ggoolldd issue) that are accessed outside of LTO objects
           according to resolution file produced by ggoolldd.  For
           other linkers that cannot generate resolution file,
           explicit "externally_visible" attributes are still
           necessary.  While this option is equivalent to proper
           use of the "static" keyword for programs consisting of
           a single file, in combination with option --ffllttoo this
           flag can be used to compile many smaller scale
           programs since the functions and variables become
           local for the whole combined compilation unit, not for
           the single source file itself.

           This option implies --ffwwhhoollee--ffiillee for Fortran programs.

       --ffllttoo[[==_n]]
           This option runs the standard link-time optimizer.
           When invoked with source code, it generates GIMPLE
           (one of GCC's internal representations) and writes it
           to special ELF sections in the object file.  When the
           object files are linked together, all the function
           bodies are read from these ELF sections and



gcc-4.74                    2014-06-12                        134





GCC(1)                         GNU                         GCC(1)


           instantiated as if they had been part of the same
           translation unit.

           To use the link-time optimizer, --ffllttoo needs to be
           specified at compile time and during the final link.
           For example:

                   gcc -c -O2 -flto foo.c
                   gcc -c -O2 -flto bar.c
                   gcc -o myprog -flto -O2 foo.o bar.o

           The first two invocations to GCC save a bytecode
           representation of GIMPLE into special ELF sections
           inside _f_o_o_._o and _b_a_r_._o.  The final invocation reads
           the GIMPLE bytecode from _f_o_o_._o and _b_a_r_._o, merges the
           two files into a single internal image, and compiles
           the result as usual.  Since both _f_o_o_._o and _b_a_r_._o are
           merged into a single image, this causes all the
           interprocedural analyses and optimizations in GCC to
           work across the two files as if they were a single
           one.  This means, for example, that the inliner is
           able to inline functions in _b_a_r_._o into functions in
           _f_o_o_._o and vice-versa.

           Another (simpler) way to enable link-time optimization
           is:

                   gcc -o myprog -flto -O2 foo.c bar.c

           The above generates bytecode for _f_o_o_._c and _b_a_r_._c,
           merges them together into a single GIMPLE
           representation and optimizes them as usual to produce
           _m_y_p_r_o_g.

           The only important thing to keep in mind is that to
           enable link-time optimizations the --ffllttoo flag needs to
           be passed to both the compile and the link commands.

           To make whole program optimization effective, it is
           necessary to make certain whole program assumptions.
           The compiler needs to know what functions and
           variables can be accessed by libraries and runtime
           outside of the link-time optimized unit.  When
           supported by the linker, the linker plugin (see
           --ffuussee--lliinnkkeerr--pplluuggiinn) passes information to the
           compiler about used and externally visible symbols.
           When the linker plugin is not available,
           --ffwwhhoollee--pprrooggrraamm should be used to allow the compiler
           to make these assumptions, which leads to more
           aggressive optimization decisions.

           Note that when a file is compiled with --ffllttoo, the
           generated object file is larger than a regular object
           file because it contains GIMPLE bytecodes and the



gcc-4.74                    2014-06-12                        135





GCC(1)                         GNU                         GCC(1)


           usual final code.  This means that object files with
           LTO information can be linked as normal object files;
           if --ffllttoo is not passed to the linker, no
           interprocedural optimizations are applied.

           Additionally, the optimization flags used to compile
           individual files are not necessarily related to those
           used at link time.  For instance,

                   gcc -c -O0 -flto foo.c
                   gcc -c -O0 -flto bar.c
                   gcc -o myprog -flto -O3 foo.o bar.o

           This produces individual object files with unoptimized
           assembler code, but the resulting binary _m_y_p_r_o_g is
           optimized at --OO33.  If, instead, the final binary is
           generated without --ffllttoo, then _m_y_p_r_o_g is not optimized.

           When producing the final binary with --ffllttoo, GCC only
           applies link-time optimizations to those files that
           contain bytecode.  Therefore, you can mix and match
           object files and libraries with GIMPLE bytecodes and
           final object code.  GCC automatically selects which
           files to optimize in LTO mode and which files to link
           without further processing.

           There are some code generation flags preserved by GCC
           when generating bytecodes, as they need to be used
           during the final link stage.  Currently, the following
           options are saved into the GIMPLE bytecode files:
           --ffPPIICC, --ffccoommmmoonn and all the --mm target flags.

           At link time, these options are read in and reapplied.
           Note that the current implementation makes no attempt
           to recognize conflicting values for these options.  If
           different files have conflicting option values (e.g.,
           one file is compiled with --ffPPIICC and another isn't),
           the compiler simply uses the last value read from the
           bytecode files.  It is recommended, then, that you
           compile all the files participating in the same link
           with the same options.

           If LTO encounters objects with C linkage declared with
           incompatible types in separate translation units to be
           linked together (undefined behavior according to ISO
           C99 6.2.7), a non-fatal diagnostic may be issued.  The
           behavior is still undefined at run time.

           Another feature of LTO is that it is possible to apply
           interprocedural optimizations on files written in
           different languages.  This requires support in the
           language front end.  Currently, the C, C++ and Fortran
           front ends are capable of emitting GIMPLE bytecodes,
           so something like this should work:



gcc-4.74                    2014-06-12                        136





GCC(1)                         GNU                         GCC(1)


                   gcc -c -flto foo.c
                   g++ -c -flto bar.cc
                   gfortran -c -flto baz.f90
                   g++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran

           Notice that the final link is done with gg++++ to get the
           C++ runtime libraries and --llggffoorrttrraann is added to get
           the Fortran runtime libraries.  In general, when
           mixing languages in LTO mode, you should use the same
           link command options as when mixing languages in a
           regular (non-LTO) compilation; all you need to add is
           --ffllttoo to all the compile and link commands.

           If object files containing GIMPLE bytecode are stored
           in a library archive, say _l_i_b_f_o_o_._a, it is possible to
           extract and use them in an LTO link if you are using a
           linker with plugin support.  To enable this feature,
           use the flag --ffuussee--lliinnkkeerr--pplluuggiinn at link time:

                   gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo

           With the linker plugin enabled, the linker extracts
           the needed GIMPLE files from _l_i_b_f_o_o_._a and passes them
           on to the running GCC to make them part of the
           aggregated GIMPLE image to be optimized.

           If you are not using a linker with plugin support
           and/or do not enable the linker plugin, then the
           objects inside _l_i_b_f_o_o_._a are extracted and linked as
           usual, but they do not participate in the LTO
           optimization process.

           Link-time optimizations do not require the presence of
           the whole program to operate.  If the program does not
           require any symbols to be exported, it is possible to
           combine --ffllttoo and --ffwwhhoollee--pprrooggrraamm to allow the
           interprocedural optimizers to use more aggressive
           assumptions which may lead to improved optimization
           opportunities.  Use of --ffwwhhoollee--pprrooggrraamm is not needed
           when linker plugin is active (see
           --ffuussee--lliinnkkeerr--pplluuggiinn).

           The current implementation of LTO makes no attempt to
           generate bytecode that is portable between different
           types of hosts.  The bytecode files are versioned and
           there is a strict version check, so bytecode files
           generated in one version of GCC will not work with an
           older/newer version of GCC.

           Link-time optimization does not work well with
           generation of debugging information.  Combining --ffllttoo
           with --gg is currently experimental and expected to
           produce wrong results.




gcc-4.74                    2014-06-12                        137





GCC(1)                         GNU                         GCC(1)


           If you specify the optional _n, the optimization and
           code generation done at link time is executed in
           parallel using _n parallel jobs by utilizing an
           installed mmaakkee program.  The environment variable MMAAKKEE
           may be used to override the program used.  The default
           value for _n is 1.

           You can also specify --ffllttoo==jjoobbsseerrvveerr to use GNU make's
           job server mode to determine the number of parallel
           jobs. This is useful when the Makefile calling GCC is
           already executing in parallel.  You must prepend a ++
           to the command recipe in the parent Makefile for this
           to work.  This option likely only works if MMAAKKEE is GNU
           make.

           This option is disabled by default

       --ffllttoo--ppaarrttiittiioonn==_a_l_g
           Specify the partitioning algorithm used by the link-
           time optimizer.  The value is either "1to1" to specify
           a partitioning mirroring the original source files or
           "balanced" to specify partitioning into equally sized
           chunks (whenever possible).  Specifying "none" as an
           algorithm disables partitioning and streaming
           completely. The default value is "balanced".

       --ffllttoo--ccoommpprreessssiioonn--lleevveell==_n
           This option specifies the level of compression used
           for intermediate language written to LTO object files,
           and is only meaningful in conjunction with LTO mode
           (--ffllttoo).  Valid values are 0 (no compression) to 9
           (maximum compression).  Values outside this range are
           clamped to either 0 or 9.  If the option is not given,
           a default balanced compression setting is used.

       --ffllttoo--rreeppoorrtt
           Prints a report with internal details on the workings
           of the link-time optimizer.  The contents of this
           report vary from version to version.  It is meant to
           be useful to GCC developers when processing object
           files in LTO mode (via --ffllttoo).

           Disabled by default.

       --ffuussee--lliinnkkeerr--pplluuggiinn
           Enables the use of a linker plugin during link-time
           optimization.  This option relies on plugin support in
           the linker, which is available in gold or in GNU ld
           2.21 or newer.

           This option enables the extraction of object files
           with GIMPLE bytecode out of library archives. This
           improves the quality of optimization by exposing more
           code to the link-time optimizer.  This information



gcc-4.74                    2014-06-12                        138





GCC(1)                         GNU                         GCC(1)


           specifies what symbols can be accessed externally (by
           non-LTO object or during dynamic linking).  Resulting
           code quality improvements on binaries (and shared
           libraries that use hidden visibility) are similar to
           "-fwhole-program".  See --ffllttoo for a description of the
           effect of this flag and how to use it.

           This option is enabled by default when LTO support in
           GCC is enabled and GCC was configured for use with a
           linker supporting plugins (GNU ld 2.21 or newer or
           gold).

       --ffffaatt--llttoo--oobbjjeeccttss
           Fat LTO objects are object files that contain both the
           intermediate language and the object code. This makes
           them usable for both LTO linking and normal linking.
           This option is effective only when compiling with
           --ffllttoo and is ignored at link time.

           --ffnnoo--ffaatt--llttoo--oobbjjeeccttss improves compilation time over
           plain LTO, but requires the complete toolchain to be
           aware of LTO. It requires a linker with linker plugin
           support for basic functionality.  Additionally, nm, ar
           and ranlib need to support linker plugins to allow a
           full-featured build environment (capable of building
           static libraries etc).

           The default is --ffffaatt--llttoo--oobbjjeeccttss but this default is
           intended to change in future releases when linker
           plugin enabled environments become more common.

       --ffccoommppaarree--eelliimm
           After register allocation and post-register allocation
           instruction splitting, identify arithmetic
           instructions that compute processor flags similar to a
           comparison operation based on that arithmetic.  If
           possible, eliminate the explicit comparison operation.

           This pass only applies to certain targets that cannot
           explicitly represent the comparison operation before
           register allocation is complete.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccpprroopp--rreeggiisstteerrss
           After register allocation and post-register allocation
           instruction splitting, we perform a copy-propagation
           pass to try to reduce scheduling dependencies and
           occasionally eliminate the copy.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffpprrooffiillee--ccoorrrreeccttiioonn
           Profiles collected using an instrumented binary for



gcc-4.74                    2014-06-12                        139





GCC(1)                         GNU                         GCC(1)


           multi-threaded programs may be inconsistent due to
           missed counter updates. When this option is specified,
           GCC will use heuristics to correct or smooth out such
           inconsistencies. By default, GCC will emit an error
           message when an inconsistent profile is detected.

       --ffpprrooffiillee--ddiirr==_p_a_t_h
           Set the directory to search for the profile data files
           in to _p_a_t_h.  This option affects only the profile data
           generated by --ffpprrooffiillee--ggeenneerraattee, --fftteesstt--ccoovveerraaggee,
           --ffpprrooffiillee--aarrccss and used by --ffpprrooffiillee--uussee and
           --ffbbrraanncchh--pprroobbaabbiilliittiieess and its related options.  Both
           absolute and relative paths can be used.  By default,
           GCC will use the current directory as _p_a_t_h, thus the
           profile data file will appear in the same directory as
           the object file.

       --ffpprrooffiillee--ggeenneerraattee
       --ffpprrooffiillee--ggeenneerraattee==_p_a_t_h
           Enable options usually used for instrumenting
           application to produce profile useful for later
           recompilation with profile feedback based
           optimization.  You must use --ffpprrooffiillee--ggeenneerraattee both
           when compiling and when linking your program.

           The following options are enabled: "-fprofile-arcs",
           "-fprofile-values", "-fvpt".

           If _p_a_t_h is specified, GCC will look at the _p_a_t_h to
           find the profile feedback data files. See
           --ffpprrooffiillee--ddiirr.

       --ffpprrooffiillee--uussee
       --ffpprrooffiillee--uussee==_p_a_t_h
           Enable profile feedback directed optimizations, and
           optimizations generally profitable only with profile
           feedback available.

           The following options are enabled:
           "-fbranch-probabilities", "-fvpt", "-funroll-loops",
           "-fpeel-loops", "-ftracer"

           By default, GCC emits an error message if the feedback
           profiles do not match the source code.  This error can
           be turned into a warning by using --WWccoovveerraaggee--mmiissmmaattcchh.
           Note this may result in poorly optimized code.

           If _p_a_t_h is specified, GCC will look at the _p_a_t_h to
           find the profile feedback data files. See
           --ffpprrooffiillee--ddiirr.

       The following options control compiler behavior regarding
       floating-point arithmetic.  These options trade off
       between speed and correctness.  All must be specifically



gcc-4.74                    2014-06-12                        140





GCC(1)                         GNU                         GCC(1)


       enabled.

       --ffffllooaatt--ssttoorree
           Do not store floating-point variables in registers,
           and inhibit other options that might change whether a
           floating-point value is taken from a register or
           memory.

           This option prevents undesirable excess precision on
           machines such as the 68000 where the floating
           registers (of the 68881) keep more precision than a
           "double" is supposed to have.  Similarly for the x86
           architecture.  For most programs, the excess precision
           does only good, but a few programs rely on the precise
           definition of IEEE floating point.  Use --ffffllooaatt--ssttoorree
           for such programs, after modifying them to store all
           pertinent intermediate computations into variables.

       --ffeexxcceessss--pprreecciissiioonn==_s_t_y_l_e
           This option allows further control over excess
           precision on machines where floating-point registers
           have more precision than the IEEE "float" and "double"
           types and the processor does not support operations
           rounding to those types.  By default,
           --ffeexxcceessss--pprreecciissiioonn==ffaasstt is in effect; this means that
           operations are carried out in the precision of the
           registers and that it is unpredictable when rounding
           to the types specified in the source code takes place.
           When compiling C, if --ffeexxcceessss--pprreecciissiioonn==ssttaannddaarrdd is
           specified then excess precision will follow the rules
           specified in ISO C99; in particular, both casts and
           assignments cause values to be rounded to their
           semantic types (whereas --ffffllooaatt--ssttoorree only affects
           assignments).  This option is enabled by default for C
           if a strict conformance option such as --ssttdd==cc9999 is
           used.

           --ffeexxcceessss--pprreecciissiioonn==ssttaannddaarrdd is not implemented for
           languages other than C, and has no effect if
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss or --ffffaasstt--mmaatthh is
           specified.  On the x86, it also has no effect if
           --mmffppmmaatthh==ssssee or --mmffppmmaatthh==ssssee++338877 is specified; in the
           former case, IEEE semantics apply without excess
           precision, and in the latter, rounding is
           unpredictable.

       --ffffaasstt--mmaatthh
           Sets --ffnnoo--mmaatthh--eerrrrnnoo, --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss,
           --ffffiinniittee--mmaatthh--oonnllyy, --ffnnoo--rroouunnddiinngg--mmaatthh,
           --ffnnoo--ssiiggnnaalliinngg--nnaannss and --ffccxx--lliimmiitteedd--rraannggee.

           This option causes the preprocessor macro
           "__FAST_MATH__" to be defined.




gcc-4.74                    2014-06-12                        141





GCC(1)                         GNU                         GCC(1)


           This option is not turned on by any --OO option besides
           --OOffaasstt since it can result in incorrect output for
           programs that depend on an exact implementation of
           IEEE or ISO rules/specifications for math functions.
           It may, however, yield faster code for programs that
           do not require the guarantees of these specifications.

       --ffnnoo--mmaatthh--eerrrrnnoo
           Do not set ERRNO after calling math functions that are
           executed with a single instruction, e.g., sqrt.  A
           program that relies on IEEE exceptions for math error
           handling may want to use this flag for speed while
           maintaining IEEE arithmetic compatibility.

           This option is not turned on by any --OO option since it
           can result in incorrect output for programs that
           depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may,
           however, yield faster code for programs that do not
           require the guarantees of these specifications.

           The default is --ffmmaatthh--eerrrrnnoo.

           On Darwin systems, the math library never sets
           "errno".  There is therefore no reason for the
           compiler to consider the possibility that it might,
           and --ffnnoo--mmaatthh--eerrrrnnoo is the default.

       --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           Allow optimizations for floating-point arithmetic that
           (a) assume that arguments and results are valid and
           (b) may violate IEEE or ANSI standards.  When used at
           link-time, it may include libraries or startup files
           that change the default FPU control word or other
           similar optimizations.

           This option is not turned on by any --OO option since it
           can result in incorrect output for programs that
           depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may,
           however, yield faster code for programs that do not
           require the guarantees of these specifications.
           Enables --ffnnoo--ssiiggnneedd--zzeerrooss, --ffnnoo--ttrraappppiinngg--mmaatthh,
           --ffaassssoocciiaattiivvee--mmaatthh and --ffrreecciipprrooccaall--mmaatthh.

           The default is --ffnnoo--uunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss.

       --ffaassssoocciiaattiivvee--mmaatthh
           Allow re-association of operands in series of
           floating-point operations.  This violates the ISO C
           and C++ language standard by possibly changing
           computation result.  NOTE: re-ordering may change the
           sign of zero as well as ignore NaNs and inhibit or
           create underflow or overflow (and thus cannot be used



gcc-4.74                    2014-06-12                        142





GCC(1)                         GNU                         GCC(1)


           on code that relies on rounding behavior like "(x +
           2**52) - 2**52".  May also reorder floating-point
           comparisons and thus may not be used when ordered
           comparisons are required.  This option requires that
           both --ffnnoo--ssiiggnneedd--zzeerrooss and --ffnnoo--ttrraappppiinngg--mmaatthh be in
           effect.  Moreover, it doesn't make much sense with
           --ffrroouunnddiinngg--mmaatthh. For Fortran the option is
           automatically enabled when both --ffnnoo--ssiiggnneedd--zzeerrooss and
           --ffnnoo--ttrraappppiinngg--mmaatthh are in effect.

           The default is --ffnnoo--aassssoocciiaattiivvee--mmaatthh.

       --ffrreecciipprrooccaall--mmaatthh
           Allow the reciprocal of a value to be used instead of
           dividing by the value if this enables optimizations.
           For example "x / y" can be replaced with "x * (1/y)",
           which is useful if "(1/y)" is subject to common
           subexpression elimination.  Note that this loses
           precision and increases the number of flops operating
           on the value.

           The default is --ffnnoo--rreecciipprrooccaall--mmaatthh.

       --ffffiinniittee--mmaatthh--oonnllyy
           Allow optimizations for floating-point arithmetic that
           assume that arguments and results are not NaNs or
           +-Infs.

           This option is not turned on by any --OO option since it
           can result in incorrect output for programs that
           depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may,
           however, yield faster code for programs that do not
           require the guarantees of these specifications.

           The default is --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.

       --ffnnoo--ssiiggnneedd--zzeerrooss
           Allow optimizations for floating-point arithmetic that
           ignore the signedness of zero.  IEEE arithmetic
           specifies the behavior of distinct +0.0 and -0.0
           values, which then prohibits simplification of
           expressions such as x+0.0 or 0.0*x (even with
           --ffffiinniittee--mmaatthh--oonnllyy).  This option implies that the
           sign of a zero result isn't significant.

           The default is --ffssiiggnneedd--zzeerrooss.

       --ffnnoo--ttrraappppiinngg--mmaatthh
           Compile code assuming that floating-point operations
           cannot generate user-visible traps.  These traps
           include division by zero, overflow, underflow, inexact
           result and invalid operation.  This option requires
           that --ffnnoo--ssiiggnnaalliinngg--nnaannss be in effect.  Setting this



gcc-4.74                    2014-06-12                        143





GCC(1)                         GNU                         GCC(1)


           option may allow faster code if one relies on
           "non-stop" IEEE arithmetic, for example.

           This option should never be turned on by any --OO option
           since it can result in incorrect output for programs
           that depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions.

           The default is --ffttrraappppiinngg--mmaatthh.

       --ffrroouunnddiinngg--mmaatthh
           Disable transformations and optimizations that assume
           default floating-point rounding behavior.  This is
           round-to-zero for all floating point to integer
           conversions, and round-to-nearest for all other
           arithmetic truncations.  This option should be
           specified for programs that change the FP rounding
           mode dynamically, or that may be executed with a non-
           default rounding mode.  This option disables constant
           folding of floating-point expressions at compile time
           (which may be affected by rounding mode) and
           arithmetic transformations that are unsafe in the
           presence of sign-dependent rounding modes.

           The default is --ffnnoo--rroouunnddiinngg--mmaatthh.

           This option is experimental and does not currently
           guarantee to disable all GCC optimizations that are
           affected by rounding mode.  Future versions of GCC may
           provide finer control of this setting using C99's
           "FENV_ACCESS" pragma.  This command-line option will
           be used to specify the default state for
           "FENV_ACCESS".

       --ffssiiggnnaalliinngg--nnaannss
           Compile code assuming that IEEE signaling NaNs may
           generate user-visible traps during floating-point
           operations.  Setting this option disables
           optimizations that may change the number of exceptions
           visible with signaling NaNs.  This option implies
           --ffttrraappppiinngg--mmaatthh.

           This option causes the preprocessor macro
           "__SUPPORT_SNAN__" to be defined.

           The default is --ffnnoo--ssiiggnnaalliinngg--nnaannss.

           This option is experimental and does not currently
           guarantee to disable all GCC optimizations that affect
           signaling NaN behavior.

       --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           Treat floating-point constants as single precision
           instead of implicitly converting them to double-



gcc-4.74                    2014-06-12                        144





GCC(1)                         GNU                         GCC(1)


           precision constants.

       --ffccxx--lliimmiitteedd--rraannggee
           When enabled, this option states that a range
           reduction step is not needed when performing complex
           division.  Also, there is no checking whether the
           result of a complex multiplication or division is "NaN
           + I*NaN", with an attempt to rescue the situation in
           that case.  The default is --ffnnoo--ccxx--lliimmiitteedd--rraannggee, but
           is enabled by --ffffaasstt--mmaatthh.

           This option controls the default setting of the ISO
           C99 "CX_LIMITED_RANGE" pragma.  Nevertheless, the
           option applies to all languages.

       --ffccxx--ffoorrttrraann--rruulleess
           Complex multiplication and division follow Fortran
           rules.  Range reduction is done as part of complex
           division, but there is no checking whether the result
           of a complex multiplication or division is "NaN +
           I*NaN", with an attempt to rescue the situation in
           that case.

           The default is --ffnnoo--ccxx--ffoorrttrraann--rruulleess.

       The following options control optimizations that may
       improve performance, but are not enabled by any --OO
       options.  This section includes experimental options that
       may produce broken code.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
           After running a program compiled with --ffpprrooffiillee--aarrccss,
           you can compile it a second time using
           --ffbbrraanncchh--pprroobbaabbiilliittiieess, to improve optimizations based
           on the number of times each branch was taken.  When
           the program compiled with --ffpprrooffiillee--aarrccss exits it
           saves arc execution counts to a file called
           _s_o_u_r_c_e_n_a_m_e_._g_c_d_a for each source file.  The information
           in this data file is very dependent on the structure
           of the generated code, so you must use the same source
           code and the same optimization options for both
           compilations.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, GCC puts a RREEGG__BBRR__PPRROOBB
           note on each JJUUMMPP__IINNSSNN and CCAALLLL__IINNSSNN.  These can be
           used to improve optimization.  Currently, they are
           only used in one place: in _r_e_o_r_g_._c, instead of
           guessing which path a branch is most likely to take,
           the RREEGG__BBRR__PPRROOBB values are used to exactly determine
           which path is taken more often.

       --ffpprrooffiillee--vvaalluueess
           If combined with --ffpprrooffiillee--aarrccss, it adds code so that
           some data about values of expressions in the program



gcc-4.74                    2014-06-12                        145





GCC(1)                         GNU                         GCC(1)


           is gathered.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data
           gathered from profiling values of expressions for
           usage in optimizations.

           Enabled with --ffpprrooffiillee--ggeenneerraattee and --ffpprrooffiillee--uussee.

       --ffvvpptt
           If combined with --ffpprrooffiillee--aarrccss, it instructs the
           compiler to add a code to gather information about
           values of expressions.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data
           gathered and actually performs the optimizations based
           on them.  Currently the optimizations include
           specialization of division operation using the
           knowledge about the value of the denominator.

       --ffrreennaammee--rreeggiisstteerrss
           Attempt to avoid false dependencies in scheduled code
           by making use of registers left over after register
           allocation.  This optimization will most benefit
           processors with lots of registers.  Depending on the
           debug information format adopted by the target,
           however, it can make debugging impossible, since
           variables will no longer stay in a "home register".

           Enabled by default with --ffuunnrroollll--llooooppss and
           --ffppeeeell--llooooppss.

       --ffttrraacceerr
           Perform tail duplication to enlarge superblock size.
           This transformation simplifies the control flow of the
           function allowing other optimizations to do better
           job.

           Enabled with --ffpprrooffiillee--uussee.

       --ffuunnrroollll--llooooppss
           Unroll loops whose number of iterations can be
           determined at compile time or upon entry to the loop.
           --ffuunnrroollll--llooooppss implies --ffrreerruunn--ccssee--aafftteerr--lloooopp, --ffwweebb
           and --ffrreennaammee--rreeggiisstteerrss.  It also turns on complete
           loop peeling (i.e. complete removal of loops with
           small constant number of iterations).  This option
           makes code larger, and may or may not make it run
           faster.

           Enabled with --ffpprrooffiillee--uussee.

       --ffuunnrroollll--aallll--llooooppss
           Unroll all loops, even if their number of iterations
           is uncertain when the loop is entered.  This usually



gcc-4.74                    2014-06-12                        146





GCC(1)                         GNU                         GCC(1)


           makes programs run more slowly.  --ffuunnrroollll--aallll--llooooppss
           implies the same options as --ffuunnrroollll--llooooppss.

       --ffppeeeell--llooooppss
           Peels loops for which there is enough information that
           they do not roll much (from profile feedback).  It
           also turns on complete loop peeling (i.e. complete
           removal of loops with small constant number of
           iterations).

           Enabled with --ffpprrooffiillee--uussee.

       --ffmmoovvee--lloooopp--iinnvvaarriiaannttss
           Enables the loop invariant motion pass in the RTL loop
           optimizer.  Enabled at level --OO11

       --ffuunnsswwiittcchh--llooooppss
           Move branches with loop invariant conditions out of
           the loop, with duplicates of the loop on both branches
           (modified according to result of the condition).

       --ffffuunnccttiioonn--sseeccttiioonnss
       --ffddaattaa--sseeccttiioonnss
           Place each function or data item into its own section
           in the output file if the target supports arbitrary
           sections.  The name of the function or the name of the
           data item determines the section's name in the output
           file.

           Use these options on systems where the linker can
           perform optimizations to improve locality of reference
           in the instruction space.  Most systems using the ELF
           object format and SPARC processors running Solaris 2
           have linkers with such optimizations.  AIX may have
           these optimizations in the future.

           Only use these options when there are significant
           benefits from doing so.  When you specify these
           options, the assembler and linker will create larger
           object and executable files and will also be slower.
           You will not be able to use "gprof" on all systems if
           you specify this option and you may have problems with
           debugging if you specify both this option and --gg.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee
           Perform branch target register load optimization
           before prologue / epilogue threading.  The use of
           target registers can typically be exposed only during
           reload, thus hoisting loads out of loops and doing
           inter-block scheduling needs a separate optimization
           pass.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22
           Perform branch target register load optimization after



gcc-4.74                    2014-06-12                        147





GCC(1)                         GNU                         GCC(1)


           prologue / epilogue threading.

       --ffbbttrr--bbbb--eexxcclluussiivvee
           When performing branch target register load
           optimization, don't reuse branch target registers in
           within any basic block.

       --ffssttaacckk--pprrootteeccttoorr
           Emit extra code to check for buffer overflows, such as
           stack smashing attacks.  This is done by adding a
           guard variable to functions with vulnerable objects.
           This includes functions that call alloca, and
           functions with buffers larger than 8 bytes.  The
           guards are initialized when a function is entered and
           then checked when the function exits.  If a guard
           check fails, an error message is printed and the
           program exits.

       --ffssttaacckk--pprrootteeccttoorr--aallll
           Like --ffssttaacckk--pprrootteeccttoorr except that all functions are
           protected.

       --ffsseeccttiioonn--aanncchhoorrss
           Try to reduce the number of symbolic address
           calculations by using shared "anchor" symbols to
           address nearby objects.  This transformation can help
           to reduce the number of GOT entries and GOT accesses
           on some targets.

           For example, the implementation of the following
           function "foo":

                   static int a, b, c;
                   int foo (void) { return a + b + c; }

           would usually calculate the addresses of all three
           variables, but if you compile it with
           --ffsseeccttiioonn--aanncchhoorrss, it will access the variables from a
           common anchor point instead.  The effect is similar to
           the following pseudocode (which isn't valid C):

                   int foo (void)
                   {
                     register int *xr = &x;
                     return xr[&a - &x] + xr[&b - &x] + xr[&c - &x];
                   }

           Not all targets support this option.

       ----ppaarraamm _n_a_m_e==_v_a_l_u_e
           In some places, GCC uses various constants to control
           the amount of optimization that is done.  For example,
           GCC will not inline functions that contain more than a
           certain number of instructions.  You can control some



gcc-4.74                    2014-06-12                        148





GCC(1)                         GNU                         GCC(1)


           of these constants on the command line using the
           ----ppaarraamm option.

           The names of specific parameters, and the meaning of
           the values, are tied to the internals of the compiler,
           and are subject to change without notice in future
           releases.

           In each case, the _v_a_l_u_e is an integer.  The allowable
           choices for _n_a_m_e are given in the following table:

           pprreeddiiccttaabbllee--bbrraanncchh--oouuttccoommee
               When branch is predicted to be taken with
               probability lower than this threshold (in
               percent), then it is considered well predictable.
               The default is 10.

           mmaaxx--ccrroossssjjuummpp--eeddggeess
               The maximum number of incoming edges to consider
               for crossjumping.  The algorithm used by
               --ffccrroossssjjuummppiinngg is O(N^2) in the number of edges
               incoming to each block.  Increasing values mean
               more aggressive optimization, making the
               compilation time increase with probably small
               improvement in executable size.

           mmiinn--ccrroossssjjuummpp--iinnssnnss
               The minimum number of instructions that must be
               matched at the end of two blocks before
               crossjumping will be performed on them.  This
               value is ignored in the case where all
               instructions in the block being crossjumped from
               are matched.  The default value is 5.

           mmaaxx--ggrrooww--ccooppyy--bbbb--iinnssnnss
               The maximum code size expansion factor when
               copying basic blocks instead of jumping.  The
               expansion is relative to a jump instruction.  The
               default value is 8.

           mmaaxx--ggoottoo--dduupplliiccaattiioonn--iinnssnnss
               The maximum number of instructions to duplicate to
               a block that jumps to a computed goto.  To avoid
               O(N^2) behavior in a number of passes, GCC factors
               computed gotos early in the compilation process,
               and unfactors them as late as possible.  Only
               computed jumps at the end of a basic blocks with
               no more than max-goto-duplication-insns are
               unfactored.  The default value is 8.

           mmaaxx--ddeellaayy--sslloott--iinnssnn--sseeaarrcchh
               The maximum number of instructions to consider
               when looking for an instruction to fill a delay
               slot.  If more than this arbitrary number of



gcc-4.74                    2014-06-12                        149





GCC(1)                         GNU                         GCC(1)


               instructions is searched, the time savings from
               filling the delay slot will be minimal so stop
               searching.  Increasing values mean more aggressive
               optimization, making the compilation time increase
               with probably small improvement in execution time.

           mmaaxx--ddeellaayy--sslloott--lliivvee--sseeaarrcchh
               When trying to fill delay slots, the maximum
               number of instructions to consider when searching
               for a block with valid live register information.
               Increasing this arbitrarily chosen value means
               more aggressive optimization, increasing the
               compilation time.  This parameter should be
               removed when the delay slot code is rewritten to
               maintain the control-flow graph.

           mmaaxx--ggccssee--mmeemmoorryy
               The approximate maximum amount of memory that will
               be allocated in order to perform the global common
               subexpression elimination optimization.  If more
               memory than specified is required, the
               optimization will not be done.

           mmaaxx--ggccssee--iinnsseerrttiioonn--rraattiioo
               If the ratio of expression insertions to deletions
               is larger than this value for any expression, then
               RTL PRE will insert or remove the expression and
               thus leave partially redundant computations in the
               instruction stream.  The default value is 20.

           mmaaxx--ppeennddiinngg--lliisstt--lleennggtthh
               The maximum number of pending dependencies
               scheduling will allow before flushing the current
               state and starting over.  Large functions with few
               branches or calls can create excessively large
               lists which needlessly consume memory and
               resources.

           mmaaxx--mmoodduulloo--bbaacckkttrraacckk--aatttteemmppttss
               The maximum number of backtrack attempts the
               scheduler should make when modulo scheduling a
               loop.  Larger values can exponentially increase
               compilation time.

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               Several parameters control the tree inliner used
               in gcc.  This number sets the maximum number of
               instructions (counted in GCC's internal
               representation) in a single function that the tree
               inliner will consider for inlining.  This only
               affects functions declared inline and methods
               implemented in a class declaration (C++).  The
               default value is 400.




gcc-4.74                    2014-06-12                        150





GCC(1)                         GNU                         GCC(1)


           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               When you use --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33),
               a lot of functions that would otherwise not be
               considered for inlining by the compiler will be
               investigated.  To those functions, a different
               (more restrictive) limit compared to functions
               declared inline can be applied.  The default value
               is 40.

           llaarrggee--ffuunnccttiioonn--iinnssnnss
               The limit specifying really large functions.  For
               functions larger than this limit after inlining,
               inlining is constrained by ----ppaarraamm llaarrggee--ffuunnccttiioonn--
               ggrroowwtthh.  This parameter is useful primarily to
               avoid extreme compilation time caused by non-
               linear algorithms used by the back end.  The
               default value is 2700.

           llaarrggee--ffuunnccttiioonn--ggrroowwtthh
               Specifies maximal growth of large function caused
               by inlining in percents.  The default value is 100
               which limits large function growth to 2.0 times
               the original size.

           llaarrggee--uunniitt--iinnssnnss
               The limit specifying large translation unit.
               Growth caused by inlining of units larger than
               this limit is limited by ----ppaarraamm iinnlliinnee--uunniitt--
               ggrroowwtthh.  For small units this might be too tight
               (consider unit consisting of function A that is
               inline and B that just calls A three time.  If B
               is small relative to A, the growth of unit is
               300\% and yet such inlining is very sane.  For
               very large units consisting of small inlineable
               functions however the overall unit growth limit is
               needed to avoid exponential explosion of code
               size.  Thus for smaller units, the size is
               increased to ----ppaarraamm llaarrggee--uunniitt--iinnssnnss before
               applying ----ppaarraamm iinnlliinnee--uunniitt--ggrroowwtthh.  The default
               is 10000

           iinnlliinnee--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the
               compilation unit caused by inlining.  The default
               value is 30 which limits unit growth to 1.3 times
               the original size.

           iippccpp--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the
               compilation unit caused by interprocedural
               constant propagation.  The default value is 10
               which limits unit growth to 1.1 times the original
               size.




gcc-4.74                    2014-06-12                        151





GCC(1)                         GNU                         GCC(1)


           llaarrggee--ssttaacckk--ffrraammee
               The limit specifying large stack frames.  While
               inlining the algorithm is trying to not grow past
               this limit too much.  Default value is 256 bytes.

           llaarrggee--ssttaacckk--ffrraammee--ggrroowwtthh
               Specifies maximal growth of large stack frames
               caused by inlining in percents.  The default value
               is 1000 which limits large stack frame growth to
               11 times the original size.

           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee
           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee--aauuttoo
               Specifies maximum number of instructions out-of-
               line copy of self recursive inline function can
               grow into by performing recursive inlining.

               For functions declared inline ----ppaarraamm mmaaxx--iinnlliinnee--
               iinnssnnss--rreeccuurrssiivvee is taken into account.  For
               function not declared inline, recursive inlining
               happens only when --ffiinnlliinnee--ffuunnccttiioonnss (included in
               --OO33) is enabled and ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--
               rreeccuurrssiivvee--aauuttoo is used.  The default value is 450.

           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh
           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh--aauuttoo
               Specifies maximum recursion depth used by the
               recursive inlining.

               For functions declared inline ----ppaarraamm mmaaxx--iinnlliinnee--
               rreeccuurrssiivvee--ddeepptthh is taken into account.  For
               function not declared inline, recursive inlining
               happens only when --ffiinnlliinnee--ffuunnccttiioonnss (included in
               --OO33) is enabled and ----ppaarraamm mmaaxx--iinnlliinnee--rreeccuurrssiivvee--
               ddeepptthh--aauuttoo is used.  The default value is 8.

           mmiinn--iinnlliinnee--rreeccuurrssiivvee--pprroobbaabbiilliittyy
               Recursive inlining is profitable only for function
               having deep recursion in average and can hurt for
               function having little recursion depth by
               increasing the prologue size or complexity of
               function body to other optimizers.

               When profile feedback is available (see
               --ffpprrooffiillee--ggeenneerraattee) the actual recursion depth can
               be guessed from probability that function will
               recurse via given call expression.  This parameter
               limits inlining only to call expression whose
               probability exceeds given threshold (in percents).
               The default value is 10.

           eeaarrllyy--iinnlliinniinngg--iinnssnnss
               Specify growth that early inliner can make.  In
               effect it increases amount of inlining for code



gcc-4.74                    2014-06-12                        152





GCC(1)                         GNU                         GCC(1)


               having large abstraction penalty.  The default
               value is 10.

           mmaaxx--eeaarrllyy--iinnlliinneerr--iitteerraattiioonnss
           mmaaxx--eeaarrllyy--iinnlliinneerr--iitteerraattiioonnss
               Limit of iterations of early inliner.  This
               basically bounds number of nested indirect calls
               early inliner can resolve.  Deeper chains are
               still handled by late inlining.

           ccoommddaatt--sshhaarriinngg--pprroobbaabbiilliittyy
           ccoommddaatt--sshhaarriinngg--pprroobbaabbiilliittyy
               Probability (in percent) that C++ inline function
               with comdat visibility will be shared across
               multiple compilation units.  The default value is
               20.

           mmiinn--vveecctt--lloooopp--bboouunndd
               The minimum number of iterations under which a
               loop will not get vectorized when --ffttrreeee--vveeccttoorriizzee
               is used.  The number of iterations after
               vectorization needs to be greater than the value
               specified by this option to allow vectorization.
               The default value is 0.

           ggccssee--ccoosstt--ddiissttaannccee--rraattiioo
               Scaling factor in calculation of maximum distance
               an expression can be moved by GCSE optimizations.
               This is currently supported only in the code
               hoisting pass.  The bigger the ratio, the more
               aggressive code hoisting will be with simple
               expressions, i.e., the expressions that have cost
               less than ggccssee--uunnrreessttrriicctteedd--ccoosstt.  Specifying 0
               will disable hoisting of simple expressions.  The
               default value is 10.

           ggccssee--uunnrreessttrriicctteedd--ccoosstt
               Cost, roughly measured as the cost of a single
               typical machine instruction, at which GCSE
               optimizations will not constrain the distance an
               expression can travel.  This is currently
               supported only in the code hoisting pass.  The
               lesser the cost, the more aggressive code hoisting
               will be.  Specifying 0 will allow all expressions
               to travel unrestricted distances.  The default
               value is 3.

           mmaaxx--hhooiisstt--ddeepptthh
               The depth of search in the dominator tree for
               expressions to hoist.  This is used to avoid
               quadratic behavior in hoisting algorithm.  The
               value of 0 will avoid limiting the search, but may
               slow down compilation of huge functions.  The
               default value is 30.



gcc-4.74                    2014-06-12                        153





GCC(1)                         GNU                         GCC(1)


           mmaaxx--ttaaiill--mmeerrggee--ccoommppaarriissoonnss
               The maximum amount of similar bbs to compare a bb
               with.  This is used to avoid quadratic behavior in
               tree tail merging.  The default value is 10.

           mmaaxx--ttaaiill--mmeerrggee--iitteerraattiioonnss
               The maximum amount of iterations of the pass over
               the function.  This is used to limit compilation
               time in tree tail merging.  The default value is
               2.

           mmaaxx--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions that a loop
               should have if that loop is unrolled, and if the
               loop is unrolled, it determines how many times the
               loop code is unrolled.

           mmaaxx--aavveerraaggee--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions biased by
               probabilities of their execution that a loop
               should have if that loop is unrolled, and if the
               loop is unrolled, it determines how many times the
               loop code is unrolled.

           mmaaxx--uunnrroollll--ttiimmeess
               The maximum number of unrollings of a single loop.

           mmaaxx--ppeeeelleedd--iinnssnnss
               The maximum number of instructions that a loop
               should have if that loop is peeled, and if the
               loop is peeled, it determines how many times the
               loop code is peeled.

           mmaaxx--ppeeeell--ttiimmeess
               The maximum number of peelings of a single loop.

           mmaaxx--ccoommpplleetteellyy--ppeeeelleedd--iinnssnnss
               The maximum number of insns of a completely peeled
               loop.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--ttiimmeess
               The maximum number of iterations of a loop to be
               suitable for complete peeling.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--lloooopp--nneesstt--ddeepptthh
               The maximum depth of a loop nest suitable for
               complete peeling.

           mmaaxx--uunnsswwiittcchh--iinnssnnss
               The maximum number of insns of an unswitched loop.

           mmaaxx--uunnsswwiittcchh--lleevveell
               The maximum number of branches unswitched in a
               single loop.



gcc-4.74                    2014-06-12                        154





GCC(1)                         GNU                         GCC(1)


           lliimm--eexxppeennssiivvee
               The minimum cost of an expensive expression in the
               loop invariant motion.

           iivv--ccoonnssiiddeerr--aallll--ccaannddiiddaatteess--bboouunndd
               Bound on number of candidates for induction
               variables below that all candidates are considered
               for each use in induction variable optimizations.
               Only the most relevant candidates are considered
               if there are more candidates, to avoid quadratic
               time complexity.

           iivv--mmaaxx--ccoonnssiiddeerreedd--uusseess
               The induction variable optimizations give up on
               loops that contain more induction variable uses.

           iivv--aallwwaayyss--pprruunnee--ccaanndd--sseett--bboouunndd
               If number of candidates in the set is smaller than
               this value, we always try to remove unnecessary
               ivs from the set during its optimization when a
               new iv is added to the set.

           sscceevv--mmaaxx--eexxpprr--ssiizzee
               Bound on size of expressions used in the scalar
               evolutions analyzer.  Large expressions slow the
               analyzer.

           sscceevv--mmaaxx--eexxpprr--ccoommpplleexxiittyy
               Bound on the complexity of the expressions in the
               scalar evolutions analyzer.  Complex expressions
               slow the analyzer.

           oommeeggaa--mmaaxx--vvaarrss
               The maximum number of variables in an Omega
               constraint system.  The default value is 128.

           oommeeggaa--mmaaxx--ggeeqqss
               The maximum number of inequalities in an Omega
               constraint system.  The default value is 256.

           oommeeggaa--mmaaxx--eeqqss
               The maximum number of equalities in an Omega
               constraint system.  The default value is 128.

           oommeeggaa--mmaaxx--wwiilldd--ccaarrddss
               The maximum number of wildcard variables that the
               Omega solver will be able to insert.  The default
               value is 18.

           oommeeggaa--hhaasshh--ttaabbllee--ssiizzee
               The size of the hash table in the Omega solver.
               The default value is 550.





gcc-4.74                    2014-06-12                        155





GCC(1)                         GNU                         GCC(1)


           oommeeggaa--mmaaxx--kkeeyyss
               The maximal number of keys used by the Omega
               solver.  The default value is 500.

           oommeeggaa--eelliimmiinnaattee--rreedduunnddaanntt--ccoonnssttrraaiinnttss
               When set to 1, use expensive methods to eliminate
               all redundant constraints.  The default value is
               0.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiggnnmmeenntt--cchheecckkss
               The maximum number of run-time checks that can be
               performed when doing loop versioning for alignment
               in the vectorizer.  See option ftree-vect-loop-
               version for more information.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiaass--cchheecckkss
               The maximum number of run-time checks that can be
               performed when doing loop versioning for alias in
               the vectorizer.  See option ftree-vect-loop-
               version for more information.

           mmaaxx--iitteerraattiioonnss--ttoo--ttrraacckk
               The maximum number of iterations of a loop the
               brute force algorithm for analysis of # of
               iterations of the loop tries to evaluate.

           hhoott--bbbb--ccoouunntt--ffrraaccttiioonn
               Select fraction of the maximal count of
               repetitions of basic block in program given basic
               block needs to have to be considered hot.

           hhoott--bbbb--ffrreeqquueennccyy--ffrraaccttiioonn
               Select fraction of the entry block frequency of
               executions of basic block in function given basic
               block needs to have to be considered hot.

           mmaaxx--pprreeddiicctteedd--iitteerraattiioonnss
               The maximum number of loop iterations we predict
               statically.  This is useful in cases where
               function contain single loop with known bound and
               other loop with unknown.  We predict the known
               number of iterations correctly, while the unknown
               number of iterations average to roughly 10.  This
               means that the loop without bounds would appear
               artificially cold relative to the other one.

           aalliiggnn--tthhrreesshhoolldd
               Select fraction of the maximal frequency of
               executions of basic block in function given basic
               block will get aligned.

           aalliiggnn--lloooopp--iitteerraattiioonnss
               A loop expected to iterate at lest the selected
               number of iterations will get aligned.



gcc-4.74                    2014-06-12                        156





GCC(1)                         GNU                         GCC(1)


           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee
           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
               This value is used to limit superblock formation
               once the given percentage of executed instructions
               is covered.  This limits unnecessary code size
               expansion.

               The ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk is used only
               when profile feedback is available.  The real
               profiles (as opposed to statically estimated ones)
               are much less balanced allowing the threshold to
               be larger value.

           ttrraacceerr--mmaaxx--ccooddee--ggrroowwtthh
               Stop tail duplication once code growth has reached
               given percentage.  This is rather hokey argument,
               as most of the duplicates will be eliminated later
               in cross jumping, so it may be set to much higher
               values than is the desired code growth.

           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
               Stop reverse growth when the reverse probability
               of best edge is less than this threshold (in
               percent).

           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo--ffeeeeddbbaacckk
               Stop forward growth if the best edge do have
               probability lower than this threshold.

               Similarly to ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee two values
               are present, one for compilation for profile
               feedback and one for compilation without.  The
               value for compilation with profile feedback needs
               to be more conservative (higher) in order to make
               tracer effective.

           mmaaxx--ccssee--ppaatthh--lleennggtthh
               Maximum number of basic blocks on path that cse
               considers.  The default is 10.

           mmaaxx--ccssee--iinnssnnss
               The maximum instructions CSE process before
               flushing. The default is 1000.

           ggggcc--mmiinn--eexxppaanndd
               GCC uses a garbage collector to manage its own
               memory allocation.  This parameter specifies the
               minimum percentage by which the garbage
               collector's heap should be allowed to expand
               between collections.  Tuning this may improve
               compilation speed; it has no effect on code
               generation.




gcc-4.74                    2014-06-12                        157





GCC(1)                         GNU                         GCC(1)


               The default is 30% + 70% * (RAM/1GB) with an upper
               bound of 100% when RAM >= 1GB.  If "getrlimit" is
               available, the notion of "RAM" is the smallest of
               actual RAM and "RLIMIT_DATA" or "RLIMIT_AS".  If
               GCC is not able to calculate RAM on a particular
               platform, the lower bound of 30% is used.  Setting
               this parameter and ggggcc--mmiinn--hheeaappssiizzee to zero causes
               a full collection to occur at every opportunity.
               This is extremely slow, but can be useful for
               debugging.

           ggggcc--mmiinn--hheeaappssiizzee
               Minimum size of the garbage collector's heap
               before it begins bothering to collect garbage.
               The first collection occurs after the heap expands
               by ggggcc--mmiinn--eexxppaanndd% beyond ggggcc--mmiinn--hheeaappssiizzee.
               Again, tuning this may improve compilation speed,
               and has no effect on code generation.

               The default is the smaller of RAM/8, RLIMIT_RSS,
               or a limit that tries to ensure that RLIMIT_DATA
               or RLIMIT_AS are not exceeded, but with a lower
               bound of 4096 (four megabytes) and an upper bound
               of 131072 (128 megabytes).  If GCC is not able to
               calculate RAM on a particular platform, the lower
               bound is used.  Setting this parameter very large
               effectively disables garbage collection.  Setting
               this parameter and ggggcc--mmiinn--eexxppaanndd to zero causes a
               full collection to occur at every opportunity.

           mmaaxx--rreellooaadd--sseeaarrcchh--iinnssnnss
               The maximum number of instruction reload should
               look backward for equivalent register.  Increasing
               values mean more aggressive optimization, making
               the compilation time increase with probably
               slightly better performance.  The default value is
               100.

           mmaaxx--ccsseelliibb--mmeemmoorryy--llooccaattiioonnss
               The maximum number of memory locations cselib
               should take into account.  Increasing values mean
               more aggressive optimization, making the
               compilation time increase with probably slightly
               better performance.  The default value is 500.

           rreeoorrddeerr--bblloocckkss--dduupplliiccaattee
           rreeoorrddeerr--bblloocckkss--dduupplliiccaattee--ffeeeeddbbaacckk
               Used by basic block reordering pass to decide
               whether to use unconditional branch or duplicate
               the code on its destination.  Code is duplicated
               when its estimated size is smaller than this value
               multiplied by the estimated size of unconditional
               jump in the hot spots of the program.




gcc-4.74                    2014-06-12                        158





GCC(1)                         GNU                         GCC(1)


               The rreeoorrddeerr--bblloocckk--dduupplliiccaattee--ffeeeeddbbaacckk is used only
               when profile feedback is available and may be set
               to higher values than rreeoorrddeerr--bblloocckk--dduupplliiccaattee
               since information about the hot spots is more
               accurate.

           mmaaxx--sscchheedd--rreeaaddyy--iinnssnnss
               The maximum number of instructions ready to be
               issued the scheduler should consider at any given
               time during the first scheduling pass.  Increasing
               values mean more thorough searches, making the
               compilation time increase with probably little
               benefit.  The default value is 100.

           mmaaxx--sscchheedd--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be
               considered for interblock scheduling.  The default
               value is 10.

           mmaaxx--ppiippeelliinnee--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be
               considered for pipelining in the selective
               scheduler.  The default value is 15.

           mmaaxx--sscchheedd--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be
               considered for interblock scheduling.  The default
               value is 100.

           mmaaxx--ppiippeelliinnee--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be
               considered for pipelining in the selective
               scheduler.  The default value is 200.

           mmiinn--ssppeecc--pprroobb
               The minimum probability (in percents) of reaching
               a source block for interblock speculative
               scheduling.  The default value is 40.

           mmaaxx--sscchheedd--eexxtteenndd--rreeggiioonnss--iitteerrss
               The maximum number of iterations through CFG to
               extend regions.  0 - disable region extension, N -
               do at most N iterations.  The default value is 0.

           mmaaxx--sscchheedd--iinnssnn--ccoonnfflliicctt--ddeellaayy
               The maximum conflict delay for an insn to be
               considered for speculative motion.  The default
               value is 3.

           sscchheedd--ssppeecc--pprroobb--ccuuttooffff
               The minimal probability of speculation success (in
               percents), so that speculative insn will be
               scheduled.  The default value is 40.




gcc-4.74                    2014-06-12                        159





GCC(1)                         GNU                         GCC(1)


           sscchheedd--mmeemm--ttrruuee--ddeepp--ccoosstt
               Minimal distance (in CPU cycles) between store and
               load targeting same memory locations.  The default
               value is 1.

           sseellsscchheedd--mmaaxx--llooookkaahheeaadd
               The maximum size of the lookahead window of
               selective scheduling.  It is a depth of search for
               available instructions.  The default value is 50.

           sseellsscchheedd--mmaaxx--sscchheedd--ttiimmeess
               The maximum number of times that an instruction
               will be scheduled during selective scheduling.
               This is the limit on the number of iterations
               through which the instruction may be pipelined.
               The default value is 2.

           sseellsscchheedd--mmaaxx--iinnssnnss--ttoo--rreennaammee
               The maximum number of best instructions in the
               ready list that are considered for renaming in the
               selective scheduler.  The default value is 2.

           ssmmss--mmiinn--sscc
               The minimum value of stage count that swing modulo
               scheduler will generate.  The default value is 2.

           mmaaxx--llaasstt--vvaalluuee--rrttll
               The maximum size measured as number of RTLs that
               can be recorded in an expression in combiner for a
               pseudo register as last known value of that
               register.  The default is 10000.

           iinntteeggeerr--sshhaarree--lliimmiitt
               Small integer constants can use a shared data
               structure, reducing the compiler's memory usage
               and increasing its speed.  This sets the maximum
               value of a shared integer constant.  The default
               value is 256.

           mmiinn--vviirrttuuaall--mmaappppiinnggss
               Specifies the minimum number of virtual mappings
               in the incremental SSA updater that should be
               registered to trigger the virtual mappings
               heuristic defined by virtual-mappings-ratio.  The
               default value is 100.

           vviirrttuuaall--mmaappppiinnggss--rraattiioo
               If the number of virtual mappings is virtual-
               mappings-ratio bigger than the number of virtual
               symbols to be updated, then the incremental SSA
               updater switches to a full update for those
               symbols.  The default ratio is 3.





gcc-4.74                    2014-06-12                        160





GCC(1)                         GNU                         GCC(1)


           sssspp--bbuuffffeerr--ssiizzee
               The minimum size of buffers (i.e. arrays) that
               will receive stack smashing protection when
               --ffssttaacckk--pprrootteeccttiioonn is used.

           mmaaxx--jjuummpp--tthhrreeaadd--dduupplliiccaattiioonn--ssttmmttss
               Maximum number of statements allowed in a block
               that needs to be duplicated when threading jumps.

           mmaaxx--ffiieellddss--ffoorr--ffiieelldd--sseennssiittiivvee
               Maximum number of fields in a structure we will
               treat in a field sensitive manner during pointer
               analysis.  The default is zero for -O0, and -O1
               and 100 for -Os, -O2, and -O3.

           pprreeffeettcchh--llaatteennccyy
               Estimate on average number of instructions that
               are executed before prefetch finishes.  The
               distance we prefetch ahead is proportional to this
               constant.  Increasing this number may also lead to
               less streams being prefetched (see ssiimmuullttaanneeoouuss--
               pprreeffeettcchheess).

           ssiimmuullttaanneeoouuss--pprreeffeettcchheess
               Maximum number of prefetches that can run at the
               same time.

           ll11--ccaacchhee--lliinnee--ssiizzee
               The size of cache line in L1 cache, in bytes.

           ll11--ccaacchhee--ssiizzee
               The size of L1 cache, in kilobytes.

           ll22--ccaacchhee--ssiizzee
               The size of L2 cache, in kilobytes.

           mmiinn--iinnssnn--ttoo--pprreeffeettcchh--rraattiioo
               The minimum ratio between the number of
               instructions and the number of prefetches to
               enable prefetching in a loop.

           pprreeffeettcchh--mmiinn--iinnssnn--ttoo--mmeemm--rraattiioo
               The minimum ratio between the number of
               instructions and the number of memory references
               to enable prefetching in a loop.

           uussee--ccaannoonniiccaall--ttyyppeess
               Whether the compiler should use the "canonical"
               type system.  By default, this should always be 1,
               which uses a more efficient internal mechanism for
               comparing types in C++ and Objective-C++.
               However, if bugs in the canonical type system are
               causing compilation failures, set this value to 0
               to disable canonical types.



gcc-4.74                    2014-06-12                        161





GCC(1)                         GNU                         GCC(1)


           sswwiittcchh--ccoonnvveerrssiioonn--mmaaxx--bbrraanncchh--rraattiioo
               Switch initialization conversion will refuse to
               create arrays that are bigger than sswwiittcchh--
               ccoonnvveerrssiioonn--mmaaxx--bbrraanncchh--rraattiioo times the number of
               branches in the switch.

           mmaaxx--ppaarrttiiaall--aannttiicc--lleennggtthh
               Maximum length of the partial antic set computed
               during the tree partial redundancy elimination
               optimization (--ffttrreeee--pprree) when optimizing at --OO33
               and above.  For some sorts of source code the
               enhanced partial redundancy elimination
               optimization can run away, consuming all of the
               memory available on the host machine.  This
               parameter sets a limit on the length of the sets
               that are computed, which prevents the runaway
               behavior.  Setting a value of 0 for this parameter
               will allow an unlimited set length.

           ssccccvvnn--mmaaxx--sscccc--ssiizzee
               Maximum size of a strongly connected component
               (SCC) during SCCVN processing.  If this limit is
               hit, SCCVN processing for the whole function will
               not be done and optimizations depending on it will
               be disabled.  The default maximum SCC size is
               10000.

           iirraa--mmaaxx--llooooppss--nnuumm
               IRA uses regional register allocation by default.
               If a function contains more loops than the number
               given by this parameter, only at most the given
               number of the most frequently-executed loops form
               regions for regional register allocation.  The
               default value of the parameter is 100.

           iirraa--mmaaxx--ccoonnfflliicctt--ttaabbllee--ssiizzee
               Although IRA uses a sophisticated algorithm to
               compress the conflict table, the table can still
               require excessive amounts of memory for huge
               functions.  If the conflict table for a function
               could be more than the size in MB given by this
               parameter, the register allocator instead uses a
               faster, simpler, and lower-quality algorithm that
               does not require building a pseudo-register
               conflict table.  The default value of the
               parameter is 2000.

           iirraa--lloooopp--rreesseerrvveedd--rreeggss
               IRA can be used to evaluate more accurate register
               pressure in loops for decisions to move loop
               invariants (see --OO33).  The number of available
               registers reserved for some other purposes is
               given by this parameter.  The default value of the
               parameter is 2, which is the minimal number of



gcc-4.74                    2014-06-12                        162





GCC(1)                         GNU                         GCC(1)


               registers needed by typical instructions.  This
               value is the best found from numerous experiments.

           lloooopp--iinnvvaarriiaanntt--mmaaxx--bbbbss--iinn--lloooopp
               Loop invariant motion can be very expensive, both
               in compilation time and in amount of needed
               compile-time memory, with very large loops.  Loops
               with more basic blocks than this parameter won't
               have loop invariant motion optimization performed
               on them.  The default value of the parameter is
               1000 for -O1 and 10000 for -O2 and above.

           lloooopp--mmaaxx--ddaattaarreeffss--ffoorr--ddaattaaddeeppss
               Building data dapendencies is expensive for very
               large loops.  This parameter limits the number of
               data references in loops that are considered for
               data dependence analysis.  These large loops will
               not be handled then by the optimizations using
               loop data dependencies.  The default value is
               1000.

           mmaaxx--vvaarrttrraacckk--ssiizzee
               Sets a maximum number of hash table slots to use
               during variable tracking dataflow analysis of any
               function.  If this limit is exceeded with variable
               tracking at assignments enabled, analysis for that
               function is retried without it, after removing all
               debug insns from the function.  If the limit is
               exceeded even without debug insns, var tracking
               analysis is completely disabled for the function.
               Setting the parameter to zero makes it unlimited.

           mmaaxx--vvaarrttrraacckk--eexxpprr--ddeepptthh
               Sets a maximum number of recursion levels when
               attempting to map variable names or debug
               temporaries to value expressions.  This trades
               compilation time for more complete debug
               information.  If this is set too low, value
               expressions that are available and could be
               represented in debug information may end up not
               being used; setting this higher may enable the
               compiler to find more complex debug expressions,
               but compile time and memory use may grow.  The
               default is 12.

           mmiinn--nnoonnddeebbuugg--iinnssnn--uuiidd
               Use uids starting at this parameter for nondebug
               insns.  The range below the parameter is reserved
               exclusively for debug insns created by
               --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss, but debug insns may
               get (non-overlapping) uids above it if the
               reserved range is exhausted.





gcc-4.74                    2014-06-12                        163





GCC(1)                         GNU                         GCC(1)


           iippaa--ssrraa--ppttrr--ggrroowwtthh--ffaaccttoorr
               IPA-SRA will replace a pointer to an aggregate
               with one or more new parameters only when their
               cumulative size is less or equal to iippaa--ssrraa--ppttrr--
               ggrroowwtthh--ffaaccttoorr times the size of the original
               pointer parameter.

           ttmm--mmaaxx--aaggggrreeggaattee--ssiizzee
               When making copies of thread-local variables in a
               transaction, this parameter specifies the size in
               bytes after which variables will be saved with the
               logging functions as opposed to save/restore code
               sequence pairs.  This option only applies when
               using --ffggnnuu--ttmm.

           ggrraapphhiittee--mmaaxx--nnbb--ssccoopp--ppaarraammss
               To avoid exponential effects in the Graphite loop
               transforms, the number of parameters in a Static
               Control Part (SCoP) is bounded.  The default value
               is 10 parameters.  A variable whose value is
               unknown at compilation time and defined outside a
               SCoP is a parameter of the SCoP.

           ggrraapphhiittee--mmaaxx--bbbbss--ppeerr--ffuunnccttiioonn
               To avoid exponential effects in the detection of
               SCoPs, the size of the functions analyzed by
               Graphite is bounded.  The default value is 100
               basic blocks.

           lloooopp--bblloocckk--ttiillee--ssiizzee
               Loop blocking or strip mining transforms, enabled
               with --fflloooopp--bblloocckk or --fflloooopp--ssttrriipp--mmiinnee, strip mine
               each loop in the loop nest by a given number of
               iterations.  The strip length can be changed using
               the lloooopp--bblloocckk--ttiillee--ssiizzee parameter.  The default
               value is 51 iterations.

           iippaa--ccpp--vvaalluuee--lliisstt--ssiizzee
               IPA-CP attempts to track all possible values and
               types passed to a function's parameter in order to
               propagate them and perform devirtualization.  iippaa--
               ccpp--vvaalluuee--lliisstt--ssiizzee is the maximum number of values
               and types it stores per one formal parameter of a
               function.

           llttoo--ppaarrttiittiioonnss
               Specify desired number of partitions produced
               during WHOPR compilation.  The number of
               partitions should exceed the number of CPUs used
               for compilation.  The default value is 32.

           llttoo--mmiinnppaarrttiittiioonn
               Size of minimal partition for WHOPR (in estimated
               instructions).  This prevents expenses of



gcc-4.74                    2014-06-12                        164





GCC(1)                         GNU                         GCC(1)


               splitting very small programs into too many
               partitions.

           ccxxxx--mmaaxx--nnaammeessppaacceess--ffoorr--ddiiaaggnnoossttiicc--hheellpp
               The maximum number of namespaces to consult for
               suggestions when C++ name lookup fails for an
               identifier.  The default is 1000.

           ssiinnkk--ffrreeqquueennccyy--tthhrreesshhoolldd
               The maximum relative execution frequency (in
               percents) of the target block relative to a
               statement's original block to allow statement
               sinking of a statement.  Larger numbers result in
               more aggressive statement sinking.  The default
               value is 75.  A small positive adjustment is
               applied for statements with memory operands as
               those are even more profitable so sink.

           mmaaxx--ssttoorreess--ttoo--ssiinnkk
               The maximum number of conditional stores paires
               that can be sunk.  Set to 0 if either
               vectorization (--ffttrreeee--vveeccttoorriizzee) or if-conversion
               (--ffttrreeee--lloooopp--iiff--ccoonnvveerrtt) is disabled.  The default
               is 2.

           aallllooww--llooaadd--ddaattaa--rraacceess
               Allow optimizers to introduce new data races on
               loads.  Set to 1 to allow, otherwise to 0.  This
               option is enabled by default unless implicitly set
               by the --ffmmeemmoorryy--mmooddeell== option.

           aallllooww--ssttoorree--ddaattaa--rraacceess
               Allow optimizers to introduce new data races on
               stores.  Set to 1 to allow, otherwise to 0.  This
               option is enabled by default unless implicitly set
               by the --ffmmeemmoorryy--mmooddeell== option.

           aallllooww--ppaacckkeedd--llooaadd--ddaattaa--rraacceess
               Allow optimizers to introduce new data races on
               packed data loads.  Set to 1 to allow, otherwise
               to 0.  This option is enabled by default unless
               implicitly set by the --ffmmeemmoorryy--mmooddeell== option.

           aallllooww--ppaacckkeedd--ssttoorree--ddaattaa--rraacceess
               Allow optimizers to introduce new data races on
               packed data stores.  Set to 1 to allow, otherwise
               to 0.  This option is enabled by default unless
               implicitly set by the --ffmmeemmoorryy--mmooddeell== option.

           ccaassee--vvaalluueess--tthhrreesshhoolldd
               The smallest number of different values for which
               it is best to use a jump-table instead of a tree
               of conditional branches.  If the value is 0, use
               the default for the machine.  The default is 0.



gcc-4.74                    2014-06-12                        165





GCC(1)                         GNU                         GCC(1)


           ttrreeee--rreeaassssoocc--wwiiddtthh
               Set the maximum number of instructions executed in
               parallel in reassociated tree. This parameter
               overrides target dependent heuristics used by
               default if has non zero value.

       OOppttiioonnss CCoonnttrroolllliinngg tthhee PPrreepprroocceessssoorr

       These options control the C preprocessor, which is run on
       each C source file before actual compilation.

       If you use the --EE option, nothing is done except
       preprocessing.  Some of these options make sense only
       together with --EE because they cause the preprocessor
       output to be unsuitable for actual compilation.

       --WWpp,,_o_p_t_i_o_n
           You can use --WWpp,,_o_p_t_i_o_n to bypass the compiler driver
           and pass _o_p_t_i_o_n directly through to the preprocessor.
           If _o_p_t_i_o_n contains commas, it is split into multiple
           options at the commas.  However, many options are
           modified, translated or interpreted by the compiler
           driver before being passed to the preprocessor, and
           --WWpp forcibly bypasses this phase.  The preprocessor's
           direct interface is undocumented and subject to
           change, so whenever possible you should avoid using
           --WWpp and let the driver handle the options instead.

       --XXpprreepprroocceessssoorr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the preprocessor.  You can
           use this to supply system-specific preprocessor
           options that GCC does not know how to recognize.

           If you want to pass an option that takes an argument,
           you must use --XXpprreepprroocceessssoorr twice, once for the option
           and once for the argument.

       --DD _n_a_m_e
           Predefine _n_a_m_e as a macro, with definition 1.

       --DD _n_a_m_e==_d_e_f_i_n_i_t_i_o_n
           The contents of _d_e_f_i_n_i_t_i_o_n are tokenized and processed
           as if they appeared during translation phase three in
           a ##ddeeffiinnee directive.  In particular, the definition
           will be truncated by embedded newline characters.

           If you are invoking the preprocessor from a shell or
           shell-like program you may need to use the shell's
           quoting syntax to protect characters such as spaces
           that have a meaning in the shell syntax.

           If you wish to define a function-like macro on the
           command line, write its argument list with surrounding
           parentheses before the equals sign (if any).



gcc-4.74                    2014-06-12                        166





GCC(1)                         GNU                         GCC(1)


           Parentheses are meaningful to most shells, so you will
           need to quote the option.  With sshh and ccsshh,
           --DD''_n_a_m_e((_a_r_g_s_._._.))==_d_e_f_i_n_i_t_i_o_n'' works.

           --DD and --UU options are processed in the order they are
           given on the command line.  All --iimmaaccrrooss _f_i_l_e and
           --iinncclluuddee _f_i_l_e options are processed after all --DD and
           --UU options.

       --UU _n_a_m_e
           Cancel any previous definition of _n_a_m_e, either built
           in or provided with a --DD option.

       --uunnddeeff
           Do not predefine any system-specific or GCC-specific
           macros.  The standard predefined macros remain
           defined.

       --II _d_i_r
           Add the directory _d_i_r to the list of directories to be
           searched for header files.  Directories named by --II
           are searched before the standard system include
           directories.  If the directory _d_i_r is a standard
           system include directory, the option is ignored to
           ensure that the default search order for system
           directories and the special treatment of system
           headers are not defeated .  If _d_i_r begins with "=",
           then the "=" will be replaced by the sysroot prefix;
           see ----ssyyssrroooott and --iissyyssrroooott.

       --oo _f_i_l_e
           Write output to _f_i_l_e.  This is the same as specifying
           _f_i_l_e as the second non-option argument to ccpppp.  ggcccc
           has a different interpretation of a second non-option
           argument, so you must use --oo to specify the output
           file.

       --WWaallll
           Turns on all optional warnings which are desirable for
           normal code.  At present this is --WWccoommmmeenntt,
           --WWttrriiggrraapphhss, --WWmmuullttiicchhaarr and a warning about integer
           promotion causing a change of sign in "#if"
           expressions.  Note that many of the preprocessor's
           warnings are on by default and have no options to
           control them.

       --WWccoommmmeenntt
       --WWccoommmmeennttss
           Warn whenever a comment-start sequence //** appears in a
           //** comment, or whenever a backslash-newline appears in
           a //// comment.  (Both forms have the same effect.)

       --WWttrriiggrraapphhss
           Most trigraphs in comments cannot affect the meaning



gcc-4.74                    2014-06-12                        167





GCC(1)                         GNU                         GCC(1)


           of the program.  However, a trigraph that would form
           an escaped newline (????// at the end of a line) can, by
           changing where the comment begins or ends.  Therefore,
           only trigraphs that would form escaped newlines
           produce warnings inside a comment.

           This option is implied by --WWaallll.  If --WWaallll is not
           given, this option is still enabled unless trigraphs
           are enabled.  To get trigraph conversion without
           warnings, but get the other --WWaallll warnings, use
           --ttrriiggrraapphhss --WWaallll --WWnnoo--ttrriiggrraapphhss.

       --WWttrraaddiittiioonnaall
           Warn about certain constructs that behave differently
           in traditional and ISO C.  Also warn about ISO C
           constructs that have no traditional C equivalent, and
           problematic constructs which should be avoided.

       --WWuunnddeeff
           Warn whenever an identifier which is not a macro is
           encountered in an ##iiff directive, outside of ddeeffiinneedd.
           Such identifiers are replaced with zero.

       --WWuunnuusseedd--mmaaccrrooss
           Warn about macros defined in the main file that are
           unused.  A macro is _u_s_e_d if it is expanded or tested
           for existence at least once.  The preprocessor will
           also warn if the macro has not been used at the time
           it is redefined or undefined.

           Built-in macros, macros defined on the command line,
           and macros defined in include files are not warned
           about.

           _N_o_t_e_: If a macro is actually used, but only used in
           skipped conditional blocks, then CPP will report it as
           unused.  To avoid the warning in such a case, you
           might improve the scope of the macro's definition by,
           for example, moving it into the first skipped block.
           Alternatively, you could provide a dummy use with
           something like:

                   #if defined the_macro_causing_the_warning
                   #endif

       --WWeennddiiff--llaabbeellss
           Warn whenever an ##eellssee or an ##eennddiiff are followed by
           text.  This usually happens in code of the form

                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO



gcc-4.74                    2014-06-12                        168





GCC(1)                         GNU                         GCC(1)


           The second and third "FOO" should be in comments, but
           often are not in older programs.  This warning is on
           by default.

       --WWeerrrroorr
           Make all warnings into hard errors.  Source code which
           triggers warnings will be rejected.

       --WWssyysstteemm--hheeaaddeerrss
           Issue warnings for code in system headers.  These are
           normally unhelpful in finding bugs in your own code,
           therefore suppressed.  If you are responsible for the
           system library, you may want to see them.

       --ww  Suppress all warnings, including those which GNU CPP
           issues by default.

       --ppeeddaannttiicc
           Issue all the mandatory diagnostics listed in the C
           standard.  Some of them are left out by default, since
           they trigger frequently on harmless code.

       --ppeeddaannttiicc--eerrrroorrss
           Issue all the mandatory diagnostics, and make all
           mandatory diagnostics into errors.  This includes
           mandatory diagnostics that GCC issues without
           --ppeeddaannttiicc but treats as warnings.

       --MM  Instead of outputting the result of preprocessing,
           output a rule suitable for mmaakkee describing the
           dependencies of the main source file.  The
           preprocessor outputs one mmaakkee rule containing the
           object file name for that source file, a colon, and
           the names of all the included files, including those
           coming from --iinncclluuddee or --iimmaaccrrooss command line options.

           Unless specified explicitly (with --MMTT or --MMQQ), the
           object file name consists of the name of the source
           file with any suffix replaced with object file suffix
           and with any leading directory parts removed.  If
           there are many included files then the rule is split
           into several lines using \\-newline.  The rule has no
           commands.

           This option does not suppress the preprocessor's debug
           output, such as --ddMM.  To avoid mixing such debug
           output with the dependency rules you should explicitly
           specify the dependency output file with --MMFF, or use an
           environment variable like DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT.  Debug
           output will still be sent to the regular output stream
           as normal.

           Passing --MM to the driver implies --EE, and suppresses
           warnings with an implicit --ww.



gcc-4.74                    2014-06-12                        169





GCC(1)                         GNU                         GCC(1)


       --MMMM Like --MM but do not mention header files that are found
           in system header directories, nor header files that
           are included, directly or indirectly, from such a
           header.

           This implies that the choice of angle brackets or
           double quotes in an ##iinncclluuddee directive does not in
           itself determine whether that header will appear in
           --MMMM dependency output.  This is a slight change in
           semantics from GCC versions 3.0 and earlier.

       --MMFF _f_i_l_e
           When used with --MM or --MMMM, specifies a file to write
           the dependencies to.  If no --MMFF switch is given the
           preprocessor sends the rules to the same place it
           would have sent preprocessed output.

           When used with the driver options --MMDD or --MMMMDD, --MMFF
           overrides the default dependency output file.

       --MMGG In conjunction with an option such as --MM requesting
           dependency generation, --MMGG assumes missing header
           files are generated files and adds them to the
           dependency list without raising an error.  The
           dependency filename is taken directly from the
           "#include" directive without prepending any path.  --MMGG
           also suppresses preprocessed output, as a missing
           header file renders this useless.

           This feature is used in automatic updating of
           makefiles.

       --MMPP This option instructs CPP to add a phony target for
           each dependency other than the main file, causing each
           to depend on nothing.  These dummy rules work around
           errors mmaakkee gives if you remove header files without
           updating the _M_a_k_e_f_i_l_e to match.

           This is typical output:

                   test.o: test.c test.h

                   test.h:

       --MMTT _t_a_r_g_e_t
           Change the target of the rule emitted by dependency
           generation.  By default CPP takes the name of the main
           input file, deletes any directory components and any
           file suffix such as ..cc, and appends the platform's
           usual object suffix.  The result is the target.

           An --MMTT option will set the target to be exactly the
           string you specify.  If you want multiple targets, you
           can specify them as a single argument to --MMTT, or use



gcc-4.74                    2014-06-12                        170





GCC(1)                         GNU                         GCC(1)


           multiple --MMTT options.

           For example, --MMTT ''$$((oobbjjppffxx))ffoooo..oo'' might give

                   $(objpfx)foo.o: foo.c

       --MMQQ _t_a_r_g_e_t
           Same as --MMTT, but it quotes any characters which are
           special to Make.  --MMQQ ''$$((oobbjjppffxx))ffoooo..oo'' gives

                   $$(objpfx)foo.o: foo.c

           The default target is automatically quoted, as if it
           were given with --MMQQ.

       --MMDD --MMDD is equivalent to --MM --MMFF _f_i_l_e, except that --EE is
           not implied.  The driver determines _f_i_l_e based on
           whether an --oo option is given.  If it is, the driver
           uses its argument but with a suffix of _._d, otherwise
           it takes the name of the input file, removes any
           directory components and suffix, and applies a _._d
           suffix.

           If --MMDD is used in conjunction with --EE, any --oo switch
           is understood to specify the dependency output file,
           but if used without --EE, each --oo is understood to
           specify a target object file.

           Since --EE is not implied, --MMDD can be used to generate a
           dependency output file as a side-effect of the
           compilation process.

       --MMMMDD
           Like --MMDD except mention only user header files, not
           system header files.

       --ffppcchh--ddeeppss
           When using precompiled headers, this flag will cause
           the dependency-output flags to also list the files
           from the precompiled header's dependencies.  If not
           specified only the precompiled header would be listed
           and not the files that were used to create it because
           those files are not consulted when a precompiled
           header is used.

       --ffppcchh--pprreepprroocceessss
           This option allows use of a precompiled header
           together with --EE.  It inserts a special "#pragma",
           "#pragma GCC pch_preprocess "filename"" in the output
           to mark the place where the precompiled header was
           found, and its _f_i_l_e_n_a_m_e.  When --ffpprreepprroocceesssseedd is in
           use, GCC recognizes this "#pragma" and loads the PCH.

           This option is off by default, because the resulting



gcc-4.74                    2014-06-12                        171





GCC(1)                         GNU                         GCC(1)


           preprocessed output is only really suitable as input
           to GCC.  It is switched on by --ssaavvee--tteemmppss.

           You should not write this "#pragma" in your own code,
           but it is safe to edit the filename if the PCH file is
           available in a different location.  The filename may
           be absolute or it may be relative to GCC's current
           directory.

       --xx cc
       --xx cc++++
       --xx oobbjjeeccttiivvee--cc
       --xx aasssseemmbblleerr--wwiitthh--ccpppp
           Specify the source language: C, C++, Objective-C, or
           assembly.  This has nothing to do with standards
           conformance or extensions; it merely selects which
           base syntax to expect.  If you give none of these
           options, cpp will deduce the language from the
           extension of the source file: ..cc, ..cccc, ..mm, or ..SS.
           Some other common extensions for C++ and assembly are
           also recognized.  If cpp does not recognize the
           extension, it will treat the file as C; this is the
           most generic mode.

           _N_o_t_e_: Previous versions of cpp accepted a --llaanngg option
           which selected both the language and the standards
           conformance level.  This option has been removed,
           because it conflicts with the --ll option.

       --ssttdd==_s_t_a_n_d_a_r_d
       --aannssii
           Specify the standard to which the code should conform.
           Currently CPP knows about C and C++ standards; others
           may be added in the future.

           _s_t_a_n_d_a_r_d may be one of:

           "c90"
           "c89"
           "iso9899:1990"
               The ISO C standard from 1990.  cc9900 is the
               customary shorthand for this version of the
               standard.

               The --aannssii option is equivalent to --ssttdd==cc9900.

           "iso9899:199409"
               The 1990 C standard, as amended in 1994.

           "iso9899:1999"
           "c99"
           "iso9899:199x"
           "c9x"
               The revised ISO C standard, published in December



gcc-4.74                    2014-06-12                        172





GCC(1)                         GNU                         GCC(1)


               1999.  Before publication, this was known as C9X.

           "iso9899:2011"
           "c11"
           "c1x"
               The revised ISO C standard, published in December
               2011.  Before publication, this was known as C1X.

           "gnu90"
           "gnu89"
               The 1990 C standard plus GNU extensions.  This is
               the default.

           "gnu99"
           "gnu9x"
               The 1999 C standard plus GNU extensions.

           "gnu11"
           "gnu1x"
               The 2011 C standard plus GNU extensions.

           "c++98"
               The 1998 ISO C++ standard plus amendments.

           "gnu++98"
               The same as --ssttdd==cc++++9988 plus GNU extensions.  This
               is the default for C++ code.

       --II-- Split the include path.  Any directories specified
           with --II options before --II-- are searched only for
           headers requested with "#include "file""; they are not
           searched for "#include <file>".  If additional
           directories are specified with --II options after the
           --II--, those directories are searched for all ##iinncclluuddee
           directives.

           In addition, --II-- inhibits the use of the directory of
           the current file directory as the first search
           directory for "#include "file"".  This option has been
           deprecated.

       --nnoossttddiinncc
           Do not search the standard system directories for
           header files.  Only the directories you have specified
           with --II options (and the directory of the current
           file, if appropriate) are searched.

       --nnoossttddiinncc++++
           Do not search for header files in the C++-specific
           standard directories, but do still search the other
           standard directories.  (This option is used when
           building the C++ library.)





gcc-4.74                    2014-06-12                        173





GCC(1)                         GNU                         GCC(1)


       --iinncclluuddee _f_i_l_e
           Process _f_i_l_e as if "#include "file"" appeared as the
           first line of the primary source file.  However, the
           first directory searched for _f_i_l_e is the
           preprocessor's working directory _i_n_s_t_e_a_d _o_f the
           directory containing the main source file.  If not
           found there, it is searched for in the remainder of
           the "#include "..."" search chain as normal.

           If multiple --iinncclluuddee options are given, the files are
           included in the order they appear on the command line.

       --iimmaaccrrooss _f_i_l_e
           Exactly like --iinncclluuddee, except that any output produced
           by scanning _f_i_l_e is thrown away.  Macros it defines
           remain defined.  This allows you to acquire all the
           macros from a header without also processing its
           declarations.

           All files specified by --iimmaaccrrooss are processed before
           all files specified by --iinncclluuddee.

       --iiddiirraafftteerr _d_i_r
           Search _d_i_r for header files, but do it _a_f_t_e_r all
           directories specified with --II and the standard system
           directories have been exhausted.  _d_i_r is treated as a
           system include directory.  If _d_i_r begins with "=",
           then the "=" will be replaced by the sysroot prefix;
           see ----ssyyssrroooott and --iissyyssrroooott.

       --iipprreeffiixx _p_r_e_f_i_x
           Specify _p_r_e_f_i_x as the prefix for subsequent
           --iiwwiitthhpprreeffiixx options.  If the prefix represents a
           directory, you should include the final //.

       --iiwwiitthhpprreeffiixx _d_i_r
       --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r
           Append _d_i_r to the prefix specified previously with
           --iipprreeffiixx, and add the resulting directory to the
           include search path.  --iiwwiitthhpprreeffiixxbbeeffoorree puts it in
           the same place --II would; --iiwwiitthhpprreeffiixx puts it where
           --iiddiirraafftteerr would.

       --iissyyssrroooott _d_i_r
           This option is like the ----ssyyssrroooott option, but applies
           only to header files (except for Darwin targets, where
           it applies to both header files and libraries).  See
           the ----ssyyssrroooott option for more information.

       --iimmuullttiilliibb _d_i_r
           Use _d_i_r as a subdirectory of the directory containing
           target-specific C++ headers.





gcc-4.74                    2014-06-12                        174





GCC(1)                         GNU                         GCC(1)


       --iissyysstteemm _d_i_r
           Search _d_i_r for header files, after all directories
           specified by --II but before the standard system
           directories.  Mark it as a system directory, so that
           it gets the same special treatment as is applied to
           the standard system directories.  If _d_i_r begins with
           "=", then the "=" will be replaced by the sysroot
           prefix; see ----ssyyssrroooott and --iissyyssrroooott.

       --iiqquuoottee _d_i_r
           Search _d_i_r only for header files requested with
           "#include "file""; they are not searched for
           "#include <file>", before all directories specified by
           --II and before the standard system directories.  If _d_i_r
           begins with "=", then the "=" will be replaced by the
           sysroot prefix; see ----ssyyssrroooott and --iissyyssrroooott.

       --ffddiirreeccttiivveess--oonnllyy
           When preprocessing, handle directives, but do not
           expand macros.

           The option's behavior depends on the --EE and
           --ffpprreepprroocceesssseedd options.

           With --EE, preprocessing is limited to the handling of
           directives such as "#define", "#ifdef", and "#error".
           Other preprocessor operations, such as macro expansion
           and trigraph conversion are not performed.  In
           addition, the --ddDD option is implicitly enabled.

           With --ffpprreepprroocceesssseedd, predefinition of command line and
           most builtin macros is disabled.  Macros such as
           "__LINE__", which are contextually dependent, are
           handled normally.  This enables compilation of files
           previously preprocessed with "-E -fdirectives-only".

           With both --EE and --ffpprreepprroocceesssseedd, the rules for
           --ffpprreepprroocceesssseedd take precedence.  This enables full
           preprocessing of files previously preprocessed with
           "-E -fdirectives-only".

       --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss
           Accept $$ in identifiers.

       --ffeexxtteennddeedd--iiddeennttiiffiieerrss
           Accept universal character names in identifiers.  This
           option is experimental; in a future version of GCC, it
           will be enabled by default for C99 and C++.

       --ffpprreepprroocceesssseedd
           Indicate to the preprocessor that the input file has
           already been preprocessed.  This suppresses things
           like macro expansion, trigraph conversion, escaped
           newline splicing, and processing of most directives.



gcc-4.74                    2014-06-12                        175





GCC(1)                         GNU                         GCC(1)


           The preprocessor still recognizes and removes
           comments, so that you can pass a file preprocessed
           with --CC to the compiler without problems.  In this
           mode the integrated preprocessor is little more than a
           tokenizer for the front ends.

           --ffpprreepprroocceesssseedd is implicit if the input file has one
           of the extensions ..ii, ..iiii or ..mmii.  These are the
           extensions that GCC uses for preprocessed files
           created by --ssaavvee--tteemmppss.

       --ffttaabbssttoopp==_w_i_d_t_h
           Set the distance between tab stops.  This helps the
           preprocessor report correct column numbers in warnings
           or errors, even if tabs appear on the line.  If the
           value is less than 1 or greater than 100, the option
           is ignored.  The default is 8.

       --ffddeebbuugg--ccpppp
           This option is only useful for debugging GCC.  When
           used with --EE, dumps debugging information about
           location maps.  Every token in the output is preceded
           by the dump of the map its location belongs to.  The
           dump of the map holding the location of a token would
           be:

                   {"P":F</file/path>;"F":F</includer/path>;"L":<line_num>;"C":<col_num>;"S":<system_header_p>;"M":<map_address>;"E":<macro_expansion_p>,"loc":<location>}

           When used without --EE, this option has no effect.

       --ffttrraacckk--mmaaccrroo--eexxppaannssiioonn[==_l_e_v_e_l]
           Track locations of tokens across macro expansions.
           This allows the compiler to emit diagnostic about the
           current macro expansion stack when a compilation error
           occurs in a macro expansion. Using this option makes
           the preprocessor and the compiler consume more memory.
           The _l_e_v_e_l parameter can be used to choose the level of
           precision of token location tracking thus decreasing
           the memory consumption if necessary. Value 00 of _l_e_v_e_l
           de-activates this option just as if no
           --ffttrraacckk--mmaaccrroo--eexxppaannssiioonn was present on the command
           line. Value 11 tracks tokens locations in a degraded
           mode for the sake of minimal memory overhead. In this
           mode all tokens resulting from the expansion of an
           argument of a function-like macro have the same
           location. Value 22 tracks tokens locations completely.
           This value is the most memory hungry.  When this
           option is given no argument, the default parameter
           value is 22.

       --ffeexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the execution character set, used for string and
           character constants.  The default is UTF-8.  _c_h_a_r_s_e_t
           can be any encoding supported by the system's "iconv"



gcc-4.74                    2014-06-12                        176





GCC(1)                         GNU                         GCC(1)


           library routine.

       --ffwwiiddee--eexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the wide execution character set, used for wide
           string and character constants.  The default is UTF-32
           or UTF-16, whichever corresponds to the width of
           "wchar_t".  As with --ffeexxeecc--cchhaarrsseett, _c_h_a_r_s_e_t can be any
           encoding supported by the system's "iconv" library
           routine; however, you will have problems with
           encodings that do not fit exactly in "wchar_t".

       --ffiinnppuutt--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the input character set, used for translation from
           the character set of the input file to the source
           character set used by GCC.  If the locale does not
           specify, or GCC cannot get this information from the
           locale, the default is UTF-8.  This can be overridden
           by either the locale or this command line option.
           Currently the command line option takes precedence if
           there's a conflict.  _c_h_a_r_s_e_t can be any encoding
           supported by the system's "iconv" library routine.

       --ffwwoorrkkiinngg--ddiirreeccttoorryy
           Enable generation of linemarkers in the preprocessor
           output that will let the compiler know the current
           working directory at the time of preprocessing.  When
           this option is enabled, the preprocessor will emit,
           after the initial linemarker, a second linemarker with
           the current working directory followed by two slashes.
           GCC will use this directory, when it's present in the
           preprocessed input, as the directory emitted as the
           current working directory in some debugging
           information formats.  This option is implicitly
           enabled if debugging information is enabled, but this
           can be inhibited with the negated form
           --ffnnoo--wwoorrkkiinngg--ddiirreeccttoorryy.  If the --PP flag is present in
           the command line, this option has no effect, since no
           "#line" directives are emitted whatsoever.

       --ffnnoo--sshhooww--ccoolluummnn
           Do not print column numbers in diagnostics.  This may
           be necessary if diagnostics are being scanned by a
           program that does not understand the column numbers,
           such as ddeejjaaggnnuu.

       --AA _p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and
           answer _a_n_s_w_e_r.  This form is preferred to the older
           form --AA _p_r_e_d_i_c_a_t_e((_a_n_s_w_e_r)), which is still supported,
           because it does not use shell special characters.

       --AA --_p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and
           answer _a_n_s_w_e_r.



gcc-4.74                    2014-06-12                        177





GCC(1)                         GNU                         GCC(1)


       --ddCCHHAARRSS
           _C_H_A_R_S is a sequence of one or more of the following
           characters, and must not be preceded by a space.
           Other characters are interpreted by the compiler
           proper, or reserved for future versions of GCC, and so
           are silently ignored.  If you specify characters whose
           behavior conflicts, the result is undefined.

           MM   Instead of the normal output, generate a list of
               ##ddeeffiinnee directives for all the macros defined
               during the execution of the preprocessor,
               including predefined macros.  This gives you a way
               of finding out what is predefined in your version
               of the preprocessor.  Assuming you have no file
               _f_o_o_._h, the command

                       touch foo.h; cpp -dM foo.h

               will show all the predefined macros.

               If you use --ddMM without the --EE option, --ddMM is
               interpreted as a synonym for --ffdduummpp--rrttll--mmaacchh.

           DD   Like MM except in two respects: it does _n_o_t include
               the predefined macros, and it outputs _b_o_t_h the
               ##ddeeffiinnee directives and the result of
               preprocessing.  Both kinds of output go to the
               standard output file.

           NN   Like DD, but emit only the macro names, not their
               expansions.

           II   Output ##iinncclluuddee directives in addition to the
               result of preprocessing.

           UU   Like DD except that only macros that are expanded,
               or whose definedness is tested in preprocessor
               directives, are output; the output is delayed
               until the use or test of the macro; and ##uunnddeeff
               directives are also output for macros tested but
               undefined at the time.

       --PP  Inhibit generation of linemarkers in the output from
           the preprocessor.  This might be useful when running
           the preprocessor on something that is not C code, and
           will be sent to a program which might be confused by
           the linemarkers.

       --CC  Do not discard comments.  All comments are passed
           through to the output file, except for comments in
           processed directives, which are deleted along with the
           directive.

           You should be prepared for side effects when using --CC;



gcc-4.74                    2014-06-12                        178





GCC(1)                         GNU                         GCC(1)


           it causes the preprocessor to treat comments as tokens
           in their own right.  For example, comments appearing
           at the start of what would be a directive line have
           the effect of turning that line into an ordinary
           source line, since the first token on the line is no
           longer a ##.

       --CCCC Do not discard comments, including during macro
           expansion.  This is like --CC, except that comments
           contained within macros are also passed through to the
           output file where the macro is expanded.

           In addition to the side-effects of the --CC option, the
           --CCCC option causes all C++-style comments inside a
           macro to be converted to C-style comments.  This is to
           prevent later use of that macro from inadvertently
           commenting out the remainder of the source line.

           The --CCCC option is generally used to support lint
           comments.

       --ttrraaddiittiioonnaall--ccpppp
           Try to imitate the behavior of old-fashioned C
           preprocessors, as opposed to ISO C preprocessors.

       --ttrriiggrraapphhss
           Process trigraph sequences.  These are three-character
           sequences, all starting with ????, that are defined by
           ISO C to stand for single characters.  For example,
           ????// stands for \\, so ''????//nn'' is a character constant
           for a newline.  By default, GCC ignores trigraphs, but
           in standard-conforming modes it converts them.  See
           the --ssttdd and --aannssii options.

           The nine trigraphs and their replacements are

                   Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
                   Replacement:      [    ]    {    }    #    \    ^    |    ~

       --rreemmaapp
           Enable special code to work around file systems which
           only permit very short file names, such as MS-DOS.

       ----hheellpp
       ----ttaarrggeett--hheellpp
           Print text describing all the command line options
           instead of preprocessing anything.

       --vv  Verbose mode.  Print out GNU CPP's version number at
           the beginning of execution, and report the final form
           of the include path.

       --HH  Print the name of each header file used, in addition
           to other normal activities.  Each name is indented to



gcc-4.74                    2014-06-12                        179





GCC(1)                         GNU                         GCC(1)


           show how deep in the ##iinncclluuddee stack it is.
           Precompiled header files are also printed, even if
           they are found to be invalid; an invalid precompiled
           header file is printed with ......xx and a valid one with
           ......!! .

       --vveerrssiioonn
       ----vveerrssiioonn
           Print out GNU CPP's version number.  With one dash,
           proceed to preprocess as normal.  With two dashes,
           exit immediately.

       PPaassssiinngg OOppttiioonnss ttoo tthhee AAsssseemmbblleerr

       You can pass options to the assembler.

       --WWaa,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  If _o_p_t_i_o_n
           contains commas, it is split into multiple options at
           the commas.

       --XXaasssseemmbblleerr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  You can
           use this to supply system-specific assembler options
           that GCC does not know how to recognize.

           If you want to pass an option that takes an argument,
           you must use --XXaasssseemmbblleerr twice, once for the option
           and once for the argument.

       OOppttiioonnss ffoorr LLiinnkkiinngg

       These options come into play when the compiler links
       object files into an executable output file.  They are
       meaningless if the compiler is not doing a link step.

       _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e
           A file name that does not end in a special recognized
           suffix is considered to name an object file or
           library.  (Object files are distinguished from
           libraries by the linker according to the file
           contents.)  If linking is done, these object files are
           used as input to the linker.

       --cc
       --SS
       --EE  If any of these options is used, then the linker is
           not run, and object file names should not be used as
           arguments.

       --ll_l_i_b_r_a_r_y
       --ll _l_i_b_r_a_r_y
           Search the library named _l_i_b_r_a_r_y when linking.  (The
           second alternative with the library as a separate



gcc-4.74                    2014-06-12                        180





GCC(1)                         GNU                         GCC(1)


           argument is only for POSIX compliance and is not
           recommended.)

           It makes a difference where in the command you write
           this option; the linker searches and processes
           libraries and object files in the order they are
           specified.  Thus, ffoooo..oo --llzz bbaarr..oo searches library zz
           after file _f_o_o_._o but before _b_a_r_._o.  If _b_a_r_._o refers to
           functions in zz, those functions may not be loaded.

           The linker searches a standard list of directories for
           the library, which is actually a file named
           _l_i_b_l_i_b_r_a_r_y_._a.  The linker then uses this file as if it
           had been specified precisely by name.

           The directories searched include several standard
           system directories plus any that you specify with --LL.

           Normally the files found this way are library
           files---archive files whose members are object files.
           The linker handles an archive file by scanning through
           it for members which define symbols that have so far
           been referenced but not defined.  But if the file that
           is found is an ordinary object file, it is linked in
           the usual fashion.  The only difference between using
           an --ll option and specifying a file name is that --ll
           surrounds _l_i_b_r_a_r_y with lliibb and ..aa and searches several
           directories.

       --lloobbjjcc
           You need this special case of the --ll option in order
           to link an Objective-C or Objective-C++ program.

       --nnoossttaarrttffiilleess
           Do not use the standard system startup files when
           linking.  The standard system libraries are used
           normally, unless --nnoossttddlliibb or --nnooddeeffaauullttlliibbss is used.

       --nnooddeeffaauullttlliibbss
           Do not use the standard system libraries when linking.
           Only the libraries you specify will be passed to the
           linker, options specifying linkage of the system
           libraries, such as "-static-libgcc" or
           "-shared-libgcc", will be ignored.  The standard
           startup files are used normally, unless --nnoossttaarrttffiilleess
           is used.  The compiler may generate calls to "memcmp",
           "memset", "memcpy" and "memmove".  These entries are
           usually resolved by entries in libc.  These entry
           points should be supplied through some other mechanism
           when this option is specified.

       --nnoossttddlliibb
           Do not use the standard system startup files or
           libraries when linking.  No startup files and only the



gcc-4.74                    2014-06-12                        181





GCC(1)                         GNU                         GCC(1)


           libraries you specify will be passed to the linker,
           options specifying linkage of the system libraries,
           such as "-static-libgcc" or "-shared-libgcc", will be
           ignored.  The compiler may generate calls to "memcmp",
           "memset", "memcpy" and "memmove".  These entries are
           usually resolved by entries in libc.  These entry
           points should be supplied through some other mechanism
           when this option is specified.

           One of the standard libraries bypassed by --nnoossttddlliibb
           and --nnooddeeffaauullttlliibbss is _l_i_b_g_c_c_._a, a library of internal
           subroutines which GCC uses to overcome shortcomings of
           particular machines, or special needs for some
           languages.

           In most cases, you need _l_i_b_g_c_c_._a even when you want to
           avoid other standard libraries.  In other words, when
           you specify --nnoossttddlliibb or --nnooddeeffaauullttlliibbss you should
           usually specify --llggcccc as well.  This ensures that you
           have no unresolved references to internal GCC library
           subroutines.  (For example, ____mmaaiinn, used to ensure C++
           constructors will be called.)

       --ppiiee
           Produce a position independent executable on targets
           that support it.  For predictable results, you must
           also specify the same set of options that were used to
           generate code (--ffppiiee, --ffPPIIEE, or model suboptions) when
           you specify this option.

       --rrddyynnaammiicc
           Pass the flag --eexxppoorrtt--ddyynnaammiicc to the ELF linker, on
           targets that support it. This instructs the linker to
           add all symbols, not only used ones, to the dynamic
           symbol table. This option is needed for some uses of
           "dlopen" or to allow obtaining backtraces from within
           a program.

       --ss  Remove all symbol table and relocation information
           from the executable.

       --ssttaattiicc
           On systems that support dynamic linking, this prevents
           linking with the shared libraries.  On other systems,
           this option has no effect.

       --sshhaarreedd
           Produce a shared object which can then be linked with
           other objects to form an executable.  Not all systems
           support this option.  For predictable results, you
           must also specify the same set of options that were
           used to generate code (--ffppiicc, --ffPPIICC, or model
           suboptions) when you specify this option.[1]




gcc-4.74                    2014-06-12                        182





GCC(1)                         GNU                         GCC(1)


       --sshhaarreedd--lliibbggcccc
       --ssttaattiicc--lliibbggcccc
           On systems that provide _l_i_b_g_c_c as a shared library,
           these options force the use of either the shared or
           static version respectively.  If no shared version of
           _l_i_b_g_c_c was built when the compiler was configured,
           these options have no effect.

           There are several situations in which an application
           should use the shared _l_i_b_g_c_c instead of the static
           version.  The most common of these is when the
           application wishes to throw and catch exceptions
           across different shared libraries.  In that case, each
           of the libraries as well as the application itself
           should use the shared _l_i_b_g_c_c.

           Therefore, the G++ and GCJ drivers automatically add
           --sshhaarreedd--lliibbggcccc whenever you build a shared library or
           a main executable, because C++ and Java programs
           typically use exceptions, so this is the right thing
           to do.

           If, instead, you use the GCC driver to create shared
           libraries, you may find that they will not always be
           linked with the shared _l_i_b_g_c_c.  If GCC finds, at its
           configuration time, that you have a non-GNU linker or
           a GNU linker that does not support option
           ----eehh--ffrraammee--hhddrr, it will link the shared version of
           _l_i_b_g_c_c into shared libraries by default.  Otherwise,
           it will take advantage of the linker and optimize away
           the linking with the shared version of _l_i_b_g_c_c, linking
           with the static version of libgcc by default.  This
           allows exceptions to propagate through such shared
           libraries, without incurring relocation costs at
           library load time.

           However, if a library or main executable is supposed
           to throw or catch exceptions, you must link it using
           the G++ or GCJ driver, as appropriate for the
           languages used in the program, or using the option
           --sshhaarreedd--lliibbggcccc, such that it is linked with the shared
           _l_i_b_g_c_c.

       --ssttaattiicc--lliibbssttddcc++++
           When the gg++++ program is used to link a C++ program, it
           will normally automatically link against lliibbssttddcc++++.
           If _l_i_b_s_t_d_c_+_+ is available as a shared library, and the
           --ssttaattiicc option is not used, then this will link
           against the shared version of _l_i_b_s_t_d_c_+_+.  That is
           normally fine.  However, it is sometimes useful to
           freeze the version of _l_i_b_s_t_d_c_+_+ used by the program
           without going all the way to a fully static link.  The
           --ssttaattiicc--lliibbssttddcc++++ option directs the gg++++ driver to
           link _l_i_b_s_t_d_c_+_+ statically, without necessarily linking



gcc-4.74                    2014-06-12                        183





GCC(1)                         GNU                         GCC(1)


           other libraries statically.

       --ssyymmbboolliicc
           Bind references to global symbols when building a
           shared object.  Warn about any unresolved references
           (unless overridden by the link editor option --XXlliinnkkeerr
           --zz --XXlliinnkkeerr ddeeffss).  Only a few systems support this
           option.

       --TT _s_c_r_i_p_t
           Use _s_c_r_i_p_t as the linker script.  This option is
           supported by most systems using the GNU linker.  On
           some targets, such as bare-board targets without an
           operating system, the --TT option may be required when
           linking to avoid references to undefined symbols.

       --XXlliinnkkeerr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  You can use
           this to supply system-specific linker options that GCC
           does not recognize.

           If you want to pass an option that takes a separate
           argument, you must use --XXlliinnkkeerr twice, once for the
           option and once for the argument.  For example, to
           pass --aasssseerrtt ddeeffiinniittiioonnss, you must write --XXlliinnkkeerr
           --aasssseerrtt --XXlliinnkkeerr ddeeffiinniittiioonnss.  It does not work to
           write --XXlliinnkkeerr ""--aasssseerrtt ddeeffiinniittiioonnss"", because this
           passes the entire string as a single argument, which
           is not what the linker expects.

           When using the GNU linker, it is usually more
           convenient to pass arguments to linker options using
           the _o_p_t_i_o_n==_v_a_l_u_e syntax than as separate arguments.
           For example, you can specify --XXlliinnkkeerr --MMaapp==oouuttppuutt..mmaapp
           rather than --XXlliinnkkeerr --MMaapp --XXlliinnkkeerr oouuttppuutt..mmaapp.  Other
           linkers may not support this syntax for command-line
           options.

       --WWll,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  If _o_p_t_i_o_n
           contains commas, it is split into multiple options at
           the commas.  You can use this syntax to pass an
           argument to the option.  For example,
           --WWll,,--MMaapp,,oouuttppuutt..mmaapp passes --MMaapp oouuttppuutt..mmaapp to the
           linker.  When using the GNU linker, you can also get
           the same effect with --WWll,,--MMaapp==oouuttppuutt..mmaapp.

       --uu _s_y_m_b_o_l
           Pretend the symbol _s_y_m_b_o_l is undefined, to force
           linking of library modules to define it.  You can use
           --uu multiple times with different symbols to force
           loading of additional library modules.





gcc-4.74                    2014-06-12                        184





GCC(1)                         GNU                         GCC(1)


       OOppttiioonnss ffoorr DDiirreeccttoorryy SSeeaarrcchh

       These options specify directories to search for header
       files, for libraries and for parts of the compiler:

       --II_d_i_r
           Add the directory _d_i_r to the head of the list of
           directories to be searched for header files.  This can
           be used to override a system header file, substituting
           your own version, since these directories are searched
           before the system header file directories.  However,
           you should not use this option to add directories that
           contain vendor-supplied system header files (use
           --iissyysstteemm for that).  If you use more than one --II
           option, the directories are scanned in left-to-right
           order; the standard system directories come after.

           If a standard system include directory, or a directory
           specified with --iissyysstteemm, is also specified with --II,
           the --II option will be ignored.  The directory will
           still be searched but as a system directory at its
           normal position in the system include chain.  This is
           to ensure that GCC's procedure to fix buggy system
           headers and the ordering for the include_next
           directive are not inadvertently changed.  If you
           really need to change the search order for system
           directories, use the --nnoossttddiinncc and/or --iissyysstteemm
           options.

       --iipplluuggiinnddiirr==_d_i_r
           Set the directory to search for plugins that are
           passed by --ffpplluuggiinn==_n_a_m_e instead of
           --ffpplluuggiinn==_p_a_t_h//_n_a_m_e..ssoo.  This option is not meant to be
           used by the user, but only passed by the driver.

       --iiqquuoottee_d_i_r
           Add the directory _d_i_r to the head of the list of
           directories to be searched for header files only for
           the case of ##iinncclluuddee ""_f_i_l_e""; they are not searched for
           ##iinncclluuddee <<_f_i_l_e>>, otherwise just like --II.

       --LL_d_i_r
           Add directory _d_i_r to the list of directories to be
           searched for --ll.

       --BB_p_r_e_f_i_x
           This option specifies where to find the executables,
           libraries, include files, and data files of the
           compiler itself.

           The compiler driver program runs one or more of the
           subprograms _c_p_p, _c_c_1, _a_s and _l_d.  It tries _p_r_e_f_i_x as a
           prefix for each program it tries to run, both with and
           without _m_a_c_h_i_n_e//_v_e_r_s_i_o_n//.



gcc-4.74                    2014-06-12                        185





GCC(1)                         GNU                         GCC(1)


           For each subprogram to be run, the compiler driver
           first tries the --BB prefix, if any.  If that name is
           not found, or if --BB was not specified, the driver
           tries two standard prefixes, _/_u_s_r_/_l_i_b_/_g_c_c_/ and
           _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_g_c_c_/.  If neither of those results in a
           file name that is found, the unmodified program name
           is searched for using the directories specified in
           your PPAATTHH environment variable.

           The compiler will check to see if the path provided by
           the --BB refers to a directory, and if necessary it will
           add a directory separator character at the end of the
           path.

           --BB prefixes that effectively specify directory names
           also apply to libraries in the linker, because the
           compiler translates these options into --LL options for
           the linker.  They also apply to includes files in the
           preprocessor, because the compiler translates these
           options into --iissyysstteemm options for the preprocessor.
           In this case, the compiler appends iinncclluuddee to the
           prefix.

           The runtime support file _l_i_b_g_c_c_._a can also be searched
           for using the --BB prefix, if needed.  If it is not
           found there, the two standard prefixes above are
           tried, and that is all.  The file is left out of the
           link if it is not found by those means.

           Another way to specify a prefix much like the --BB
           prefix is to use the environment variable
           GGCCCC__EEXXEECC__PPRREEFFIIXX.

           As a special kludge, if the path provided by --BB is
           _[_d_i_r_/_]_s_t_a_g_e_N_/, where _N is a number in the range 0 to
           9, then it will be replaced by _[_d_i_r_/_]_i_n_c_l_u_d_e.  This is
           to help with boot-strapping the compiler.

       --ssppeeccss==_f_i_l_e
           Process _f_i_l_e after the compiler reads in the standard
           _s_p_e_c_s file, in order to override the defaults which
           the _g_c_c driver program uses when determining what
           switches to pass to _c_c_1, _c_c_1_p_l_u_s, _a_s, _l_d, etc.  More
           than one --ssppeeccss==_f_i_l_e can be specified on the command
           line, and they are processed in order, from left to
           right.

       ----ssyyssrroooott==_d_i_r
           Use _d_i_r as the logical root directory for headers and
           libraries.  For example, if the compiler would
           normally search for headers in _/_u_s_r_/_i_n_c_l_u_d_e and
           libraries in _/_u_s_r_/_l_i_b, it will instead search
           _d_i_r_/_u_s_r_/_i_n_c_l_u_d_e and _d_i_r_/_u_s_r_/_l_i_b.




gcc-4.74                    2014-06-12                        186





GCC(1)                         GNU                         GCC(1)


           If you use both this option and the --iissyyssrroooott option,
           then the ----ssyyssrroooott option will apply to libraries, but
           the --iissyyssrroooott option will apply to header files.

           The GNU linker (beginning with version 2.16) has the
           necessary support for this option.  If your linker
           does not support this option, the header file aspect
           of ----ssyyssrroooott will still work, but the library aspect
           will not.

       --II-- This option has been deprecated.  Please use --iiqquuoottee
           instead for --II directories before the --II-- and remove
           the --II--.  Any directories you specify with --II options
           before the --II-- option are searched only for the case
           of ##iinncclluuddee ""_f_i_l_e""; they are not searched for ##iinncclluuddee
           <<_f_i_l_e>>.

           If additional directories are specified with --II
           options after the --II--, these directories are searched
           for all ##iinncclluuddee directives.  (Ordinarily _a_l_l --II
           directories are used this way.)

           In addition, the --II-- option inhibits the use of the
           current directory (where the current input file came
           from) as the first search directory for ##iinncclluuddee
           ""_f_i_l_e"".  There is no way to override this effect of
           --II--.  With --II.. you can specify searching the directory
           that was current when the compiler was invoked.  That
           is not exactly the same as what the preprocessor does
           by default, but it is often satisfactory.

           --II-- does not inhibit the use of the standard system
           directories for header files.  Thus, --II-- and --nnoossttddiinncc
           are independent.

       SSppeecciiffyyiinngg TTaarrggeett MMaacchhiinnee aanndd CCoommppiilleerr VVeerrssiioonn

       The usual way to run GCC is to run the executable called
       ggcccc, or _m_a_c_h_i_n_e--ggcccc when cross-compiling, or
       _m_a_c_h_i_n_e--ggcccc--_v_e_r_s_i_o_n to run a version other than the one
       that was installed last.

       HHaarrddwwaarree MMooddeellss aanndd CCoonnffiigguurraattiioonnss

       Each target machine types can have its own special
       options, starting with --mm, to choose among various
       hardware models or configurations---for example, 68010 vs
       68020, floating coprocessor or none.  A single installed
       version of the compiler can compile for any model or
       configuration, according to the options specified.

       Some configurations of the compiler also support
       additional special options, usually for compatibility with
       other compilers on the same platform.



gcc-4.74                    2014-06-12                        187





GCC(1)                         GNU                         GCC(1)


       _A_d_a_p_t_e_v_a _E_p_i_p_h_a_n_y _O_p_t_i_o_n_s

       These --mm options are defined for Adapteva Epiphany:

       --mmhhaallff--rreegg--ffiillee
           Don't allocate any register in the range
           "r32"..."r63".  That allows code to run on hardware
           variants that lack these registers.

       --mmpprreeffeerr--sshhoorrtt--iinnssnn--rreeggss
           Preferrentially allocate registers that allow short
           instruction generation.  This can result in increasesd
           instruction count, so if this reduces or increases
           code size might vary from case to case.

       --mmbbrraanncchh--ccoosstt==_n_u_m
           Set the cost of branches to roughly _n_u_m "simple"
           instructions.  This cost is only a heuristic and is
           not guaranteed to produce consistent results across
           releases.

       --mmccmmoovvee
           Enable the generation of conditional moves.

       --mmnnooppss==_n_u_m
           Emit _n_u_m nops before every other generated
           instruction.

       --mmnnoo--ssoofftt--ccmmppssff
           For single-precision floating-point comparisons, emit
           an fsub instruction and test the flags.  This is
           faster than a software comparison, but can get
           incorrect results in the presence of NaNs, or when two
           different small numbers are compared such that their
           difference is calculated as zero.  The default is
           --mmssoofftt--ccmmppssff, which uses slower, but IEEE-compliant,
           software comparisons.

       --mmssttaacckk--ooffffsseett==_n_u_m
           Set the offset between the top of the stack and the
           stack pointer.  E.g., a value of 8 means that the
           eight bytes in the range sp+0...sp+7 can be used by
           leaf functions without stack allocation.  Values other
           than 88 or 1166 are untested and unlikely to work.  Note
           also that this option changes the ABI, compiling a
           program with a different stack offset than the
           libraries have been compiled with will generally not
           work.  This option can be useful if you want to
           evaluate if a different stack offset would give you
           better code, but to actually use a different stack
           offset to build working programs, it is recommended to
           configure the toolchain with the appropriate
           ----wwiitthh--ssttaacckk--ooffffsseett==_n_u_m option.




gcc-4.74                    2014-06-12                        188





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--rroouunndd--nneeaarreesstt
           Make the scheduler assume that the rounding mode has
           been set to truncating.  The default is
           --mmrroouunndd--nneeaarreesstt.

       --mmlloonngg--ccaallllss
           If not otherwise specified by an attribute, assume all
           calls might be beyond the offset range of the b / bl
           instructions, and therefore load the function address
           into a register before performing a (otherwise direct)
           call.  This is the default.

       --mmsshhoorrtt--ccaallllss
           If not otherwise specified by an attribute, assume all
           direct calls are in the range of the b / bl
           instructions, so use these instructions for direct
           calls.  The default is --mmlloonngg--ccaallllss.

       --mmssmmaallll1166
           Assume addresses can be loaded as 16-bit unsigned
           values.  This does not apply to function addresses for
           which --mmlloonngg--ccaallllss semantics are in effect.

       --mmffpp--mmooddee==_m_o_d_e
           Set the prevailing mode of the floating-point unit.
           This determines the floating-point mode that is
           provided and expected at function call and return
           time.  Making this mode match the mode you
           predominantly need at function start can make your
           programs smaller and faster by avoiding unnecessary
           mode switches.

           _m_o_d_e can be set to one the following values:

           ccaalllleerr
               Any mode at function entry is valid, and retained
               or restored when the function returns, and when it
               calls other functions.  This mode is useful for
               compiling libraries or other compilation units you
               might want to incorporate into different programs
               with different prevailing FPU modes, and the
               convenience of being able to use a single object
               file outweighs the size and speed overhead for any
               extra mode switching that might be needed,
               compared with what would be needed with a more
               specific choice of prevailing FPU mode.

           ttrruunnccaattee
               This is the mode used for floating-point
               calculations with truncating (i.e. round towards
               zero) rounding mode.  That includes conversion
               from floating point to integer.





gcc-4.74                    2014-06-12                        189





GCC(1)                         GNU                         GCC(1)


           rroouunndd--nneeaarreesstt
               This is the mode used for floating-point
               calculations with round-to-nearest-or-even
               rounding mode.

           iinntt This is the mode used to perform integer
               calculations in the FPU, e.g.  integer multiply,
               or integer multiply-and-accumulate.

           The default is --mmffpp--mmooddee==ccaalllleerr

       --mmnnoosspplliitt--lloohhii
       --mmnnoo--ppoossttiinncc
       --mmnnoo--ppoossttmmooddiiffyy
           Code generation tweaks that disable, respectively,
           splitting of 32-bit loads, generation of post-
           increment addresses, and generation of post-modify
           addresses.  The defaults are mmsspplliitt--lloohhii, --mmppoosstt--iinncc,
           and --mmppoosstt--mmooddiiffyy.

       --mmnnoovveecctt--ddoouubbllee
           Change the preferred SIMD mode to SImode.  The default
           is --mmvveecctt--ddoouubbllee, which uses DImode as preferred SIMD
           mode.

       --mmaaxx--vveecctt--aalliiggnn==_n_u_m
           The maximum alignment for SIMD vector mode types.  _n_u_m
           may be 4 or 8.  The default is 8.  Note that this is
           an ABI change, even though many library function
           interfaces will be unaffected, if they don't use SIMD
           vector modes in places where they affect size and/or
           alignment of relevant types.

       --mmsspplliitt--vveeccmmoovvee--eeaarrllyy
           Split vector moves into single word moves before
           reload.  In theory this could give better register
           allocation, but so far the reverse seems to be
           generally the case.

       --mm11rreegg--_r_e_g
           Specify a register to hold the constant -1, which
           makes loading small negative constants and certain
           bitmasks faster.  Allowable values for reg are r43 and
           r63, which specify to use that register as a fixed
           register, and none, which means that no register is
           used for this purpose.  The default is --mm11rreegg--nnoonnee.

       _A_R_M _O_p_t_i_o_n_s

       These --mm options are defined for Advanced RISC Machines
       (ARM) architectures:

       --mmaabbii==_n_a_m_e
           Generate code for the specified ABI.  Permissible



gcc-4.74                    2014-06-12                        190





GCC(1)                         GNU                         GCC(1)


           values are: aappccss--ggnnuu, aattppccss, aaaappccss, aaaappccss--lliinnuuxx and
           iiwwmmmmxxtt.

       --mmaappccss--ffrraammee
           Generate a stack frame that is compliant with the ARM
           Procedure Call Standard for all functions, even if
           this is not strictly necessary for correct execution
           of the code.  Specifying --ffoommiitt--ffrraammee--ppooiinntteerr with
           this option will cause the stack frames not to be
           generated for leaf functions.  The default is
           --mmnnoo--aappccss--ffrraammee.

       --mmaappccss
           This is a synonym for --mmaappccss--ffrraammee.

       --mmtthhuummbb--iinntteerrwwoorrkk
           Generate code that supports calling between the ARM
           and Thumb instruction sets.  Without this option, on
           pre-v5 architectures, the two instruction sets cannot
           be reliably used inside one program.  The default is
           --mmnnoo--tthhuummbb--iinntteerrwwoorrkk, since slightly larger code is
           generated when --mmtthhuummbb--iinntteerrwwoorrkk is specified.  In
           AAPCS configurations this option is meaningless.

       --mmnnoo--sscchheedd--pprroolloogg
           Prevent the reordering of instructions in the function
           prologue, or the merging of those instruction with the
           instructions in the function's body.  This means that
           all functions will start with a recognizable set of
           instructions (or in fact one of a choice from a small
           set of different function prologues), and this
           information can be used to locate the start if
           functions inside an executable piece of code.  The
           default is --mmsscchheedd--pprroolloogg.

       --mmffllooaatt--aabbii==_n_a_m_e
           Specifies which floating-point ABI to use.
           Permissible values are: ssoofftt, ssooffttffpp and hhaarrdd.

           Specifying ssoofftt causes GCC to generate output
           containing library calls for floating-point
           operations.  ssooffttffpp allows the generation of code
           using hardware floating-point instructions, but still
           uses the soft-float calling conventions.  hhaarrdd allows
           generation of floating-point instructions and uses
           FPU-specific calling conventions.

           The default depends on the specific target
           configuration.  Note that the hard-float and soft-
           float ABIs are not link-compatible; you must compile
           your entire program with the same ABI, and link with a
           compatible set of libraries.





gcc-4.74                    2014-06-12                        191





GCC(1)                         GNU                         GCC(1)


       --mmlliittttllee--eennddiiaann
           Generate code for a processor running in little-endian
           mode.  This is the default for all standard
           configurations.

       --mmbbiigg--eennddiiaann
           Generate code for a processor running in big-endian
           mode; the default is to compile code for a little-
           endian processor.

       --mmwwoorrddss--lliittttllee--eennddiiaann
           This option only applies when generating code for big-
           endian processors.  Generate code for a little-endian
           word order but a big-endian byte order.  That is, a
           byte order of the form 3322110077665544.  Note: this option
           should only be used if you require compatibility with
           code for big-endian ARM processors generated by
           versions of the compiler prior to 2.8.  This option is
           now deprecated.

       --mmaarrcchh==_n_a_m_e
           This specifies the name of the target ARM
           architecture.  GCC uses this name to determine what
           kind of instructions it can emit when generating
           assembly code.  This option can be used in conjunction
           with or instead of the --mmccppuu== option.  Permissible
           names are: aarrmmvv22, aarrmmvv22aa, aarrmmvv33, aarrmmvv33mm, aarrmmvv44,
           aarrmmvv44tt, aarrmmvv55, aarrmmvv55tt, aarrmmvv55ee, aarrmmvv55ttee, aarrmmvv66, aarrmmvv66jj,
           aarrmmvv66tt22, aarrmmvv66zz, aarrmmvv66zzkk, aarrmmvv66--mm, aarrmmvv77, aarrmmvv77--aa,
           aarrmmvv77--rr, aarrmmvv77--mm, aarrmmvv77ee--mm, iiwwmmmmxxtt, iiwwmmmmxxtt22, eepp99331122.

           --mmaarrcchh==nnaattiivvee causes the compiler to auto-detect the
           architecture of the build computer.  At present, this
           feature is only supported on Linux, and not all
           architectures are recognized.  If the auto-detect is
           unsuccessful the option has no effect.

       --mmttuunnee==_n_a_m_e
           This option specifies the name of the target ARM
           processor for which GCC should tune the performance of
           the code.  For some ARM implementations better
           performance can be obtained by using this option.
           Permissible names are: aarrmm22, aarrmm225500, aarrmm33, aarrmm66,
           aarrmm6600, aarrmm660000, aarrmm661100, aarrmm662200, aarrmm77, aarrmm77mm, aarrmm77dd,
           aarrmm77ddmm, aarrmm77ddii, aarrmm77ddmmii, aarrmm7700, aarrmm770000, aarrmm770000ii,
           aarrmm771100, aarrmm771100cc, aarrmm77110000, aarrmm772200, aarrmm77550000, aarrmm77550000ffee,
           aarrmm77ttddmmii, aarrmm77ttddmmii--ss, aarrmm771100tt, aarrmm772200tt, aarrmm774400tt,
           ssttrroonnggaarrmm, ssttrroonnggaarrmm111100, ssttrroonnggaarrmm11110000, ssttrroonnggaarrmm11111100,
           aarrmm88, aarrmm881100, aarrmm99, aarrmm99ee, aarrmm992200, aarrmm992200tt, aarrmm992222tt,
           aarrmm994466ee--ss, aarrmm996666ee--ss, aarrmm996688ee--ss, aarrmm992266eejj--ss, aarrmm994400tt,
           aarrmm99ttddmmii, aarrmm1100ttddmmii, aarrmm11002200tt, aarrmm11002266eejj--ss, aarrmm1100ee,
           aarrmm11002200ee, aarrmm11002222ee, aarrmm11113366jj--ss, aarrmm11113366jjff--ss, mmppccoorree,
           mmppccoorreennoovvffpp, aarrmm11115566tt22--ss, aarrmm11115566tt22ff--ss, aarrmm11117766jjzz--ss,
           aarrmm11117766jjzzff--ss, ccoorrtteexx--aa55, ccoorrtteexx--aa77, ccoorrtteexx--aa88,



gcc-4.74                    2014-06-12                        192





GCC(1)                         GNU                         GCC(1)


           ccoorrtteexx--aa99, ccoorrtteexx--aa1155, ccoorrtteexx--rr44, ccoorrtteexx--rr44ff,
           ccoorrtteexx--rr55, ccoorrtteexx--mm44, ccoorrtteexx--mm33, ccoorrtteexx--mm11, ccoorrtteexx--mm00,
           xxssccaallee, iiwwmmmmxxtt, iiwwmmmmxxtt22, eepp99331122, ffaa552266, ffaa662266,
           ffaa660066ttee, ffaa662266ttee, ffmmpp662266, ffaa772266ttee.

           --mmttuunnee==ggeenneerriicc--_a_r_c_h specifies that GCC should tune the
           performance for a blend of processors within
           architecture _a_r_c_h.  The aim is to generate code that
           run well on the current most popular processors,
           balancing between optimizations that benefit some CPUs
           in the range, and avoiding performance pitfalls of
           other CPUs.  The effects of this option may change in
           future GCC versions as CPU models come and go.

           --mmttuunnee==nnaattiivvee causes the compiler to auto-detect the
           CPU of the build computer.  At present, this feature
           is only supported on Linux, and not all architectures
           are recognized.  If the auto-detect is unsuccessful
           the option has no effect.

       --mmccppuu==_n_a_m_e
           This specifies the name of the target ARM processor.
           GCC uses this name to derive the name of the target
           ARM architecture (as if specified by --mmaarrcchh) and the
           ARM processor type for which to tune for performance
           (as if specified by --mmttuunnee).  Where this option is
           used in conjunction with --mmaarrcchh or --mmttuunnee, those
           options take precedence over the appropriate part of
           this option.

           Permissible names for this option are the same as
           those for --mmttuunnee.

           --mmccppuu==ggeenneerriicc--_a_r_c_h is also permissible, and is
           equivalent to --mmaarrcchh==_a_r_c_h --mmttuunnee==ggeenneerriicc--_a_r_c_h.  See
           --mmttuunnee for more information.

           --mmccppuu==nnaattiivvee causes the compiler to auto-detect the
           CPU of the build computer.  At present, this feature
           is only supported on Linux, and not all architectures
           are recognized.  If the auto-detect is unsuccessful
           the option has no effect.

       --mmffppuu==_n_a_m_e
       --mmffppee==_n_u_m_b_e_r
       --mmffpp==_n_u_m_b_e_r
           This specifies what floating-point hardware (or
           hardware emulation) is available on the target.
           Permissible names are: ffppaa, ffppee22, ffppee33, mmaavveerriicckk, vvffpp,
           vvffppvv33, vvffppvv33--ffpp1166, vvffppvv33--dd1166, vvffppvv33--dd1166--ffpp1166, vvffppvv33xxdd,
           vvffppvv33xxdd--ffpp1166, nneeoonn, nneeoonn--ffpp1166, vvffppvv44, vvffppvv44--dd1166,
           ffppvv44--sspp--dd1166 and nneeoonn--vvffppvv44.  --mmffpp and --mmffppee are
           synonyms for --mmffppuu=ffppee_n_u_m_b_e_r, for compatibility with
           older versions of GCC.



gcc-4.74                    2014-06-12                        193





GCC(1)                         GNU                         GCC(1)


           If --mmssoofftt--ffllooaatt is specified this specifies the format
           of floating-point values.

           If the selected floating-point hardware includes the
           NEON extension (e.g. --mmffppuu=nneeoonn), note that floating-
           point operations will not be used by GCC's auto-
           vectorization pass unless --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           is also specified.  This is because NEON hardware does
           not fully implement the IEEE 754 standard for
           floating-point arithmetic (in particular denormal
           values are treated as zero), so the use of NEON
           instructions may lead to a loss of precision.

       --mmffpp1166--ffoorrmmaatt==_n_a_m_e
           Specify the format of the "__fp16" half-precision
           floating-point type.  Permissible names are nnoonnee,
           iieeeeee, and aalltteerrnnaattiivvee; the default is nnoonnee, in which
           case the "__fp16" type is not defined.

       --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n
           The size of all structures and unions will be rounded
           up to a multiple of the number of bits set by this
           option.  Permissible values are 8, 32 and 64.  The
           default value varies for different toolchains.  For
           the COFF targeted toolchain the default value is 8.  A
           value of 64 is only allowed if the underlying ABI
           supports it.

           Specifying the larger number can produce faster, more
           efficient code, but can also increase the size of the
           program.  Different values are potentially
           incompatible.  Code compiled with one value cannot
           necessarily expect to work with code or libraries
           compiled with another value, if they exchange
           information using structures or unions.

       --mmaabboorrtt--oonn--nnoorreettuurrnn
           Generate a call to the function "abort" at the end of
           a "noreturn" function.  It will be executed if the
           function tries to return.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Tells the compiler to perform function calls by first
           loading the address of the function into a register
           and then performing a subroutine call on this
           register.  This switch is needed if the target
           function will lie outside of the 64 megabyte
           addressing range of the offset based version of
           subroutine call instruction.

           Even if this switch is enabled, not all function calls
           will be turned into long calls.  The heuristic is that
           static functions, functions that have the sshhoorrtt--ccaallll



gcc-4.74                    2014-06-12                        194





GCC(1)                         GNU                         GCC(1)


           attribute, functions that are inside the scope of a
           ##pprraaggmmaa nnoo__lloonngg__ccaallllss directive and functions whose
           definitions have already been compiled within the
           current compilation unit, will not be turned into long
           calls.  The exception to this rule is that weak
           function definitions, functions with the lloonngg--ccaallll
           attribute or the sseeccttiioonn attribute, and functions that
           are within the scope of a ##pprraaggmmaa lloonngg__ccaallllss
           directive, will always be turned into long calls.

           This feature is not enabled by default.  Specifying
           --mmnnoo--lloonngg--ccaallllss will restore the default behavior, as
           will placing the function calls within the scope of a
           ##pprraaggmmaa lloonngg__ccaallllss__ooffff directive.  Note these switches
           have no effect on how the compiler generates code to
           handle function calls via function pointers.

       --mmssiinnggllee--ppiicc--bbaassee
           Treat the register used for PIC addressing as
           read-only, rather than loading it in the prologue for
           each function.  The runtime system is responsible for
           initializing this register with an appropriate value
           before execution begins.

       --mmppiicc--rreeggiisstteerr==_r_e_g
           Specify the register to be used for PIC addressing.
           The default is R10 unless stack-checking is enabled,
           when R9 is used.

       --mmcciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss
           Insert NOPs into the instruction stream to in order to
           work around problems with invalid Maverick instruction
           combinations.  This option is only valid if the
           --mmccppuu==eepp99331122 option has been used to enable generation
           of instructions for the Cirrus Maverick floating-point
           co-processor.  This option is not enabled by default,
           since the problem is only present in older Maverick
           implementations.  The default can be re-enabled by use
           of the --mmnnoo--cciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss switch.

       --mmppookkee--ffuunnccttiioonn--nnaammee
           Write the name of each function into the text section,
           directly preceding the function prologue.  The
           generated code is similar to this:

                        t0
                            .ascii "arm_poke_function_name", 0
                            .align
                        t1
                            .word 0xff000000 + (t1 - t0)
                        arm_poke_function_name
                            mov     ip, sp
                            stmfd   sp!, {fp, ip, lr, pc}
                            sub     fp, ip, #4



gcc-4.74                    2014-06-12                        195





GCC(1)                         GNU                         GCC(1)


           When performing a stack backtrace, code can inspect
           the value of "pc" stored at "fp + 0".  If the trace
           function then looks at location "pc - 12" and the top
           8 bits are set, then we know that there is a function
           name embedded immediately preceding this location and
           has length "((pc[-3]) & 0xff000000)".

       --mmtthhuummbb
       --mmaarrmm
           Select between generating code that executes in ARM
           and Thumb states.  The default for most configurations
           is to generate code that executes in ARM state, but
           the default can be changed by configuring GCC with the
           ----wwiitthh--mmooddee==_s_t_a_t_e configure option.

       --mmttppccss--ffrraammee
           Generate a stack frame that is compliant with the
           Thumb Procedure Call Standard for all non-leaf
           functions.  (A leaf function is one that does not call
           any other functions.)  The default is --mmnnoo--ttppccss--ffrraammee.

       --mmttppccss--lleeaaff--ffrraammee
           Generate a stack frame that is compliant with the
           Thumb Procedure Call Standard for all leaf functions.
           (A leaf function is one that does not call any other
           functions.)  The default is --mmnnoo--aappccss--lleeaaff--ffrraammee.

       --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg
           Gives all externally visible functions in the file
           being compiled an ARM instruction set header which
           switches to Thumb mode before executing the rest of
           the function.  This allows these functions to be
           called from non-interworking code.  This option is not
           valid in AAPCS configurations because interworking is
           enabled by default.

       --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg
           Allows calls via function pointers (including virtual
           functions) to execute correctly regardless of whether
           the target code has been compiled for interworking or
           not.  There is a small overhead in the cost of
           executing a function pointer if this option is
           enabled.  This option is not valid in AAPCS
           configurations because interworking is enabled by
           default.

       --mmttpp==_n_a_m_e
           Specify the access model for the thread local storage
           pointer.  The valid models are ssoofftt, which generates
           calls to "__aeabi_read_tp", ccpp1155, which fetches the
           thread pointer from "cp15" directly (supported in the
           arm6k architecture), and aauuttoo, which uses the best
           available method for the selected processor.  The
           default setting is aauuttoo.



gcc-4.74                    2014-06-12                        196





GCC(1)                         GNU                         GCC(1)


       --mmttllss--ddiiaalleecctt==_d_i_a_l_e_c_t
           Specify the dialect to use for accessing thread local
           storage.  Two dialects are supported --- ggnnuu and ggnnuu22.
           The ggnnuu dialect selects the original GNU scheme for
           supporting local and global dynamic TLS models.  The
           ggnnuu22 dialect selects the GNU descriptor scheme, which
           provides better performance for shared libraries.  The
           GNU descriptor scheme is compatible with the original
           scheme, but does require new assembler, linker and
           library support.  Initial and local exec TLS models
           are unaffected by this option and always use the
           original scheme.

       --mmwwoorrdd--rreellooccaattiioonnss
           Only generate absolute relocations on word-sized
           values (i.e. R_ARM_ABS32).  This is enabled by default
           on targets (uClinux, SymbianOS) where the runtime
           loader imposes this restriction, and when --ffppiicc or
           --ffPPIICC is specified.

       --mmffiixx--ccoorrtteexx--mm33--llddrrdd
           Some Cortex-M3 cores can cause data corruption when
           "ldrd" instructions with overlapping destination and
           base registers are used.  This option avoids
           generating these instructions.  This option is enabled
           by default when --mmccppuu==ccoorrtteexx--mm33 is specified.

       --mmuunnaalliiggnneedd--aacccceessss
       --mmnnoo--uunnaalliiggnneedd--aacccceessss
           Enables (or disables) reading and writing of 16- and
           32- bit values from addresses that are not 16- or 32-
           bit aligned.  By default unaligned access is disabled
           for all pre-ARMv6 and all ARMv6-M architectures, and
           enabled for all other architectures.  If unaligned
           access is not enabled then words in packed data
           structures will be accessed a byte at a time.

           The ARM attribute "Tag_CPU_unaligned_access" will be
           set in the generated object file to either true or
           false, depending upon the setting of this option.  If
           unaligned access is enabled then the preprocessor
           symbol "__ARM_FEATURE_UNALIGNED" will also be defined.

       _A_V_R _O_p_t_i_o_n_s

       --mmmmccuu==_m_c_u
           Specify Atmel AVR instruction set architectures (ISA)
           or MCU type.

           The default for this option is@tie{}"avr2".

           GCC supports the following AVR devices and ISAs:





gcc-4.74                    2014-06-12                        197





GCC(1)                         GNU                         GCC(1)


           "avr2"
               "Classic" devices with up to 8@tie{}KiB of program
               memory.  _m_c_u@tie{}= "attiny22", "attiny26",
               "at90c8534", "at90s2313", "at90s2323",
               "at90s2333", "at90s2343", "at90s4414",
               "at90s4433", "at90s4434", "at90s8515",
               "at90s8535".

           "avr25"
               "Classic" devices with up to 8@tie{}KiB of program
               memory and with the "MOVW" instruction.
               _m_c_u@tie{}= "ata6289", "attiny13", "attiny13a",
               "attiny2313", "attiny2313a", "attiny24",
               "attiny24a", "attiny25", "attiny261",
               "attiny261a", "attiny43u", "attiny4313",
               "attiny44", "attiny44a", "attiny45", "attiny461",
               "attiny461a", "attiny48", "attiny84", "attiny84a",
               "attiny85", "attiny861", "attiny861a", "attiny87",
               "attiny88", "at86rf401".

           "avr3"
               "Classic" devices with 16@tie{}KiB up to
               64@tie{}KiB of  program memory.  _m_c_u@tie{}=
               "at43usb355", "at76c711".

           "avr31"
               "Classic" devices with 128@tie{}KiB of program
               memory.  _m_c_u@tie{}= "atmega103", "at43usb320".

           "avr35"
               "Classic" devices with 16@tie{}KiB up to
               64@tie{}KiB of program memory and with the "MOVW"
               instruction.  _m_c_u@tie{}= "atmega16u2",
               "atmega32u2", "atmega8u2", "attiny167",
               "at90usb162", "at90usb82".

           "avr4"
               "Enhanced" devices with up to 8@tie{}KiB of
               program memory.  _m_c_u@tie{}= "atmega48",
               "atmega48a", "atmega48p", "atmega8", "atmega8hva",
               "atmega8515", "atmega8535", "atmega88",
               "atmega88a", "atmega88p", "atmega88pa",
               "at90pwm1", "at90pwm2", "at90pwm2b", "at90pwm3",
               "at90pwm3b", "at90pwm81".

           "avr5"
               "Enhanced" devices with 16@tie{}KiB up to
               64@tie{}KiB of program memory.  _m_c_u@tie{}=
               "atmega16", "atmega16a", "atmega16hva",
               "atmega16hva2", "atmega16hvb", "atmega16m1",
               "atmega16u4", "atmega161", "atmega162",
               "atmega163", "atmega164a", "atmega164p",
               "atmega165", "atmega165a", "atmega165p",
               "atmega168", "atmega168a", "atmega168p",



gcc-4.74                    2014-06-12                        198





GCC(1)                         GNU                         GCC(1)


               "atmega169", "atmega169a", "atmega169p",
               "atmega169pa", "atmega32", "atmega32c1",
               "atmega32hvb", "atmega32m1", "atmega32u4",
               "atmega32u6", "atmega323", "atmega324a",
               "atmega324p", "atmega324pa", "atmega325",
               "atmega325a", "atmega325p", "atmega3250",
               "atmega3250a", "atmega3250p", "atmega328",
               "atmega328p", "atmega329", "atmega329a",
               "atmega329p", "atmega329pa", "atmega3290",
               "atmega3290a", "atmega3290p", "atmega406",
               "atmega64", "atmega64c1", "atmega64hve",
               "atmega64m1", "atmega640", "atmega644",
               "atmega644a", "atmega644p", "atmega644pa",
               "atmega645", "atmega645a", "atmega645p",
               "atmega6450", "atmega6450a", "atmega6450p",
               "atmega649", "atmega649a", "atmega649p",
               "atmega6490", "at90can32", "at90can64",
               "at90pwm216", "at90pwm316", "at90scr100",
               "at90usb646", "at90usb647", "at94k", "m3000".

           "avr51"
               "Enhanced" devices with 128@tie{}KiB of program
               memory.  _m_c_u@tie{}= "atmega128", "atmega128rfa1",
               "atmega1280", "atmega1281", "atmega1284p",
               "at90can128", "at90usb1286", "at90usb1287".

           "avr6"
               "Enhanced" devices with 3-byte PC, i.e. with more
               than 128@tie{}KiB of program memory.  _m_c_u@tie{}=
               "atmega2560", "atmega2561".

           "avrxmega2"
               "XMEGA" devices with more than 8@tie{}KiB and up
               to 64@tie{}KiB of program memory.  _m_c_u@tie{}=
               "atxmega16a4", "atxmega16d4", "atxmega16x1",
               "atxmega32a4", "atxmega32d4", "atxmega32x1".

           "avrxmega4"
               "XMEGA" devices with more than 64@tie{}KiB and up
               to 128@tie{}KiB of program memory.  _m_c_u@tie{}=
               "atxmega64a3", "atxmega64d3".

           "avrxmega5"
               "XMEGA" devices with more than 64@tie{}KiB and up
               to 128@tie{}KiB of program memory and more than
               64@tie{}KiB of RAM.  _m_c_u@tie{}= "atxmega64a1",
               "atxmega64a1u".

           "avrxmega6"
               "XMEGA" devices with more than 128@tie{}KiB of
               program memory.  _m_c_u@tie{}= "atxmega128a3",
               "atxmega128d3", "atxmega192a3", "atxmega192d3",
               "atxmega256a3", "atxmega256a3b", "atxmega256a3bu",
               "atxmega256d3".



gcc-4.74                    2014-06-12                        199





GCC(1)                         GNU                         GCC(1)


           "avrxmega7"
               "XMEGA" devices with more than 128@tie{}KiB of
               program memory and more than 64@tie{}KiB of RAM.
               _m_c_u@tie{}= "atxmega128a1", "atxmega128a1u".

           "avr1"
               This ISA is implemented by the minimal AVR core
               and supported for assembler only.  _m_c_u@tie{}=
               "attiny11", "attiny12", "attiny15", "attiny28",
               "at90s1200".

       --mmaaccccuummuullaattee--aarrggss
           Accumulate outgoing function arguments and
           acquire/release the needed stack space for outgoing
           function arguments once in function prologue/epilogue.
           Without this option, outgoing arguments are pushed
           before calling a function and popped afterwards.

           Popping the arguments after the function call can be
           expensive on AVR so that accumulating the stack space
           might lead to smaller executables because arguments
           need not to be removed from the stack after such a
           function call.

           This option can lead to reduced code size for
           functions that perform several calls to functions that
           get their arguments on the stack like calls to printf-
           like functions.

       --mmbbrraanncchh--ccoosstt==_c_o_s_t
           Set the branch costs for conditional branch
           instructions to _c_o_s_t.  Reasonable values for _c_o_s_t are
           small, non-negative integers. The default branch cost
           is 0.

       --mmccaallll--pprroolloogguueess
           Functions prologues/epilogues are expanded as calls to
           appropriate subroutines.  Code size is smaller.

       --mmiinntt88
           Assume "int" to be 8-bit integer.  This affects the
           sizes of all types: a "char" is 1 byte, an "int" is 1
           byte, a "long" is 2 bytes, and "long long" is 4 bytes.
           Please note that this option does not conform to the C
           standards, but it results in smaller code size.

       --mmnnoo--iinntteerrrruuppttss
           Generated code is not compatible with hardware
           interrupts.  Code size is smaller.

       --mmrreellaaxx
           Try to replace "CALL" resp. "JMP" instruction by the
           shorter "RCALL" resp. "RJMP" instruction if
           applicable.  Setting "-mrelax" just adds the "--relax"



gcc-4.74                    2014-06-12                        200





GCC(1)                         GNU                         GCC(1)


           option to the linker command line when the linker is
           called.

           Jump relaxing is performed by the linker because jump
           offsets are not known before code is located.
           Therefore, the assembler code generated by the
           compiler is the same, but the instructions in the
           executable may differ from instructions in the
           assembler code.

           Relaxing must be turned on if linker stubs are needed,
           see the section on "EIND" and linker stubs below.

       --mmsshhoorrtt--ccaallllss
           This option has been deprecated and will be removed in
           GCC 4.8.  See "-mrelax" for a replacement.

           Use "RCALL"/"RJMP" instructions even on devices with
           16@tie{}KiB or more of program memory, i.e. on devices
           that have the "CALL" and "JMP" instructions.

       --mmsspp88
           Treat the stack pointer register as an 8-bit register,
           i.e. assume the high byte of the stack pointer is
           zero.  In general, you don't need to set this option
           by hand.

           This option is used internally by the compiler to
           select and build multilibs for architectures "avr2"
           and "avr25".  These architectures mix devices with and
           without "SPH".  For any setting other than
           "-mmcu=avr2" or "-mmcu=avr25" the compiler driver will
           add or remove this option from the compiler proper's
           command line, because the compiler then knows if the
           device or architecture has an 8-bit stack pointer and
           thus no "SPH" register or not.

       --mmssttrriicctt--XX
           Use address register "X" in a way proposed by the
           hardware.  This means that "X" is only used in
           indirect, post-increment or pre-decrement addressing.

           Without this option, the "X" register may be used in
           the same way as "Y" or "Z" which then is emulated by
           additional instructions.  For example, loading a value
           with "X+const" addressing with a small non-negative
           "const < 64" to a register _R_n is performed as

                   adiw r26, const   ; X += const
                   ld   <Rn>, X        ; <Rn> = *X
                   sbiw r26, const   ; X -= const

       --mmttiinnyy--ssttaacckk
           Only change the lower 8@tie{}bits of the stack



gcc-4.74                    2014-06-12                        201





GCC(1)                         GNU                         GCC(1)


           pointer.

       "EIND" and Devices with more than 128 Ki Bytes of Flash

       Pointers in the implementation are 16@tie{}bits wide.  The
       address of a function or label is represented as word
       address so that indirect jumps and calls can target any
       code address in the range of 64@tie{}Ki words.

       In order to facilitate indirect jump on devices with more
       than 128@tie{}Ki bytes of program memory space, there is a
       special function register called "EIND" that serves as
       most significant part of the target address when "EICALL"
       or "EIJMP" instructions are used.

       Indirect jumps and calls on these devices are handled as
       follows by the compiler and are subject to some
       limitations:

       +o   The compiler never sets "EIND".

       +o   The compiler uses "EIND" implicitely in
           "EICALL"/"EIJMP" instructions or might read "EIND"
           directly in order to emulate an indirect call/jump by
           means of a "RET" instruction.

       +o   The compiler assumes that "EIND" never changes during
           the startup code or during the application. In
           particular, "EIND" is not saved/restored in function
           or interrupt service routine prologue/epilogue.

       +o   For indirect calls to functions and computed goto, the
           linker generates _s_t_u_b_s. Stubs are jump pads sometimes
           also called _t_r_a_m_p_o_l_i_n_e_s. Thus, the indirect call/jump
           jumps to such a stub.  The stub contains a direct jump
           to the desired address.

       +o   Linker relaxation must be turned on so that the linker
           will generate the stubs correctly an all situaltion.
           See the compiler option "-mrelax" and the linler
           option "--relax".  There are corner cases where the
           linker is supposed to generate stubs but aborts
           without relaxation and without a helpful error
           message.

       +o   The default linker script is arranged for code with
           "EIND = 0".  If code is supposed to work for a setup
           with "EIND != 0", a custom linker script has to be
           used in order to place the sections whose name start
           with ".trampolines" into the segment where "EIND"
           points to.

       +o   The startup code from libgcc never sets "EIND".
           Notice that startup code is a blend of code from



gcc-4.74                    2014-06-12                        202





GCC(1)                         GNU                         GCC(1)


           libgcc and AVR-LibC.  For the impact of AVR-LibC on
           "EIND", see the AVR-LibC user manual
           ("http://nongnu.org/avr-libc/user-manual/").

       +o   It is legitimate for user-specific startup code to set
           up "EIND" early, for example by means of
           initialization code located in section ".init3". Such
           code runs prior to general startup code that
           initializes RAM and calls constructors, but after the
           bit of startup code from AVR-LibC that sets "EIND" to
           the segment where the vector table is located.

                   #include <avr/io.h>

                   static void
                   __attribute__((section(".init3"),naked,used,no_instrument_function))
                   init3_set_eind (void)
                   {
                     __asm volatile ("ldi r24,pm_hh8(__trampolines_start)\n\t"
                                     "out %i0,r24" :: "n" (&EIND) : "r24","memory");
                   }

           The "__trampolines_start" symbol is defined in the
           linker script.

       +o   Stubs are generated automatically by the linker if the
           following two conditions are met:

           -<The address of a label is taken by means of the "gs"
           modifier>
               (short for _g_e_n_e_r_a_t_e _s_t_u_b_s) like so:

                       LDI r24, lo8(gs(<func>))
                       LDI r25, hi8(gs(<func>))

           -<The final location of that label is in a code
           segment>
               _o_u_t_s_i_d_e the segment where the stubs are located.

       +o   The compiler emits such "gs" modifiers for code labels
           in the following situations:

           -<Taking address of a function or code label.>
           -<Computed goto.>
           -<If prologue-save function is used, see
           --mmccaallll--pprroolloogguueess>
               command-line option.

           -<Switch/case dispatch tables. If you do not want such
           dispatch>
               tables you can specify the --ffnnoo--jjuummpp--ttaabblleess
               command-line option.





gcc-4.74                    2014-06-12                        203





GCC(1)                         GNU                         GCC(1)


           -<C and C++ constructors/destructors called during
           startup/shutdown.>
           -<If the tools hit a "gs()" modifier explained above.>
       +o   Jumping to non-symbolic addresses like so is _n_o_t
           supported:

                   int main (void)
                   {
                       /* Call function at word address 0x2 */
                       return ((int(*)(void)) 0x2)();
                   }

           Instead, a stub has to be set up, i.e. the function
           has to be called through a symbol ("func_4" in the
           example):

                   int main (void)
                   {
                       extern int func_4 (void);

                       /* Call function at byte address 0x4 */
                       return func_4();
                   }

           and the application be linked with
           "-Wl,--defsym,func_4=0x4".  Alternatively, "func_4"
           can be defined in the linker script.

       Handling of the "RAMPD", "RAMPX", "RAMPY" and "RAMPZ"
       Special Function Registers

       Some AVR devices support memories larger than the
       64@tie{}KiB range that can be accessed with 16-bit
       pointers.  To access memory locations outside this
       64@tie{}KiB range, the contentent of a "RAMP" register is
       used as high part of the address: The "X", "Y", "Z"
       address register is concatenated with the "RAMPX",
       "RAMPY", "RAMPZ" special function register, respectively,
       to get a wide address. Similarly, "RAMPD" is used together
       with direct addressing.

       +o   The startup code initializes the "RAMP" special
           function registers with zero.

       +o   If a AAVVRR NNaammeedd AAddddrreessss SSppaacceess,,nnaammeedd aaddddrreessss ssppaaccee
           other than generic or "__flash" is used, then "RAMPZ"
           is set as needed before the operation.

       +o   If the device supports RAM larger than 64@tie{KiB} and
           the compiler needs to change "RAMPZ" to accomplish an
           operation, "RAMPZ" is reset to zero after the
           operation.

       +o   If the device comes with a specific "RAMP" register,



gcc-4.74                    2014-06-12                        204





GCC(1)                         GNU                         GCC(1)


           the ISR prologue/epilogue saves/restores that SFR and
           initializes it with zero in case the ISR code might
           (implicitly) use it.

       +o   RAM larger than 64@tie{KiB} is not supported by GCC
           for AVR targets.  If you use inline assembler to read
           from locations outside the 16-bit address range and
           change one of the "RAMP" registers, you must reset it
           to zero after the access.

       AVR Built-in Macros

       GCC defines several built-in macros so that the user code
       can test for the presence or absence of features.  Almost
       any of the following built-in macros are deduced from
       device capabilities and thus triggered by the "-mmcu="
       command-line option.

       For even more AVR-specific built-in macros see AAVVRR NNaammeedd
       AAddddrreessss SSppaacceess and AAVVRR BBuuiilltt--iinn FFuunnccttiioonnss.

       "__AVR_ARCH__"
           Build-in macro that resolves to a decimal number that
           identifies the architecture and depends on the
           "-mmcu=mcu" option.  Possible values are:

           2, 25, 3, 31, 35, 4, 5, 51, 6, 102, 104, 105, 106, 107

           for _m_c_u="avr2", "avr25", "avr3", "avr31", "avr35",
           "avr4", "avr5", "avr51", "avr6", "avrxmega2",
           "avrxmega4", "avrxmega5", "avrxmega6", "avrxmega7",
           respectively.  If _m_c_u specifies a device, this built-
           in macro is set accordingly. For example, with
           "-mmcu=atmega8" the macro will be defined to 4.

       "__AVR_Device__"
           Setting "-mmcu=device" defines this built-in macro
           which reflects the device's name. For example,
           "-mmcu=atmega8" defines the built-in macro
           "__AVR_ATmega8__", "-mmcu=attiny261a" defines
           "__AVR_ATtiny261A__", etc.

           The built-in macros' names follow the scheme
           "__AVR_Device__" where _D_e_v_i_c_e is the device name as
           from the AVR user manual. The difference between
           _D_e_v_i_c_e in the built-in macro and _d_e_v_i_c_e in
           "-mmcu=device" is that the latter is always lowercase.

           If _d_e_v_i_c_e is not a device but only a core architecture
           like "avr51", this macro will not be defined.

       "__AVR_XMEGA__"
           The device/architecture belongs to the XMEGA family of
           devices.



gcc-4.74                    2014-06-12                        205





GCC(1)                         GNU                         GCC(1)


       "__AVR_HAVE_ELPM__"
           The device has the the "ELPM" instruction.

       "__AVR_HAVE_ELPMX__"
           The device has the "ELPM Rn,Z" and "ELPM Rn,Z+"
           instructions.

       "__AVR_HAVE_MOVW__"
           The device has the "MOVW" instruction to perform
           16-bit register-register moves.

       "__AVR_HAVE_LPMX__"
           The device has the "LPM Rn,Z" and "LPM Rn,Z+"
           instructions.

       "__AVR_HAVE_MUL__"
           The device has a hardware multiplier.

       "__AVR_HAVE_JMP_CALL__"
           The device has the "JMP" and "CALL" instructions.
           This is the case for devices with at least 16@tie{}KiB
           of program memory and if "-mshort-calls" is not set.

       "__AVR_HAVE_EIJMP_EICALL__"
       "__AVR_3_BYTE_PC__"
           The device has the "EIJMP" and "EICALL" instructions.
           This is the case for devices with more than
           128@tie{}KiB of program memory.  This also means that
           the program counter (PC) is 3@tie{}bytes wide.

       "__AVR_2_BYTE_PC__"
           The program counter (PC) is 2@tie{}bytes wide. This is
           the case for devices with up to 128@tie{}KiB of
           program memory.

       "__AVR_HAVE_8BIT_SP__"
       "__AVR_HAVE_16BIT_SP__"
           The stack pointer (SP) register is treated as 8-bit
           respectively 16-bit register by the compiler.  The
           definition of these macros is affected by
           "-mtiny-stack".

       "__AVR_HAVE_SPH__"
       "__AVR_SP8__"
           The device has the SPH (high part of stack pointer)
           special function register or has an 8-bit stack
           pointer, respectively.  The definition of these macros
           is affected by "-mmcu=" and in the cases of
           "-mmcu=avr2" and "-mmcu=avr25" also by "-msp8".

       "__AVR_HAVE_RAMPD__"
       "__AVR_HAVE_RAMPX__"
       "__AVR_HAVE_RAMPY__"




gcc-4.74                    2014-06-12                        206





GCC(1)                         GNU                         GCC(1)


       "__AVR_HAVE_RAMPZ__"
           The device has the "RAMPD", "RAMPX", "RAMPY", "RAMPZ"
           special function register, respectively.

       "__NO_INTERRUPTS__"
           This macro reflects the "-mno-interrupts" command line
           option.

       "__AVR_ERRATA_SKIP__"
       "__AVR_ERRATA_SKIP_JMP_CALL__"
           Some AVR devices (AT90S8515, ATmega103) must not skip
           32-bit instructions because of a hardware erratum.
           Skip instructions are "SBRS", "SBRC", "SBIS", "SBIC"
           and "CPSE".  The second macro is only defined if
           "__AVR_HAVE_JMP_CALL__" is also set.

       "__AVR_SFR_OFFSET__=offset"
           Instructions that can address I/O special function
           registers directly like "IN", "OUT", "SBI", etc. may
           use a different address as if addressed by an
           instruction to access RAM like "LD" or "STS". This
           offset depends on the device architecture and has to
           be subtracted from the RAM address in order to get the
           respective I/O@tie{}address.

       "__WITH_AVRLIBC__"
           The compiler is configured to be used together with
           AVR-Libc.  See the "--with-avrlibc" configure option.

       _B_l_a_c_k_f_i_n _O_p_t_i_o_n_s

       --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n]
           Specifies the name of the target Blackfin processor.
           Currently, _c_p_u can be one of bbff551122, bbff551144, bbff551166,
           bbff551188, bbff552222, bbff552233, bbff552244, bbff552255, bbff552266, bbff552277,
           bbff553311, bbff553322, bbff553333, bbff553344, bbff553366, bbff553377, bbff553388,
           bbff553399, bbff554422, bbff554444, bbff554477, bbff554488, bbff554499, bbff554422mm,
           bbff554444mm, bbff554477mm, bbff554488mm, bbff554499mm, bbff556611, bbff559922.  The
           optional _s_i_r_e_v_i_s_i_o_n specifies the silicon revision of
           the target Blackfin processor.  Any workarounds
           available for the targeted silicon revision will be
           enabled.  If _s_i_r_e_v_i_s_i_o_n is nnoonnee, no workarounds are
           enabled.  If _s_i_r_e_v_i_s_i_o_n is aannyy, all workarounds for
           the targeted processor will be enabled.  The
           "__SILICON_REVISION__" macro is defined to two
           hexadecimal digits representing the major and minor
           numbers in the silicon revision.  If _s_i_r_e_v_i_s_i_o_n is
           nnoonnee, the "__SILICON_REVISION__" is not defined.  If
           _s_i_r_e_v_i_s_i_o_n is aannyy, the "__SILICON_REVISION__" is
           defined to be 0xffff.  If this optional _s_i_r_e_v_i_s_i_o_n is
           not used, GCC assumes the latest known silicon
           revision of the targeted Blackfin processor.

           Support for bbff556611 is incomplete.  For bbff556611, Only the



gcc-4.74                    2014-06-12                        207





GCC(1)                         GNU                         GCC(1)


           processor macro is defined.  Without this option,
           bbff553322 is used as the processor by default.  The
           corresponding predefined processor macros for _c_p_u is
           to be defined.  And for bbffiinn--eellff toolchain, this
           causes the hardware BSP provided by libgloss to be
           linked in if --mmssiimm is not given.

       --mmssiimm
           Specifies that the program will be run on the
           simulator.  This causes the simulator BSP provided by
           libgloss to be linked in.  This option has effect only
           for bbffiinn--eellff toolchain.  Certain other options, such
           as --mmiidd--sshhaarreedd--lliibbrraarryy and --mmffddppiicc, imply --mmssiimm.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Don't keep the frame pointer in a register for leaf
           functions.  This avoids the instructions to save, set
           up and restore frame pointers and makes an extra
           register available in leaf functions.  The option
           --ffoommiitt--ffrraammee--ppooiinntteerr removes the frame pointer for all
           functions, which might make debugging harder.

       --mmssppeecclldd--aannoommaallyy
           When enabled, the compiler will ensure that the
           generated code does not contain speculative loads
           after jump instructions. If this option is used,
           "__WORKAROUND_SPECULATIVE_LOADS" is defined.

       --mmnnoo--ssppeecclldd--aannoommaallyy
           Don't generate extra code to prevent speculative loads
           from occurring.

       --mmccssyynncc--aannoommaallyy
           When enabled, the compiler will ensure that the
           generated code does not contain CSYNC or SSYNC
           instructions too soon after conditional branches.  If
           this option is used, "__WORKAROUND_SPECULATIVE_SYNCS"
           is defined.

       --mmnnoo--ccssyynncc--aannoommaallyy
           Don't generate extra code to prevent CSYNC or SSYNC
           instructions from occurring too soon after a
           conditional branch.

       --mmllooww--6644kk
           When enabled, the compiler is free to take advantage
           of the knowledge that the entire program fits into the
           low 64k of memory.

       --mmnnoo--llooww--6644kk
           Assume that the program is arbitrarily large.  This is
           the default.





gcc-4.74                    2014-06-12                        208





GCC(1)                         GNU                         GCC(1)


       --mmssttaacckk--cchheecckk--ll11
           Do stack checking using information placed into L1
           scratchpad memory by the uClinux kernel.

       --mmiidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the
           library ID method.  This allows for execute in place
           and shared libraries in an environment without virtual
           memory management.  This option implies --ffPPIICC.  With a
           bbffiinn--eellff target, this option implies --mmssiimm.

       --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that doesn't assume ID based shared
           libraries are being used.  This is the default.

       --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the
           library ID method, but assumes that this library or
           executable won't link against any other ID shared
           libraries.  That allows the compiler to use faster
           code for jumps and calls.

       --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           Do not assume that the code being compiled won't link
           against any ID shared libraries.  Slower code will be
           generated for jump and call insns.

       --mmsshhaarreedd--lliibbrraarryy--iidd==nn
           Specified the identification number of the ID based
           shared library being compiled.  Specifying a value of
           0 will generate more compact code, specifying other
           values will force the allocation of that number to the
           current library but is no more space or time efficient
           than omitting this option.

       --mmsseepp--ddaattaa
           Generate code that allows the data segment to be
           located in a different area of memory from the text
           segment.  This allows for execute in place in an
           environment without virtual memory management by
           eliminating relocations against the text section.

       --mmnnoo--sseepp--ddaattaa
           Generate code that assumes that the data segment
           follows the text segment.  This is the default.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Tells the compiler to perform function calls by first
           loading the address of the function into a register
           and then performing a subroutine call on this
           register.  This switch is needed if the target
           function lies outside of the 24-bit addressing range
           of the offset-based version of subroutine call



gcc-4.74                    2014-06-12                        209





GCC(1)                         GNU                         GCC(1)


           instruction.

           This feature is not enabled by default.  Specifying
           --mmnnoo--lloonngg--ccaallllss will restore the default behavior.
           Note these switches have no effect on how the compiler
           generates code to handle function calls via function
           pointers.

       --mmffaasstt--ffpp
           Link with the fast floating-point library. This
           library relaxes some of the IEEE floating-point
           standard's rules for checking inputs against Not-a-
           Number (NAN), in the interest of performance.

       --mmiinnlliinnee--pplltt
           Enable inlining of PLT entries in function calls to
           functions that are not known to bind locally.  It has
           no effect without --mmffddppiicc.

       --mmmmuullttiiccoorree
           Build standalone application for multicore Blackfin
           processor. Proper start files and link scripts will be
           used to support multicore.  This option defines
           "__BFIN_MULTICORE". It can only be used with
           --mmccppuu==bbff556611[--_s_i_r_e_v_i_s_i_o_n]. It can be used with --mmccoorreeaa
           or --mmccoorreebb. If it's used without --mmccoorreeaa or --mmccoorreebb,
           single application/dual core programming model is
           used. In this model, the main function of Core B
           should be named as coreb_main. If it's used with
           --mmccoorreeaa or --mmccoorreebb, one application per core
           programming model is used.  If this option is not
           used, single core application programming model is
           used.

       --mmccoorreeaa
           Build standalone application for Core A of BF561 when
           using one application per core programming model.
           Proper start files and link scripts will be used to
           support Core A. This option defines "__BFIN_COREA". It
           must be used with --mmmmuullttiiccoorree.

       --mmccoorreebb
           Build standalone application for Core B of BF561 when
           using one application per core programming model.
           Proper start files and link scripts will be used to
           support Core B. This option defines "__BFIN_COREB".
           When this option is used, coreb_main should be used
           instead of main. It must be used with --mmmmuullttiiccoorree.

       --mmssddrraamm
           Build standalone application for SDRAM. Proper start
           files and link scripts will be used to put the
           application into SDRAM.  Loader should initialize
           SDRAM before loading the application into SDRAM. This



gcc-4.74                    2014-06-12                        210





GCC(1)                         GNU                         GCC(1)


           option defines "__BFIN_SDRAM".

       --mmiiccppllbb
           Assume that ICPLBs are enabled at run time.  This has
           an effect on certain anomaly workarounds.  For Linux
           targets, the default is to assume ICPLBs are enabled;
           for standalone applications the default is off.

       _C_6_X _O_p_t_i_o_n_s

       --mmaarrcchh==_n_a_m_e
           This specifies the name of the target architecture.
           GCC uses this name to determine what kind of
           instructions it can emit when generating assembly
           code.  Permissible names are: cc6622xx, cc6644xx, cc6644xx++, cc6677xx,
           cc6677xx++, cc667744xx.

       --mmbbiigg--eennddiiaann
           Generate code for a big-endian target.

       --mmlliittttllee--eennddiiaann
           Generate code for a little-endian target.  This is the
           default.

       --mmssiimm
           Choose startup files and linker script suitable for
           the simulator.

       --mmssddaattaa==ddeeffaauulltt
           Put small global and static data in the ..nneeaarrddaattaa
           section, which is pointed to by register "B14".  Put
           small uninitialized global and static data in the ..bbssss
           section, which is adjacent to the ..nneeaarrddaattaa section.
           Put small read-only data into the ..rrooddaattaa section.
           The corresponding sections used for large pieces of
           data are ..ffaarrddaattaa, ..ffaarr and ..ccoonnsstt.

       --mmssddaattaa==aallll
           Put all data, not just small objets, into the sections
           reserved for small data, and use addressing relative
           to the "B14" register to access them.

       --mmssddaattaa==nnoonnee
           Make no use of the sections reserved for small data,
           and use absolute addresses to access all data.  Put
           all initialized global and static data in the ..ffaarrddaattaa
           section, and all uninitialized data in the ..ffaarr
           section.  Put all constant data into the ..ccoonnsstt
           section.

       _C_R_I_S _O_p_t_i_o_n_s

       These options are defined specifically for the CRIS ports.




gcc-4.74                    2014-06-12                        211





GCC(1)                         GNU                         GCC(1)


       --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
       --mmccppuu==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The
           choices for _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are vv33, vv88 and vv1100 for
           respectively ETRAX 4, ETRAX 100, and ETRAX 100 LX.
           Default is vv00 except for cris-axis-linux-gnu, where
           the default is vv1100.

       --mmttuunnee==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Tune to _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e everything applicable about
           the generated code, except for the ABI and the set of
           available instructions.  The choices for _a_r_c_h_i_t_e_c_t_u_r_e_-
           _t_y_p_e are the same as for --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e.

       --mmmmaaxx--ssttaacckk--ffrraammee==_n
           Warn when the stack frame of a function exceeds _n
           bytes.

       --mmeettrraaxx44
       --mmeettrraaxx110000
           The options --mmeettrraaxx44 and --mmeettrraaxx110000 are synonyms for
           --mmaarrcchh==vv33 and --mmaarrcchh==vv88 respectively.

       --mmmmuull--bbuugg--wwoorrkkaarroouunndd
       --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd
           Work around a bug in the "muls" and "mulu"
           instructions for CPU models where it applies.  This
           option is active by default.

       --mmppddeebbuugg
           Enable CRIS-specific verbose debug-related information
           in the assembly code.  This option also has the effect
           to turn off the ##NNOO__AAPPPP formatted-code indicator to
           the assembler at the beginning of the assembly file.

       --mmcccc--iinniitt
           Do not use condition-code results from previous
           instruction; always emit compare and test instructions
           before use of condition codes.

       --mmnnoo--ssiiddee--eeffffeeccttss
           Do not emit instructions with side-effects in
           addressing modes other than post-increment.

       --mmssttaacckk--aalliiggnn
       --mmnnoo--ssttaacckk--aalliiggnn
       --mmddaattaa--aalliiggnn
       --mmnnoo--ddaattaa--aalliiggnn
       --mmccoonnsstt--aalliiggnn
       --mmnnoo--ccoonnsstt--aalliiggnn
           These options (no-options) arranges (eliminate
           arrangements) for the stack-frame, individual data and
           constants to be aligned for the maximum single data
           access size for the chosen CPU model.  The default is



gcc-4.74                    2014-06-12                        212





GCC(1)                         GNU                         GCC(1)


           to arrange for 32-bit alignment.  ABI details such as
           structure layout are not affected by these options.

       --mm3322--bbiitt
       --mm1166--bbiitt
       --mm88--bbiitt
           Similar to the stack- data- and const-align options
           above, these options arrange for stack-frame, writable
           data and constants to all be 32-bit, 16-bit or 8-bit
           aligned.  The default is 32-bit alignment.

       --mmnnoo--pprroolloogguuee--eeppiilloogguuee
       --mmpprroolloogguuee--eeppiilloogguuee
           With --mmnnoo--pprroolloogguuee--eeppiilloogguuee, the normal function
           prologue and epilogue which set up the stack frame are
           omitted and no return instructions or return sequences
           are generated in the code.  Use this option only
           together with visual inspection of the compiled code:
           no warnings or errors are generated when call-saved
           registers must be saved, or storage for local variable
           needs to be allocated.

       --mmnnoo--ggoottpplltt
       --mmggoottpplltt
           With --ffppiicc and --ffPPIICC, don't generate (do generate)
           instruction sequences that load addresses for
           functions from the PLT part of the GOT rather than
           (traditional on other architectures) calls to the PLT.
           The default is --mmggoottpplltt.

       --mmeellff
           Legacy no-op option only recognized with the cris-
           axis-elf and cris-axis-linux-gnu targets.

       --mmlliinnuuxx
           Legacy no-op option only recognized with the cris-
           axis-linux-gnu target.

       --ssiimm
           This option, recognized for the cris-axis-elf arranges
           to link with input-output functions from a simulator
           library.  Code, initialized data and zero-initialized
           data are allocated consecutively.

       --ssiimm22
           Like --ssiimm, but pass linker options to locate
           initialized data at 0x40000000 and zero-initialized
           data at 0x80000000.

       _C_R_1_6 _O_p_t_i_o_n_s

       These options are defined specifically for the CR16 ports.





gcc-4.74                    2014-06-12                        213





GCC(1)                         GNU                         GCC(1)


       --mmmmaacc
           Enable the use of multiply-accumulate instructions.
           Disabled by default.

       --mmccrr1166ccpplluuss
       --mmccrr1166cc
           Generate code for CR16C or CR16C+ architecture. CR16C+
           architecture is default.

       --mmssiimm
           Links the library libsim.a which is in compatible with
           simulator. Applicable to elf compiler only.

       --mmiinntt3322
           Choose integer type as 32-bit wide.

       --mmbbiitt--ooppss
           Generates sbit/cbit instructions for bit
           manipulations.

       --mmddaattaa--mmooddeell==_m_o_d_e_l
           Choose a data model. The choices for _m_o_d_e_l are nneeaarr,
           ffaarr or mmeeddiiuumm. mmeeddiiuumm is default.  However, ffaarr is not
           valid when -mcr16c option is chosen as CR16C
           architecture does not support far data model.

       _D_a_r_w_i_n _O_p_t_i_o_n_s

       These options are defined for all architectures running
       the Darwin operating system.

       FSF GCC on Darwin does not create "fat" object files; it
       will create an object file for the single architecture
       that it was built to target.  Apple's GCC on Darwin does
       create "fat" files if multiple --aarrcchh options are used; it
       does so by running the compiler or linker multiple times
       and joining the results together with _l_i_p_o.

       The subtype of the file created (like ppppcc77440000 or ppppcc997700 or
       ii668866) is determined by the flags that specify the ISA that
       GCC is targetting, like --mmccppuu or --mmaarrcchh.  The
       --ffoorrccee__ccppuussuubbttyyppee__AALLLL option can be used to override this.

       The Darwin tools vary in their behavior when presented
       with an ISA mismatch.  The assembler, _a_s, will only permit
       instructions to be used that are valid for the subtype of
       the file it is generating, so you cannot put 64-bit
       instructions in a ppppcc775500 object file.  The linker for
       shared libraries, _/_u_s_r_/_b_i_n_/_l_i_b_t_o_o_l, will fail and print an
       error if asked to create a shared library with a less
       restrictive subtype than its input files (for instance,
       trying to put a ppppcc997700 object file in a ppppcc77440000 library).
       The linker for executables, _l_d, will quietly give the
       executable the most restrictive subtype of any of its



gcc-4.74                    2014-06-12                        214





GCC(1)                         GNU                         GCC(1)


       input files.

       --FF_d_i_r
           Add the framework directory _d_i_r to the head of the
           list of directories to be searched for header files.
           These directories are interleaved with those specified
           by --II options and are scanned in a left-to-right
           order.

           A framework directory is a directory with frameworks
           in it.  A framework is a directory with a ""HHeeaaddeerrss""
           and/or ""PPrriivvaatteeHHeeaaddeerrss"" directory contained directly
           in it that ends in ""..ffrraammeewwoorrkk"".  The name of a
           framework is the name of this directory excluding the
           ""..ffrraammeewwoorrkk"".  Headers associated with the framework
           are found in one of those two directories, with
           ""HHeeaaddeerrss"" being searched first.  A subframework is a
           framework directory that is in a framework's
           ""FFrraammeewwoorrkkss"" directory.  Includes of subframework
           headers can only appear in a header of a framework
           that contains the subframework, or in a sibling
           subframework header.  Two subframeworks are siblings
           if they occur in the same framework.  A subframework
           should not have the same name as a framework, a
           warning will be issued if this is violated.  Currently
           a subframework cannot have subframeworks, in the
           future, the mechanism may be extended to support this.
           The standard frameworks can be found in
           ""//SSyysstteemm//LLiibbrraarryy//FFrraammeewwoorrkkss"" and
           ""//LLiibbrraarryy//FFrraammeewwoorrkkss"".  An example include looks like
           "#include <Framework/header.h>", where FFrraammeewwoorrkk
           denotes the name of the framework and header.h is
           found in the ""PPrriivvaatteeHHeeaaddeerrss"" or ""HHeeaaddeerrss"" directory.

       --iiffrraammeewwoorrkk_d_i_r
           Like --FF except the directory is a treated as a system
           directory.  The main difference between this
           --iiffrraammeewwoorrkk and --FF is that with --iiffrraammeewwoorrkk the
           compiler does not warn about constructs contained
           within header files found via _d_i_r.  This option is
           valid only for the C family of languages.

       --gguusseedd
           Emit debugging information for symbols that are used.
           For STABS debugging format, this enables
           --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss.  This is by default
           ON.

       --ggffuullll
           Emit debugging information for all symbols and types.

       --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n
           The earliest version of MacOS X that this executable
           will run on is _v_e_r_s_i_o_n.  Typical values of _v_e_r_s_i_o_n



gcc-4.74                    2014-06-12                        215





GCC(1)                         GNU                         GCC(1)


           include 10.1, 10.2, and 10.3.9.

           If the compiler was built to use the system's headers
           by default, then the default for this option is the
           system version on which the compiler is running,
           otherwise the default is to make choices that are
           compatible with as many systems and code bases as
           possible.

       --mmkkeerrnneell
           Enable kernel development mode.  The --mmkkeerrnneell option
           sets --ssttaattiicc, --ffnnoo--ccoommmmoonn, --ffnnoo--ccxxaa--aatteexxiitt,
           --ffnnoo--eexxcceeppttiioonnss, --ffnnoo--nnoonn--ccaallll--eexxcceeppttiioonnss,
           --ffaappppllee--kkeexxtt, --ffnnoo--wweeaakk and --ffnnoo--rrttttii where
           applicable.  This mode also sets --mmnnoo--aallttiivveecc,
           --mmssoofftt--ffllooaatt, --ffnnoo--bbuuiillttiinn and --mmlloonngg--bbrraanncchh for
           PowerPC targets.

       --mmoonnee--bbyyttee--bbooooll
           Override the defaults for bbooooll so that
           ssiizzeeooff((bbooooll))====11.  By default ssiizzeeooff((bbooooll)) is 44 when
           compiling for Darwin/PowerPC and 11 when compiling for
           Darwin/x86, so this option has no effect on x86.

           WWaarrnniinngg:: The --mmoonnee--bbyyttee--bbooooll switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Using this switch may
           require recompiling all other modules in a program,
           including system libraries.  Use this switch to
           conform to a non-default data model.

       --mmffiixx--aanndd--ccoonnttiinnuuee
       --ffffiixx--aanndd--ccoonnttiinnuuee
       --ffiinnddiirreecctt--ddaattaa
           Generate code suitable for fast turn around
           development.  Needed to enable gdb to dynamically load
           ".o" files into already running programs.
           --ffiinnddiirreecctt--ddaattaa and --ffffiixx--aanndd--ccoonnttiinnuuee are provided
           for backwards compatibility.

       --aallll__llooaadd
           Loads all members of static archive libraries.  See
           man _l_d(1) for more information.

       --aarrcchh__eerrrroorrss__ffaattaall
           Cause the errors having to do with files that have the
           wrong architecture to be fatal.

       --bbiinndd__aatt__llooaadd
           Causes the output file to be marked such that the
           dynamic linker will bind all undefined references when
           the file is loaded or launched.





gcc-4.74                    2014-06-12                        216





GCC(1)                         GNU                         GCC(1)


       --bbuunnddllee
           Produce a Mach-o bundle format file.  See man _l_d(1)
           for more information.

       --bbuunnddllee__llooaaddeerr _e_x_e_c_u_t_a_b_l_e
           This option specifies the _e_x_e_c_u_t_a_b_l_e that will be
           loading the build output file being linked.  See man
           _l_d(1) for more information.

       --ddyynnaammiicclliibb
           When passed this option, GCC will produce a dynamic
           library instead of an executable when linking, using
           the Darwin _l_i_b_t_o_o_l command.

       --ffoorrccee__ccppuussuubbttyyppee__AALLLL
           This causes GCC's output file to have the _A_L_L subtype,
           instead of one controlled by the --mmccppuu or --mmaarrcchh
           option.

       --aalllloowwaabbllee__cclliieenntt  _c_l_i_e_n_t___n_a_m_e
       --cclliieenntt__nnaammee
       --ccoommppaattiibbiilliittyy__vveerrssiioonn
       --ccuurrrreenntt__vveerrssiioonn
       --ddeeaadd__ssttrriipp
       --ddeeppeennddeennccyy--ffiillee
       --ddyylliibb__ffiillee
       --ddyylliinnkkeerr__iinnssttaallll__nnaammee
       --ddyynnaammiicc
       --eexxppoorrtteedd__ssyymmbboollss__lliisstt
       --ffiilleelliisstt
       --ffllaatt__nnaammeessppaaccee
       --ffoorrccee__ffllaatt__nnaammeessppaaccee
       --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
       --iimmaaggee__bbaassee
       --iinniitt
       --iinnssttaallll__nnaammee
       --kkeeeepp__pprriivvaattee__eexxtteerrnnss
       --mmuullttii__mmoodduullee
       --mmuullttiippllyy__ddeeffiinneedd
       --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd
       --nnooaallll__llooaadd
       --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss
       --nnooffiixxpprreebbiinnddiinngg
       --nnoommuullttiiddeeffss
       --nnoopprreebbiinndd
       --nnoosseegglliinnkkeeddiitt
       --ppaaggeezzeerroo__ssiizzee
       --pprreebbiinndd
       --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess
       --pprriivvaattee__bbuunnddllee
       --rreeaadd__oonnllyy__rreellooccss
       --sseeccttaalliiggnn
       --sseeccttoobbjjeeccttssyymmbboollss




gcc-4.74                    2014-06-12                        217





GCC(1)                         GNU                         GCC(1)


       --wwhhyyllooaadd
       --sseegg11aaddddrr
       --sseeccttccrreeaattee
       --sseeccttoobbjjeeccttssyymmbboollss
       --sseeccttoorrddeerr
       --sseeggaaddddrr
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --sseegg__aaddddrr__ttaabbllee
       --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee
       --sseegglliinnkkeeddiitt
       --sseeggpprroott
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --ssiinnggllee__mmoodduullee
       --ssttaattiicc
       --ssuubb__lliibbrraarryy
       --ssuubb__uummbbrreellllaa
       --ttwwoolleevveell__nnaammeessppaaccee
       --uummbbrreellllaa
       --uunnddeeffiinneedd
       --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
       --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess
       --wwhhaattssllooaaddeedd
           These options are passed to the Darwin linker.  The
           Darwin linker man page describes them in detail.

       _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s

       These --mm options are defined for the DEC Alpha
       implementations:

       --mmnnoo--ssoofftt--ffllooaatt
       --mmssoofftt--ffllooaatt
           Use (do not use) the hardware floating-point
           instructions for floating-point operations.  When
           --mmssoofftt--ffllooaatt is specified, functions in _l_i_b_g_c_c_._a will
           be used to perform floating-point operations.  Unless
           they are replaced by routines that emulate the
           floating-point operations, or compiled in such a way
           as to call such emulations routines, these routines
           will issue floating-point operations.   If you are
           compiling for an Alpha without floating-point
           operations, you must ensure that the library is built
           so as not to call them.

           Note that Alpha implementations without floating-point
           operations are required to have floating-point
           registers.

       --mmffpp--rreegg
       --mmnnoo--ffpp--rreeggss
           Generate code that uses (does not use) the floating-
           point register set.  --mmnnoo--ffpp--rreeggss implies



gcc-4.74                    2014-06-12                        218





GCC(1)                         GNU                         GCC(1)


           --mmssoofftt--ffllooaatt.  If the floating-point register set is
           not used, floating-point operands are passed in
           integer registers as if they were integers and
           floating-point results are passed in $0 instead of
           $f0.  This is a non-standard calling sequence, so any
           function with a floating-point argument or return
           value called by code compiled with --mmnnoo--ffpp--rreeggss must
           also be compiled with that option.

           A typical use of this option is building a kernel that
           does not use, and hence need not save and restore, any
           floating-point registers.

       --mmiieeeeee
           The Alpha architecture implements floating-point
           hardware optimized for maximum performance.  It is
           mostly compliant with the IEEE floating-point
           standard.  However, for full compliance, software
           assistance is required.  This option generates code
           fully IEEE-compliant code _e_x_c_e_p_t that the _i_n_e_x_a_c_t_-_f_l_a_g
           is not maintained (see below).  If this option is
           turned on, the preprocessor macro "_IEEE_FP" is
           defined during compilation.  The resulting code is
           less efficient but is able to correctly support
           denormalized numbers and exceptional IEEE values such
           as not-a-number and plus/minus infinity.  Other Alpha
           compilers call this option --iieeeeee__wwiitthh__nnoo__iinneexxaacctt.

       --mmiieeeeee--wwiitthh--iinneexxaacctt
           This is like --mmiieeeeee except the generated code also
           maintains the IEEE _i_n_e_x_a_c_t_-_f_l_a_g.  Turning on this
           option causes the generated code to implement fully-
           compliant IEEE math.  In addition to "_IEEE_FP",
           "_IEEE_FP_EXACT" is defined as a preprocessor macro.
           On some Alpha implementations the resulting code may
           execute significantly slower than the code generated
           by default.  Since there is very little code that
           depends on the _i_n_e_x_a_c_t_-_f_l_a_g, you should normally not
           specify this option.  Other Alpha compilers call this
           option --iieeeeee__wwiitthh__iinneexxaacctt.

       --mmffpp--ttrraapp--mmooddee==_t_r_a_p_-_m_o_d_e
           This option controls what floating-point related traps
           are enabled.  Other Alpha compilers call this option
           --ffppttmm _t_r_a_p_-_m_o_d_e.  The trap mode can be set to one of
           four values:

           nn   This is the default (normal) setting.  The only
               traps that are enabled are the ones that cannot be
               disabled in software (e.g., division by zero
               trap).

           uu   In addition to the traps enabled by nn, underflow
               traps are enabled as well.



gcc-4.74                    2014-06-12                        219





GCC(1)                         GNU                         GCC(1)


           ssuu  Like uu, but the instructions are marked to be safe
               for software completion (see Alpha architecture
               manual for details).

           ssuuii Like ssuu, but inexact traps are enabled as well.

       --mmffpp--rroouunnddiinngg--mmooddee==_r_o_u_n_d_i_n_g_-_m_o_d_e
           Selects the IEEE rounding mode.  Other Alpha compilers
           call this option --ffpprrmm _r_o_u_n_d_i_n_g_-_m_o_d_e.  The _r_o_u_n_d_i_n_g_-
           _m_o_d_e can be one of:

           nn   Normal IEEE rounding mode.  Floating-point numbers
               are rounded towards the nearest machine number or
               towards the even machine number in case of a tie.

           mm   Round towards minus infinity.

           cc   Chopped rounding mode.  Floating-point numbers are
               rounded towards zero.

           dd   Dynamic rounding mode.  A field in the floating-
               point control register (_f_p_c_r, see Alpha
               architecture reference manual) controls the
               rounding mode in effect.  The C library
               initializes this register for rounding towards
               plus infinity.  Thus, unless your program modifies
               the _f_p_c_r, dd corresponds to round towards plus
               infinity.

       --mmttrraapp--pprreecciissiioonn==_t_r_a_p_-_p_r_e_c_i_s_i_o_n
           In the Alpha architecture, floating-point traps are
           imprecise.  This means without software assistance it
           is impossible to recover from a floating trap and
           program execution normally needs to be terminated.
           GCC can generate code that can assist operating system
           trap handlers in determining the exact location that
           caused a floating-point trap.  Depending on the
           requirements of an application, different levels of
           precisions can be selected:

           pp   Program precision.  This option is the default and
               means a trap handler can only identify which
               program caused a floating-point exception.

           ff   Function precision.  The trap handler can
               determine the function that caused a floating-
               point exception.

           ii   Instruction precision.  The trap handler can
               determine the exact instruction that caused a
               floating-point exception.

           Other Alpha compilers provide the equivalent options
           called --ssccooppee__ssaaffee and --rreessuummppttiioonn__ssaaffee.



gcc-4.74                    2014-06-12                        220





GCC(1)                         GNU                         GCC(1)


       --mmiieeeeee--ccoonnffoorrmmaanntt
           This option marks the generated code as IEEE
           conformant.  You must not use this option unless you
           also specify --mmttrraapp--pprreecciissiioonn==ii and either
           --mmffpp--ttrraapp--mmooddee==ssuu or --mmffpp--ttrraapp--mmooddee==ssuuii.  Its only
           effect is to emit the line ..eeffllaagg 4488 in the function
           prologue of the generated assembly file.  Under DEC
           Unix, this has the effect that IEEE-conformant math
           library routines will be linked in.

       --mmbbuuiilldd--ccoonnssttaannttss
           Normally GCC examines a 32- or 64-bit integer constant
           to see if it can construct it from smaller constants
           in two or three instructions.  If it cannot, it will
           output the constant as a literal and generate code to
           load it from the data segment at run time.

           Use this option to require GCC to construct _a_l_l
           integer constants using code, even if it takes more
           instructions (the maximum is six).

           You would typically use this option to build a shared
           library dynamic loader.  Itself a shared library, it
           must relocate itself in memory before it can find the
           variables and constants in its own data segment.

       --mmaallpphhaa--aass
       --mmggaass
           Select whether to generate code to be assembled by the
           vendor-supplied assembler (--mmaallpphhaa--aass) or by the GNU
           assembler --mmggaass.

       --mmbbwwxx
       --mmnnoo--bbwwxx
       --mmcciixx
       --mmnnoo--cciixx
       --mmffiixx
       --mmnnoo--ffiixx
       --mmmmaaxx
       --mmnnoo--mmaaxx
           Indicate whether GCC should generate code to use the
           optional BWX, CIX, FIX and MAX instruction sets.  The
           default is to use the instruction sets supported by
           the CPU type specified via --mmccppuu== option or that of
           the CPU on which GCC was built if none was specified.

       --mmffllooaatt--vvaaxx
       --mmffllooaatt--iieeeeee
           Generate code that uses (does not use) VAX F and G
           floating-point arithmetic instead of IEEE single and
           double precision.

       --mmeexxpplliicciitt--rreellooccss




gcc-4.74                    2014-06-12                        221





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--eexxpplliicciitt--rreellooccss
           Older Alpha assemblers provided no way to generate
           symbol relocations except via assembler macros.  Use
           of these macros does not allow optimal instruction
           scheduling.  GNU binutils as of version 2.12 supports
           a new syntax that allows the compiler to explicitly
           mark which relocations should apply to which
           instructions.  This option is mostly useful for
           debugging, as GCC detects the capabilities of the
           assembler when it is built and sets the default
           accordingly.

       --mmssmmaallll--ddaattaa
       --mmllaarrggee--ddaattaa
           When --mmeexxpplliicciitt--rreellooccss is in effect, static data is
           accessed via _g_p_-_r_e_l_a_t_i_v_e relocations.  When
           --mmssmmaallll--ddaattaa is used, objects 8 bytes long or smaller
           are placed in a _s_m_a_l_l _d_a_t_a _a_r_e_a (the ".sdata" and
           ".sbss" sections) and are accessed via 16-bit
           relocations off of the $gp register.  This limits the
           size of the small data area to 64KB, but allows the
           variables to be directly accessed via a single
           instruction.

           The default is --mmllaarrggee--ddaattaa.  With this option the
           data area is limited to just below 2GB.  Programs that
           require more than 2GB of data must use "malloc" or
           "mmap" to allocate the data in the heap instead of in
           the program's data segment.

           When generating code for shared libraries, --ffppiicc
           implies --mmssmmaallll--ddaattaa and --ffPPIICC implies --mmllaarrggee--ddaattaa.

       --mmssmmaallll--tteexxtt
       --mmllaarrggee--tteexxtt
           When --mmssmmaallll--tteexxtt is used, the compiler assumes that
           the code of the entire program (or shared library)
           fits in 4MB, and is thus reachable with a branch
           instruction.  When --mmssmmaallll--ddaattaa is used, the compiler
           can assume that all local symbols share the same $gp
           value, and thus reduce the number of instructions
           required for a function call from 4 to 1.

           The default is --mmllaarrggee--tteexxtt.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set and instruction scheduling
           parameters for machine type _c_p_u___t_y_p_e.  You can specify
           either the EEVV style name or the corresponding chip
           number.  GCC supports scheduling parameters for the
           EV4, EV5 and EV6 family of processors and will choose
           the default values for the instruction set from the
           processor you specify.  If you do not specify a
           processor type, GCC will default to the processor on



gcc-4.74                    2014-06-12                        222





GCC(1)                         GNU                         GCC(1)


           which the compiler was built.

           Supported values for _c_p_u___t_y_p_e are

           eevv44
           eevv4455
           2211006644
               Schedules as an EV4 and has no instruction set
               extensions.

           eevv55
           2211116644
               Schedules as an EV5 and has no instruction set
               extensions.

           eevv5566
           2211116644aa
               Schedules as an EV5 and supports the BWX
               extension.

           ppccaa5566
           2211116644ppcc
           2211116644PPCC
               Schedules as an EV5 and supports the BWX and MAX
               extensions.

           eevv66
           2211226644
               Schedules as an EV6 and supports the BWX, FIX, and
               MAX extensions.

           eevv6677
           2211226644aa
               Schedules as an EV6 and supports the BWX, CIX,
               FIX, and MAX extensions.

           Native toolchains also support the value nnaattiivvee, which
           selects the best architecture option for the host
           processor.  --mmccppuu==nnaattiivvee has no effect if GCC does not
           recognize the processor.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set only the instruction scheduling parameters for
           machine type _c_p_u___t_y_p_e.  The instruction set is not
           changed.

           Native toolchains also support the value nnaattiivvee, which
           selects the best architecture option for the host
           processor.  --mmttuunnee==nnaattiivvee has no effect if GCC does
           not recognize the processor.

       --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e
           Sets the latency the scheduler should assume for
           typical memory references as seen by the application.



gcc-4.74                    2014-06-12                        223





GCC(1)                         GNU                         GCC(1)


           This number is highly dependent on the memory access
           patterns used by the application and the size of the
           external cache on the machine.

           Valid options for _t_i_m_e are

           _n_u_m_b_e_r
               A decimal number representing clock cycles.

           LL11
           LL22
           LL33
           mmaaiinn
               The compiler contains estimates of the number of
               clock cycles for "typical" EV4 & EV5 hardware for
               the Level 1, 2 & 3 caches (also called Dcache,
               Scache, and Bcache), as well as to main memory.
               Note that L3 is only valid for EV5.

       _D_E_C _A_l_p_h_a_/_V_M_S _O_p_t_i_o_n_s

       These --mm options are defined for the DEC Alpha/VMS
       implementations:

       --mmvvmmss--rreettuurrnn--ccooddeess
           Return VMS condition codes from main.  The default is
           to return POSIX style condition (e.g. error) codes.

       --mmddeebbuugg--mmaaiinn==_p_r_e_f_i_x
           Flag the first routine whose name starts with _p_r_e_f_i_x
           as the main routine for the debugger.

       --mmmmaalllloocc6644
           Default to 64-bit memory allocation routines.

       _F_R_3_0 _O_p_t_i_o_n_s

       These options are defined specifically for the FR30 port.

       --mmssmmaallll--mmooddeell
           Use the small address space model.  This can produce
           smaller code, but it does assume that all symbolic
           values and addresses will fit into a 20-bit range.

       --mmnnoo--llssiimm
           Assume that runtime support has been provided and so
           there is no need to include the simulator library
           (_l_i_b_s_i_m_._a) on the linker command line.

       _F_R_V _O_p_t_i_o_n_s

       --mmggpprr--3322
           Only use the first 32 general-purpose registers.




gcc-4.74                    2014-06-12                        224





GCC(1)                         GNU                         GCC(1)


       --mmggpprr--6644
           Use all 64 general-purpose registers.

       --mmffpprr--3322
           Use only the first 32 floating-point registers.

       --mmffpprr--6644
           Use all 64 floating-point registers.

       --mmhhaarrdd--ffllooaatt
           Use hardware instructions for floating-point
           operations.

       --mmssoofftt--ffllooaatt
           Use library routines for floating-point operations.

       --mmaalllloocc--cccc
           Dynamically allocate condition code registers.

       --mmffiixxeedd--cccc
           Do not try to dynamically allocate condition code
           registers, only use "icc0" and "fcc0".

       --mmddwwoorrdd
           Change ABI to use double word insns.

       --mmnnoo--ddwwoorrdd
           Do not use double word instructions.

       --mmddoouubbllee
           Use floating-point double instructions.

       --mmnnoo--ddoouubbllee
           Do not use floating-point double instructions.

       --mmmmeeddiiaa
           Use media instructions.

       --mmnnoo--mmeeddiiaa
           Do not use media instructions.

       --mmmmuullaadddd
           Use multiply and add/subtract instructions.

       --mmnnoo--mmuullaadddd
           Do not use multiply and add/subtract instructions.

       --mmffddppiicc
           Select the FDPIC ABI, which uses function descriptors
           to represent pointers to functions.  Without any
           PIC/PIE-related options, it implies --ffPPIIEE.  With --ffppiicc
           or --ffppiiee, it assumes GOT entries and small data are
           within a 12-bit range from the GOT base address; with
           --ffPPIICC or --ffPPIIEE, GOT offsets are computed with 32 bits.



gcc-4.74                    2014-06-12                        225





GCC(1)                         GNU                         GCC(1)


           With a bbffiinn--eellff target, this option implies --mmssiimm.

       --mmiinnlliinnee--pplltt
           Enable inlining of PLT entries in function calls to
           functions that are not known to bind locally.  It has
           no effect without --mmffddppiicc.  It's enabled by default if
           optimizing for speed and compiling for shared
           libraries (i.e., --ffPPIICC or --ffppiicc), or when an
           optimization option such as --OO33 or above is present in
           the command line.

       --mmTTLLSS
           Assume a large TLS segment when generating thread-
           local code.

       --mmttllss
           Do not assume a large TLS segment when generating
           thread-local code.

       --mmggpprreell--rroo
           Enable the use of "GPREL" relocations in the FDPIC ABI
           for data that is known to be in read-only sections.
           It's enabled by default, except for --ffppiicc or --ffppiiee:
           even though it may help make the global offset table
           smaller, it trades 1 instruction for 4.  With --ffPPIICC or
           --ffPPIIEE, it trades 3 instructions for 4, one of which
           may be shared by multiple symbols, and it avoids the
           need for a GOT entry for the referenced symbol, so
           it's more likely to be a win.  If it is not,
           --mmnnoo--ggpprreell--rroo can be used to disable it.

       --mmuullttiilliibb--lliibbrraarryy--ppiicc
           Link with the (library, not FD) pic libraries.  It's
           implied by --mmlliibbrraarryy--ppiicc, as well as by --ffPPIICC and
           --ffppiicc without --mmffddppiicc.  You should never have to use
           it explicitly.

       --mmlliinnkkeedd--ffpp
           Follow the EABI requirement of always creating a frame
           pointer whenever a stack frame is allocated.  This
           option is enabled by default and can be disabled with
           --mmnnoo--lliinnkkeedd--ffpp.

       --mmlloonngg--ccaallllss
           Use indirect addressing to call functions outside the
           current compilation unit.  This allows the functions
           to be placed anywhere within the 32-bit address space.

       --mmaalliiggnn--llaabbeellss
           Try to align labels to an 8-byte boundary by inserting
           nops into the previous packet.  This option only has
           an effect when VLIW packing is enabled.  It doesn't
           create new packets; it merely adds nops to existing
           ones.



gcc-4.74                    2014-06-12                        226





GCC(1)                         GNU                         GCC(1)


       --mmlliibbrraarryy--ppiicc
           Generate position-independent EABI code.

       --mmaacccc--44
           Use only the first four media accumulator registers.

       --mmaacccc--88
           Use all eight media accumulator registers.

       --mmppaacckk
           Pack VLIW instructions.

       --mmnnoo--ppaacckk
           Do not pack VLIW instructions.

       --mmnnoo--eeffllaaggss
           Do not mark ABI switches in e_flags.

       --mmccoonndd--mmoovvee
           Enable the use of conditional-move instructions
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--ccoonndd--mmoovvee
           Disable the use of conditional-move instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmsscccc
           Enable the use of conditional set instructions
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--sscccc
           Disable the use of conditional set instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmccoonndd--eexxeecc
           Enable the use of conditional execution (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--ccoonndd--eexxeecc
           Disable the use of conditional execution.

           This switch is mainly for debugging the compiler and



gcc-4.74                    2014-06-12                        227





GCC(1)                         GNU                         GCC(1)


           will likely be removed in a future version.

       --mmvvlliiww--bbrraanncchh
           Run a pass to pack branches into VLIW instructions
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--vvlliiww--bbrraanncchh
           Do not run a pass to pack branches into VLIW
           instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmmmuullttii--ccoonndd--eexxeecc
           Enable optimization of "&&" and "||" in conditional
           execution (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--mmuullttii--ccoonndd--eexxeecc
           Disable optimization of "&&" and "||" in conditional
           execution.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnneesstteedd--ccoonndd--eexxeecc
           Enable nested conditional execution optimizations
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--nneesstteedd--ccoonndd--eexxeecc
           Disable nested conditional execution optimizations.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmooppttiimmiizzee--mmeemmbbaarr
           This switch removes redundant "membar" instructions
           from the compiler generated code.  It is enabled by
           default.

       --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr
           This switch disables the automatic removal of
           redundant "membar" instructions from the generated
           code.





gcc-4.74                    2014-06-12                        228





GCC(1)                         GNU                         GCC(1)


       --mmttoommccaatt--ssttaattss
           Cause gas to print out tomcat statistics.

       --mmccppuu==_c_p_u
           Select the processor type for which to generate code.
           Possible values are ffrrvv, ffrr555500, ttoommccaatt, ffrr550000, ffrr445500,
           ffrr440055, ffrr440000, ffrr330000 and ssiimmppllee.

       _G_N_U_/_L_i_n_u_x _O_p_t_i_o_n_s

       These --mm options are defined for GNU/Linux targets:

       --mmgglliibbcc
           Use the GNU C library.  This is the default except on
           **--**--lliinnuuxx--**uucclliibbcc** and **--**--lliinnuuxx--**aannddrrooiidd** targets.

       --mmuucclliibbcc
           Use uClibc C library.  This is the default on
           **--**--lliinnuuxx--**uucclliibbcc** targets.

       --mmbbiioonniicc
           Use Bionic C library.  This is the default on
           **--**--lliinnuuxx--**aannddrrooiidd** targets.

       --mmaannddrrooiidd
           Compile code compatible with Android platform.  This
           is the default on **--**--lliinnuuxx--**aannddrrooiidd** targets.

           When compiling, this option enables --mmbbiioonniicc, --ffPPIICC,
           --ffnnoo--eexxcceeppttiioonnss and --ffnnoo--rrttttii by default.  When
           linking, this option makes the GCC driver pass
           Android-specific options to the linker.  Finally, this
           option causes the preprocessor macro "__ANDROID__" to
           be defined.

       --ttnnoo--aannddrrooiidd--cccc
           Disable compilation effects of --mmaannddrrooiidd, i.e., do not
           enable --mmbbiioonniicc, --ffPPIICC, --ffnnoo--eexxcceeppttiioonnss and --ffnnoo--rrttttii
           by default.

       --ttnnoo--aannddrrooiidd--lldd
           Disable linking effects of --mmaannddrrooiidd, i.e., pass
           standard Linux linking options to the linker.

       _H_8_/_3_0_0 _O_p_t_i_o_n_s

       These --mm options are defined for the H8/300
       implementations:

       --mmrreellaaxx
           Shorten some address references at link time, when
           possible; uses the linker option --rreellaaxx.

       --mmhh Generate code for the H8/300H.



gcc-4.74                    2014-06-12                        229





GCC(1)                         GNU                         GCC(1)


       --mmss Generate code for the H8S.

       --mmnn Generate code for the H8S and H8/300H in the normal
           mode.  This switch must be used either with --mmhh or
           --mmss.

       --mmss22660000
           Generate code for the H8S/2600.  This switch must be
           used with --mmss.

       --mmiinntt3322
           Make "int" data 32 bits by default.

       --mmaalliiggnn--330000
           On the H8/300H and H8S, use the same alignment rules
           as for the H8/300.  The default for the H8/300H and
           H8S is to align longs and floats on 4-byte boundaries.
           --mmaalliiggnn--330000 causes them to be aligned on 2-byte
           boundaries.  This option has no effect on the H8/300.

       _H_P_P_A _O_p_t_i_o_n_s

       These --mm options are defined for the HPPA family of
       computers:

       --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The
           choices for _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are 11..00 for PA 1.0, 11..11
           for PA 1.1, and 22..00 for PA 2.0 processors.  Refer to
           _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX system to determine
           the proper architecture option for your machine.  Code
           compiled for lower numbered architectures will run on
           higher numbered architectures, but not the other way
           around.

       --mmppaa--rriisscc--11--00
       --mmppaa--rriisscc--11--11
       --mmppaa--rriisscc--22--00
           Synonyms for --mmaarrcchh==11..00, --mmaarrcchh==11..11, and --mmaarrcchh==22..00
           respectively.

       --mmbbiigg--sswwiittcchh
           Generate code suitable for big switch tables.  Use
           this option only if the assembler/linker complain
           about out of range branches within a switch table.

       --mmjjuummpp--iinn--ddeellaayy
           Fill delay slots of function calls with unconditional
           jump instructions by modifying the return pointer for
           the function call to be the target of the conditional
           jump.

       --mmddiissaabbllee--ffpprreeggss
           Prevent floating-point registers from being used in



gcc-4.74                    2014-06-12                        230





GCC(1)                         GNU                         GCC(1)


           any manner.  This is necessary for compiling kernels
           that perform lazy context switching of floating-point
           registers.  If you use this option and attempt to
           perform floating-point operations, the compiler
           aborts.

       --mmddiissaabbllee--iinnddeexxiinngg
           Prevent the compiler from using indexing address
           modes.  This avoids some rather obscure problems when
           compiling MIG generated code under MACH.

       --mmnnoo--ssppaaccee--rreeggss
           Generate code that assumes the target has no space
           registers.  This allows GCC to generate faster
           indirect calls and use unscaled index address modes.

           Such code is suitable for level 0 PA systems and
           kernels.

       --mmffaasstt--iinnddiirreecctt--ccaallllss
           Generate code that assumes calls never cross space
           boundaries.  This allows GCC to emit code that
           performs faster indirect calls.

           This option will not work in the presence of shared
           libraries or nested functions.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as
           fixed registers.  A fixed register is one that the
           register allocator can not use.  This is useful when
           compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple
           register ranges can be specified separated by a comma.

       --mmlloonngg--llooaadd--ssttoorree
           Generate 3-instruction load and store sequences as
           sometimes required by the HP-UX 10 linker.  This is
           equivalent to the ++kk option to the HP compilers.

       --mmppoorrttaabbllee--rruunnttiimmee
           Use the portable calling conventions proposed by HP
           for ELF systems.

       --mmggaass
           Enable the use of assembler directives only GAS
           understands.

       --mmsscchheedduullee==_c_p_u_-_t_y_p_e
           Schedule code according to the constraints for the
           machine type _c_p_u_-_t_y_p_e.  The choices for _c_p_u_-_t_y_p_e are
           770000 77110000, 77110000LLCC, 77220000, 77330000 and 88000000.  Refer to
           _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX system to determine
           the proper scheduling option for your machine.  The



gcc-4.74                    2014-06-12                        231





GCC(1)                         GNU                         GCC(1)


           default scheduling is 88000000.

       --mmlliinnkkeerr--oopptt
           Enable the optimization pass in the HP-UX linker.
           Note this makes symbolic debugging impossible.  It
           also triggers a bug in the HP-UX 8 and HP-UX 9 linkers
           in which they give bogus error messages when linking
           some programs.

       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating
           point.  WWaarrnniinngg:: the requisite libraries are not
           available for all HPPA targets.  Normally the
           facilities of the machine's usual C compiler are used,
           but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.

           --mmssoofftt--ffllooaatt changes the calling convention in the
           output file; therefore, it is only useful if you
           compile _a_l_l of a program with this option.  In
           particular, you need to compile _l_i_b_g_c_c_._a, the library
           that comes with GCC, with --mmssoofftt--ffllooaatt in order for
           this to work.

       --mmssiioo
           Generate the predefine, "_SIO", for server IO.  The
           default is --mmwwssiioo.  This generates the predefines,
           "__hp9000s700", "__hp9000s700__" and "_WSIO", for
           workstation IO.  These options are available under HP-
           UX and HI-UX.

       --mmggnnuu--lldd
           Use GNU ld specific options.  This passes --sshhaarreedd to
           ld when building a shared library.  It is the default
           when GCC is configured, explicitly or implicitly, with
           the GNU linker.  This option does not have any affect
           on which ld is called, it only changes what parameters
           are passed to that ld.  The ld that is called is
           determined by the ----wwiitthh--lldd configure option, GCC's
           program search path, and finally by the user's PPAATTHH.
           The linker used by GCC can be printed using wwhhiicchh ``ggcccc
           --pprriinntt--pprroogg--nnaammee==lldd``.  This option is only available
           on the 64-bit HP-UX GCC, i.e. configured with
           hhppppaa**6644**--**--hhppuuxx**.

       --mmhhpp--lldd
           Use HP ld specific options.  This passes --bb to ld when
           building a shared library and passes ++AAcccceepptt
           TTyyppeeMMiissmmaattcchh to ld on all links.  It is the default
           when GCC is configured, explicitly or implicitly, with
           the HP linker.  This option does not have any affect
           on which ld is called, it only changes what parameters
           are passed to that ld.  The ld that is called is



gcc-4.74                    2014-06-12                        232





GCC(1)                         GNU                         GCC(1)


           determined by the ----wwiitthh--lldd configure option, GCC's
           program search path, and finally by the user's PPAATTHH.
           The linker used by GCC can be printed using wwhhiicchh ``ggcccc
           --pprriinntt--pprroogg--nnaammee==lldd``.  This option is only available
           on the 64-bit HP-UX GCC, i.e. configured with
           hhppppaa**6644**--**--hhppuuxx**.

       --mmlloonngg--ccaallllss
           Generate code that uses long call sequences.  This
           ensures that a call is always able to reach linker
           generated stubs.  The default is to generate long
           calls only when the distance from the call site to the
           beginning of the function or translation unit, as the
           case may be, exceeds a predefined limit set by the
           branch type being used.  The limits for normal calls
           are 7,600,000 and 240,000 bytes, respectively for the
           PA 2.0 and PA 1.X architectures.  Sibcalls are always
           limited at 240,000 bytes.

           Distances are measured from the beginning of functions
           when using the --ffffuunnccttiioonn--sseeccttiioonnss option, or when
           using the --mmggaass and --mmnnoo--ppoorrttaabbllee--rruunnttiimmee options
           together under HP-UX with the SOM linker.

           It is normally not desirable to use this option as it
           will degrade performance.  However, it may be useful
           in large applications, particularly when partial
           linking is used to build the application.

           The types of long calls used depends on the
           capabilities of the assembler and linker, and the type
           of code being generated.  The impact on systems that
           support long absolute calls, and long pic symbol-
           difference or pc-relative calls should be relatively
           small.  However, an indirect call is used on 32-bit
           ELF systems in pic code and it is quite long.

       --mmuunniixx==_u_n_i_x_-_s_t_d
           Generate compiler predefines and select a startfile
           for the specified UNIX standard.  The choices for
           _u_n_i_x_-_s_t_d are 9933, 9955 and 9988.  9933 is supported on all
           HP-UX versions.  9955 is available on HP-UX 10.10 and
           later.  9988 is available on HP-UX 11.11 and later.  The
           default values are 9933 for HP-UX 10.00, 9955 for HP-UX
           10.10 though to 11.00, and 9988 for HP-UX 11.11 and
           later.

           --mmuunniixx==9933 provides the same predefines as GCC 3.3 and
           3.4.  --mmuunniixx==9955 provides additional predefines for
           "XOPEN_UNIX" and "_XOPEN_SOURCE_EXTENDED", and the
           startfile _u_n_i_x_9_5_._o.  --mmuunniixx==9988 provides additional
           predefines for "_XOPEN_UNIX",
           "_XOPEN_SOURCE_EXTENDED", "_INCLUDE__STDC_A1_SOURCE"
           and "_INCLUDE_XOPEN_SOURCE_500", and the startfile



gcc-4.74                    2014-06-12                        233





GCC(1)                         GNU                         GCC(1)


           _u_n_i_x_9_8_._o.

           It is _i_m_p_o_r_t_a_n_t to note that this option changes the
           interfaces for various library routines.  It also
           affects the operational behavior of the C library.
           Thus, _e_x_t_r_e_m_e care is needed in using this option.

           Library code that is intended to operate with more
           than one UNIX standard must test, set and restore the
           variable _____x_p_g_4___e_x_t_e_n_d_e_d___m_a_s_k as appropriate.  Most
           GNU software doesn't provide this capability.

       --nnoolliibbddlldd
           Suppress the generation of link options to search
           libdld.sl when the --ssttaattiicc option is specified on HP-
           UX 10 and later.

       --ssttaattiicc
           The HP-UX implementation of setlocale in libc has a
           dependency on libdld.sl.  There isn't an archive
           version of libdld.sl.  Thus, when the --ssttaattiicc option
           is specified, special link options are needed to
           resolve this dependency.

           On HP-UX 10 and later, the GCC driver adds the
           necessary options to link with libdld.sl when the
           --ssttaattiicc option is specified.  This causes the
           resulting binary to be dynamic.  On the 64-bit port,
           the linkers generate dynamic binaries by default in
           any case.  The --nnoolliibbddlldd option can be used to prevent
           the GCC driver from adding these link options.

       --tthhrreeaaddss
           Add support for multithreading with the _d_c_e _t_h_r_e_a_d
           library under HP-UX.  This option sets flags for both
           the preprocessor and linker.

       _I_n_t_e_l _3_8_6 _a_n_d _A_M_D _x_8_6_-_6_4 _O_p_t_i_o_n_s

       These --mm options are defined for the i386 and x86-64
       family of computers:

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the
           generated code, except for the ABI and the set of
           available instructions.  The choices for _c_p_u_-_t_y_p_e are:

           _g_e_n_e_r_i_c
               Produce code optimized for the most common
               IA32/AMD64/EM64T processors.  If you know the CPU
               on which your code will run, then you should use
               the corresponding --mmttuunnee option instead of
               --mmttuunnee==ggeenneerriicc.  But, if you do not know exactly
               what CPU users of your application will have, then



gcc-4.74                    2014-06-12                        234





GCC(1)                         GNU                         GCC(1)


               you should use this option.

               As new processors are deployed in the marketplace,
               the behavior of this option will change.
               Therefore, if you upgrade to a newer version of
               GCC, the code generated option will change to
               reflect the processors that were most common when
               that version of GCC was released.

               There is no --mmaarrcchh==ggeenneerriicc option because --mmaarrcchh
               indicates the instruction set the compiler can
               use, and there is no generic instruction set
               applicable to all processors.  In contrast, --mmttuunnee
               indicates the processor (or, in this case,
               collection of processors) for which the code is
               optimized.

           _n_a_t_i_v_e
               This selects the CPU to tune for at compilation
               time by determining the processor type of the
               compiling machine.  Using --mmttuunnee==nnaattiivvee will
               produce code optimized for the local machine under
               the constraints of the selected instruction set.
               Using --mmaarrcchh==nnaattiivvee will enable all instruction
               subsets supported by the local machine (hence the
               result might not run on different machines).

           _i_3_8_6
               Original Intel's i386 CPU.

           _i_4_8_6
               Intel's i486 CPU.  (No scheduling is implemented
               for this chip.)

           _i_5_8_6_, _p_e_n_t_i_u_m
               Intel Pentium CPU with no MMX support.

           _p_e_n_t_i_u_m_-_m_m_x
               Intel PentiumMMX CPU based on Pentium core with
               MMX instruction set support.

           _p_e_n_t_i_u_m_p_r_o
               Intel PentiumPro CPU.

           _i_6_8_6
               Same as "generic", but when used as "march"
               option, PentiumPro instruction set will be used,
               so the code will run on all i686 family chips.

           _p_e_n_t_i_u_m_2
               Intel Pentium2 CPU based on PentiumPro core with
               MMX instruction set support.





gcc-4.74                    2014-06-12                        235





GCC(1)                         GNU                         GCC(1)


           _p_e_n_t_i_u_m_3_, _p_e_n_t_i_u_m_3_m
               Intel Pentium3 CPU based on PentiumPro core with
               MMX and SSE instruction set support.

           _p_e_n_t_i_u_m_-_m
               Low power version of Intel Pentium3 CPU with MMX,
               SSE and SSE2 instruction set support.  Used by
               Centrino notebooks.

           _p_e_n_t_i_u_m_4_, _p_e_n_t_i_u_m_4_m
               Intel Pentium4 CPU with MMX, SSE and SSE2
               instruction set support.

           _p_r_e_s_c_o_t_t
               Improved version of Intel Pentium4 CPU with MMX,
               SSE, SSE2 and SSE3 instruction set support.

           _n_o_c_o_n_a
               Improved version of Intel Pentium4 CPU with 64-bit
               extensions, MMX, SSE, SSE2 and SSE3 instruction
               set support.

           _c_o_r_e_2
               Intel Core2 CPU with 64-bit extensions, MMX, SSE,
               SSE2, SSE3 and SSSE3 instruction set support.

           _c_o_r_e_i_7
               Intel Core i7 CPU with 64-bit extensions, MMX,
               SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2
               instruction set support.

           _c_o_r_e_i_7_-_a_v_x
               Intel Core i7 CPU with 64-bit extensions, MMX,
               SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AES
               and PCLMUL instruction set support.

           _c_o_r_e_-_a_v_x_-_i
               Intel Core CPU with 64-bit extensions, MMX, SSE,
               SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AES,
               PCLMUL, FSGSBASE, RDRND and F16C instruction set
               support.

           _a_t_o_m
               Intel Atom CPU with 64-bit extensions, MMX, SSE,
               SSE2, SSE3 and SSSE3 instruction set support.

           _k_6  AMD K6 CPU with MMX instruction set support.

           _k_6_-_2_, _k_6_-_3
               Improved versions of AMD K6 CPU with MMX and
               3DNow! instruction set support.

           _a_t_h_l_o_n_, _a_t_h_l_o_n_-_t_b_i_r_d
               AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow!



gcc-4.74                    2014-06-12                        236





GCC(1)                         GNU                         GCC(1)


               and SSE prefetch instructions support.

           _a_t_h_l_o_n_-_4_, _a_t_h_l_o_n_-_x_p_, _a_t_h_l_o_n_-_m_p
               Improved AMD Athlon CPU with MMX, 3DNow!, enhanced
               3DNow! and full SSE instruction set support.

           _k_8_, _o_p_t_e_r_o_n_, _a_t_h_l_o_n_6_4_, _a_t_h_l_o_n_-_f_x
               AMD K8 core based CPUs with x86-64 instruction set
               support.  (This supersets MMX, SSE, SSE2, 3DNow!,
               enhanced 3DNow! and 64-bit instruction set
               extensions.)

           _k_8_-_s_s_e_3_, _o_p_t_e_r_o_n_-_s_s_e_3_, _a_t_h_l_o_n_6_4_-_s_s_e_3
               Improved versions of k8, opteron and athlon64 with
               SSE3 instruction set support.

           _a_m_d_f_a_m_1_0_, _b_a_r_c_e_l_o_n_a
               AMD Family 10h core based CPUs with x86-64
               instruction set support.  (This supersets MMX,
               SSE, SSE2, SSE3, SSE4A, 3DNow!, enhanced 3DNow!,
               ABM and 64-bit instruction set extensions.)

           _b_d_v_e_r_1
               AMD Family 15h core based CPUs with x86-64
               instruction set support.  (This supersets FMA4,
               AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2,
               SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit
               instruction set extensions.)

           _b_d_v_e_r_2
               AMD Family 15h core based CPUs with x86-64
               instruction set support.  (This supersets BMI,
               TBM, F16C, FMA, AVX, XOP, LWP, AES, PCL_MUL, CX16,
               MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1,
               SSE4.2, ABM and 64-bit instruction set
               extensions.)

           _b_t_v_e_r_1
               AMD Family 14h core based CPUs with x86-64
               instruction set support.  (This supersets MMX,
               SSE, SSE2, SSE3, SSSE3, SSE4A, CX16, ABM and
               64-bit instruction set extensions.)

           _w_i_n_c_h_i_p_-_c_6
               IDT Winchip C6 CPU, dealt in same way as i486 with
               additional MMX instruction set support.

           _w_i_n_c_h_i_p_2
               IDT Winchip2 CPU, dealt in same way as i486 with
               additional MMX and 3DNow!  instruction set
               support.

           _c_3  Via C3 CPU with MMX and 3DNow! instruction set
               support.  (No scheduling is implemented for this



gcc-4.74                    2014-06-12                        237





GCC(1)                         GNU                         GCC(1)


               chip.)

           _c_3_-_2
               Via C3-2 CPU with MMX and SSE instruction set
               support.  (No scheduling is implemented for this
               chip.)

           _g_e_o_d_e
               Embedded AMD CPU with MMX and 3DNow! instruction
               set support.

           While picking a specific _c_p_u_-_t_y_p_e will schedule things
           appropriately for that particular chip, the compiler
           will not generate any code that does not run on the
           default machine type without the --mmaarrcchh==_c_p_u_-_t_y_p_e
           option being used. For example, if GCC is configured
           for i686-pc-linux-gnu then --mmttuunnee==ppeennttiiuumm44 will
           generate code that is tuned for Pentium4 but will
           still run on i686 machines.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate instructions for the machine type _c_p_u_-_t_y_p_e.
           The choices for _c_p_u_-_t_y_p_e are the same as for --mmttuunnee.
           Moreover, specifying --mmaarrcchh==_c_p_u_-_t_y_p_e implies
           --mmttuunnee==_c_p_u_-_t_y_p_e.

       --mmccppuu==_c_p_u_-_t_y_p_e
           A deprecated synonym for --mmttuunnee.

       --mmffppmmaatthh==_u_n_i_t
           Generate floating-point arithmetic for selected unit
           _u_n_i_t.  The choices for _u_n_i_t are:

           338877 Use the standard 387 floating-point coprocessor
               present on the majority of chips and emulated
               otherwise.  Code compiled with this option runs
               almost everywhere.  The temporary results are
               computed in 80-bit precision instead of the
               precision specified by the type, resulting in
               slightly different results compared to most of
               other chips.  See --ffffllooaatt--ssttoorree for more detailed
               description.

               This is the default choice for i386 compiler.

           ssssee Use scalar floating-point instructions present in
               the SSE instruction set.  This instruction set is
               supported by Pentium3 and newer chips, in the AMD
               line by Athlon-4, Athlon-xp and Athlon-mp chips.
               The earlier version of SSE instruction set
               supports only single-precision arithmetic, thus
               the double and extended-precision arithmetic are
               still done using 387.  A later version, present
               only in Pentium4 and the future AMD x86-64 chips,



gcc-4.74                    2014-06-12                        238





GCC(1)                         GNU                         GCC(1)


               supports double-precision arithmetic too.

               For the i386 compiler, you need to use --mmaarrcchh==_c_p_u_-
               _t_y_p_e, --mmssssee or --mmssssee22 switches to enable SSE
               extensions and make this option effective.  For
               the x86-64 compiler, these extensions are enabled
               by default.

               The resulting code should be considerably faster
               in the majority of cases and avoid the numerical
               instability problems of 387 code, but may break
               some existing code that expects temporaries to be
               80 bits.

               This is the default choice for the x86-64
               compiler.

           ssssee,,338877
           ssssee++338877
           bbootthh
               Attempt to utilize both instruction sets at once.
               This effectively double the amount of available
               registers and on chips with separate execution
               units for 387 and SSE the execution resources too.
               Use this option with care, as it is still
               experimental, because the GCC register allocator
               does not model separate functional units well
               resulting in instable performance.

       --mmaassmm==_d_i_a_l_e_c_t
           Output asm instructions using selected _d_i_a_l_e_c_t.
           Supported choices are iinntteell or aatttt (the default one).
           Darwin does not support iinntteell.

       --mmiieeeeee--ffpp
       --mmnnoo--iieeeeee--ffpp
           Control whether or not the compiler uses IEEE
           floating-point comparisons.  These handle correctly
           the case where the result of a comparison is
           unordered.

       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating
           point.  WWaarrnniinngg:: the requisite libraries are not part
           of GCC.  Normally the facilities of the machine's
           usual C compiler are used, but this can't be done
           directly in cross-compilation.  You must make your own
           arrangements to provide suitable library functions for
           cross-compilation.

           On machines where a function returns floating-point
           results in the 80387 register stack, some floating-
           point opcodes may be emitted even if --mmssoofftt--ffllooaatt is
           used.



gcc-4.74                    2014-06-12                        239





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--ffpp--rreett--iinn--338877
           Do not use the FPU registers for return values of
           functions.

           The usual calling convention has functions return
           values of types "float" and "double" in an FPU
           register, even if there is no FPU.  The idea is that
           the operating system should emulate an FPU.

           The option --mmnnoo--ffpp--rreett--iinn--338877 causes such values to be
           returned in ordinary CPU registers instead.

       --mmnnoo--ffaannccyy--mmaatthh--338877
           Some 387 emulators do not support the "sin", "cos" and
           "sqrt" instructions for the 387.  Specify this option
           to avoid generating those instructions.  This option
           is the default on FreeBSD, OpenBSD and NetBSD.  This
           option is overridden when --mmaarrcchh indicates that the
           target CPU will always have an FPU and so the
           instruction will not need emulation.  As of revision
           2.6.1, these instructions are not generated unless you
           also use the --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss switch.

       --mmaalliiggnn--ddoouubbllee
       --mmnnoo--aalliiggnn--ddoouubbllee
           Control whether GCC aligns "double", "long double",
           and "long long" variables on a two-word boundary or a
           one-word boundary.  Aligning "double" variables on a
           two-word boundary produces code that runs somewhat
           faster on a PPeennttiiuumm at the expense of more memory.

           On x86-64, --mmaalliiggnn--ddoouubbllee is enabled by default.

           WWaarrnniinngg:: if you use the --mmaalliiggnn--ddoouubbllee switch,
           structures containing the above types will be aligned
           differently than the published application binary
           interface specifications for the 386 and will not be
           binary compatible with structures in code compiled
           without that switch.

       --mm9966bbiitt--lloonngg--ddoouubbllee
       --mm112288bbiitt--lloonngg--ddoouubbllee
           These switches control the size of "long double" type.
           The i386 application binary interface specifies the
           size to be 96 bits, so --mm9966bbiitt--lloonngg--ddoouubbllee is the
           default in 32-bit mode.

           Modern architectures (Pentium and newer) prefer "long
           double" to be aligned to an 8- or 16-byte boundary.
           In arrays or structures conforming to the ABI, this is
           not possible.  So specifying --mm112288bbiitt--lloonngg--ddoouubbllee
           aligns "long double" to a 16-byte boundary by padding
           the "long double" with an additional 32-bit zero.




gcc-4.74                    2014-06-12                        240





GCC(1)                         GNU                         GCC(1)


           In the x86-64 compiler, --mm112288bbiitt--lloonngg--ddoouubbllee is the
           default choice as its ABI specifies that "long double"
           is to be aligned on 16-byte boundary.

           Notice that neither of these options enable any extra
           precision over the x87 standard of 80 bits for a "long
           double".

           WWaarrnniinngg:: if you override the default value for your
           target ABI, the structures and arrays containing "long
           double" variables will change their size as well as
           function calling convention for function taking "long
           double" will be modified.  Hence they will not be
           binary compatible with arrays or structures in code
           compiled without that switch.

       --mmllaarrggee--ddaattaa--tthhrreesshhoolldd==_n_u_m_b_e_r
           When --mmccmmooddeell==mmeeddiiuumm is specified, the data greater
           than _t_h_r_e_s_h_o_l_d are placed in large data section.  This
           value must be the same across all object linked into
           the binary and defaults to 65535.

       --mmrrttdd
           Use a different function-calling convention, in which
           functions that take a fixed number of arguments return
           with the "ret" _n_u_m instruction, which pops their
           arguments while returning.  This saves one instruction
           in the caller since there is no need to pop the
           arguments there.

           You can specify that an individual function is called
           with this calling sequence with the function attribute
           ssttddccaallll.  You can also override the --mmrrttdd option by
           using the function attribute ccddeeccll.

           WWaarrnniinngg:: this calling convention is incompatible with
           the one normally used on Unix, so you cannot use it if
           you need to call libraries compiled with the Unix
           compiler.

           Also, you must provide function prototypes for all
           functions that take variable numbers of arguments
           (including "printf"); otherwise incorrect code will be
           generated for calls to those functions.

           In addition, seriously incorrect code will result if
           you call a function with too many arguments.
           (Normally, extra arguments are harmlessly ignored.)

       --mmrreeggppaarrmm==_n_u_m
           Control how many registers are used to pass integer
           arguments.  By default, no registers are used to pass
           arguments, and at most 3 registers can be used.  You
           can control this behavior for a specific function by



gcc-4.74                    2014-06-12                        241





GCC(1)                         GNU                         GCC(1)


           using the function attribute rreeggppaarrmm.

           WWaarrnniinngg:: if you use this switch, and _n_u_m is nonzero,
           then you must build all modules with the same value,
           including any libraries.  This includes the system
           libraries and startup modules.

       --mmsssseerreeggppaarrmm
           Use SSE register passing conventions for float and
           double arguments and return values.  You can control
           this behavior for a specific function by using the
           function attribute sssseerreeggppaarrmm.

           WWaarrnniinngg:: if you use this switch then you must build
           all modules with the same value, including any
           libraries.  This includes the system libraries and
           startup modules.

       --mmvveecctt88--rreett--iinn--mmeemm
           Return 8-byte vectors in memory instead of MMX
           registers.  This is the default on Solaris@tie{}8 and
           9 and VxWorks to match the ABI of the Sun Studio
           compilers until version 12.  Later compiler versions
           (starting with Studio 12 Update@tie{}1) follow the ABI
           used by other x86 targets, which is the default on
           Solaris@tie{}10 and later.  _O_n_l_y use this option if
           you need to remain compatible with existing code
           produced by those previous compiler versions or older
           versions of GCC.

       --mmppcc3322
       --mmppcc6644
       --mmppcc8800
           Set 80387 floating-point precision to 32, 64 or 80
           bits.  When --mmppcc3322 is specified, the significands of
           results of floating-point operations are rounded to 24
           bits (single precision); --mmppcc6644 rounds the
           significands of results of floating-point operations
           to 53 bits (double precision) and --mmppcc8800 rounds the
           significands of results of floating-point operations
           to 64 bits (extended double precision), which is the
           default.  When this option is used, floating-point
           operations in higher precisions are not available to
           the programmer without setting the FPU control word
           explicitly.

           Setting the rounding of floating-point operations to
           less than the default 80 bits can speed some programs
           by 2% or more.  Note that some mathematical libraries
           assume that extended-precision (80-bit) floating-point
           operations are enabled by default; routines in such
           libraries could suffer significant loss of accuracy,
           typically through so-called "catastrophic
           cancellation", when this option is used to set the



gcc-4.74                    2014-06-12                        242





GCC(1)                         GNU                         GCC(1)


           precision to less than extended precision.

       --mmssttaacckkrreeaalliiggnn
           Realign the stack at entry.  On the Intel x86, the
           --mmssttaacckkrreeaalliiggnn option will generate an alternate
           prologue and epilogue that realigns the run-time stack
           if necessary.  This supports mixing legacy codes that
           keep a 4-byte aligned stack with modern codes that
           keep a 16-byte stack for SSE compatibility.  See also
           the attribute "force_align_arg_pointer", applicable to
           individual functions.

       --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           Attempt to keep the stack boundary aligned to a 2
           raised to _n_u_m byte boundary.  If
           --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is not specified, the
           default is 4 (16 bytes or 128 bits).

       --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy==_n_u_m
           Assume the incoming stack is aligned to a 2 raised to
           _n_u_m byte boundary.  If --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy is
           not specified, the one specified by
           --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy will be used.

           On Pentium and PentiumPro, "double" and "long double"
           values should be aligned to an 8-byte boundary (see
           --mmaalliiggnn--ddoouubbllee) or suffer significant run time
           performance penalties.  On Pentium III, the Streaming
           SIMD Extension (SSE) data type "__m128" may not work
           properly if it is not 16-byte aligned.

           To ensure proper alignment of this values on the
           stack, the stack boundary must be as aligned as that
           required by any value stored on the stack.  Further,
           every function must be generated such that it keeps
           the stack aligned.  Thus calling a function compiled
           with a higher preferred stack boundary from a function
           compiled with a lower preferred stack boundary will
           most likely misalign the stack.  It is recommended
           that libraries that use callbacks always use the
           default setting.

           This extra alignment does consume extra stack space,
           and generally increases code size.  Code that is
           sensitive to stack space usage, such as embedded
           systems and operating system kernels, may want to
           reduce the preferred alignment to
           --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==22.

       --mmmmmmxx
       --mmnnoo--mmmmxx
       --mmssssee
       --mmnnoo--ssssee




gcc-4.74                    2014-06-12                        243





GCC(1)                         GNU                         GCC(1)


       --mmssssee22
       --mmnnoo--ssssee22
       --mmssssee33
       --mmnnoo--ssssee33
       --mmssssssee33
       --mmnnoo--ssssssee33
       --mmssssee44..11
       --mmnnoo--ssssee44..11
       --mmssssee44..22
       --mmnnoo--ssssee44..22
       --mmssssee44
       --mmnnoo--ssssee44
       --mmaavvxx
       --mmnnoo--aavvxx
       --mmaavvxx22
       --mmnnoo--aavvxx22
       --mmaaeess
       --mmnnoo--aaeess
       --mmppccllmmuull
       --mmnnoo--ppccllmmuull
       --mmffssggssbbaassee
       --mmnnoo--ffssggssbbaassee
       --mmrrddrrnndd
       --mmnnoo--rrddrrnndd
       --mmff1166cc
       --mmnnoo--ff1166cc
       --mmffmmaa
       --mmnnoo--ffmmaa
       --mmssssee44aa
       --mmnnoo--ssssee44aa
       --mmffmmaa44
       --mmnnoo--ffmmaa44
       --mmxxoopp
       --mmnnoo--xxoopp
       --mmllwwpp
       --mmnnoo--llwwpp
       --mm33ddnnooww
       --mmnnoo--33ddnnooww
       --mmppooppccnntt
       --mmnnoo--ppooppccnntt
       --mmaabbmm
       --mmnnoo--aabbmm
       --mmbbmmii
       --mmbbmmii22
       --mmnnoo--bbmmii
       --mmnnoo--bbmmii22
       --mmllzzccnntt
       --mmnnoo--llzzccnntt
       --mmttbbmm
       --mmnnoo--ttbbmm
           These switches enable or disable the use of
           instructions in the MMX, SSE, SSE2, SSE3, SSSE3,
           SSE4.1, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, F16C,
           FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, LZCNT or



gcc-4.74                    2014-06-12                        244





GCC(1)                         GNU                         GCC(1)


           3DNow!
            extended instruction sets.  These extensions are also
           available as built-in functions: see XX8866 BBuuiilltt--iinn
           FFuunnccttiioonnss, for details of the functions enabled and
           disabled by these switches.

           To have SSE/SSE2 instructions generated automatically
           from floating-point code (as opposed to 387
           instructions), see --mmffppmmaatthh==ssssee.

           GCC depresses SSEx instructions when --mmaavvxx is used.
           Instead, it generates new AVX instructions or AVX
           equivalence for all SSEx instructions when needed.

           These options will enable GCC to use these extended
           instructions in generated code, even without
           --mmffppmmaatthh==ssssee.  Applications that perform run-time CPU
           detection must compile separate files for each
           supported architecture, using the appropriate flags.
           In particular, the file containing the CPU detection
           code should be compiled without these options.

       --mmcclldd
           This option instructs GCC to emit a "cld" instruction
           in the prologue of functions that use string
           instructions.  String instructions depend on the DF
           flag to select between autoincrement or autodecrement
           mode.  While the ABI specifies the DF flag to be
           cleared on function entry, some operating systems
           violate this specification by not clearing the DF flag
           in their exception dispatchers.  The exception handler
           can be invoked with the DF flag set, which leads to
           wrong direction mode when string instructions are
           used.  This option can be enabled by default on 32-bit
           x86 targets by configuring GCC with the ----eennaabbllee--cclldd
           configure option.  Generation of "cld" instructions
           can be suppressed with the --mmnnoo--cclldd compiler option in
           this case.

       --mmvvzzeerroouuppppeerr
           This option instructs GCC to emit a "vzeroupper"
           instruction before a transfer of control flow out of
           the function to minimize AVX to SSE transition penalty
           as well as remove unnecessary zeroupper intrinsics.

       --mmpprreeffeerr--aavvxx112288
           This option instructs GCC to use 128-bit AVX
           instructions instead of 256-bit AVX instructions in
           the auto-vectorizer.

       --mmccxx1166
           This option will enable GCC to use CMPXCHG16B
           instruction in generated code.  CMPXCHG16B allows for
           atomic operations on 128-bit double quadword (or



gcc-4.74                    2014-06-12                        245





GCC(1)                         GNU                         GCC(1)


           oword) data types.  This is useful for high resolution
           counters that could be updated by multiple processors
           (or cores).  This instruction is generated as part of
           atomic built-in functions: see ____ssyynncc BBuuiillttiinnss or
           ____aattoommiicc BBuuiillttiinnss for details.

       --mmssaahhff
           This option will enable GCC to use SAHF instruction in
           generated 64-bit code.  Early Intel CPUs with Intel 64
           lacked LAHF and SAHF instructions supported by AMD64
           until introduction of Pentium 4 G1 step in December
           2005.  LAHF and SAHF are load and store instructions,
           respectively, for certain status flags.  In 64-bit
           mode, SAHF instruction is used to optimize "fmod",
           "drem" or "remainder" built-in functions: see OOtthheerr
           BBuuiillttiinnss for details.

       --mmmmoovvbbee
           This option will enable GCC to use movbe instruction
           to implement "__builtin_bswap32" and
           "__builtin_bswap64".

       --mmccrrcc3322
           This option will enable built-in functions,
           "__builtin_ia32_crc32qi", "__builtin_ia32_crc32hi".
           "__builtin_ia32_crc32si" and "__builtin_ia32_crc32di"
           to generate the crc32 machine instruction.

       --mmrreecciipp
           This option will enable GCC to use RCPSS and RSQRTSS
           instructions (and their vectorized variants RCPPS and
           RSQRTPS) with an additional Newton-Raphson step to
           increase precision instead of DIVSS and SQRTSS (and
           their vectorized variants) for single-precision
           floating-point arguments.  These instructions are
           generated only when --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is
           enabled together with --ffiinniittee--mmaatthh--oonnllyy and
           --ffnnoo--ttrraappppiinngg--mmaatthh.  Note that while the throughput of
           the sequence is higher than the throughput of the non-
           reciprocal instruction, the precision of the sequence
           can be decreased by up to 2 ulp (i.e. the inverse of
           1.0 equals 0.99999994).

           Note that GCC implements "1.0f/sqrtf(x)" in terms of
           RSQRTSS (or RSQRTPS) already with --ffffaasstt--mmaatthh (or the
           above option combination), and doesn't need --mmrreecciipp.

           Also note that GCC emits the above sequence with
           additional Newton-Raphson step for vectorized single-
           float division and vectorized "sqrtf(x)" already with
           --ffffaasstt--mmaatthh (or the above option combination), and
           doesn't need --mmrreecciipp.





gcc-4.74                    2014-06-12                        246





GCC(1)                         GNU                         GCC(1)


       --mmrreecciipp==_o_p_t
           This option allows to control which reciprocal
           estimate instructions may be used.  _o_p_t is a comma
           separated list of options, which may be preceded by a
           "!" to invert the option: "all": enable all estimate
           instructions, "default": enable the default
           instructions, equivalent to --mmrreecciipp, "none": disable
           all estimate instructions, equivalent to --mmnnoo--rreecciipp,
           "div": enable the approximation for scalar division,
           "vec-div": enable the approximation for vectorized
           division, "sqrt": enable the approximation for scalar
           square root, "vec-sqrt": enable the approximation for
           vectorized square root.

           So for example, --mmrreecciipp==aallll,,!!ssqqrrtt would enable all of
           the reciprocal approximations, except for square root.

       --mmvveecclliibbaabbii==_t_y_p_e
           Specifies the ABI type to use for vectorizing
           intrinsics using an external library.  Supported types
           are "svml" for the Intel short vector math library and
           "acml" for the AMD math core library style of
           interfacing.  GCC will currently emit calls to
           "vmldExp2", "vmldLn2", "vmldLog102", "vmldLog102",
           "vmldPow2", "vmldTanh2", "vmldTan2", "vmldAtan2",
           "vmldAtanh2", "vmldCbrt2", "vmldSinh2", "vmldSin2",
           "vmldAsinh2", "vmldAsin2", "vmldCosh2", "vmldCos2",
           "vmldAcosh2", "vmldAcos2", "vmlsExp4", "vmlsLn4",
           "vmlsLog104", "vmlsLog104", "vmlsPow4", "vmlsTanh4",
           "vmlsTan4", "vmlsAtan4", "vmlsAtanh4", "vmlsCbrt4",
           "vmlsSinh4", "vmlsSin4", "vmlsAsinh4", "vmlsAsin4",
           "vmlsCosh4", "vmlsCos4", "vmlsAcosh4" and "vmlsAcos4"
           for corresponding function type when --mmvveecclliibbaabbii==ssvvmmll
           is used and "__vrd2_sin", "__vrd2_cos", "__vrd2_exp",
           "__vrd2_log", "__vrd2_log2", "__vrd2_log10",
           "__vrs4_sinf", "__vrs4_cosf", "__vrs4_expf",
           "__vrs4_logf", "__vrs4_log2f", "__vrs4_log10f" and
           "__vrs4_powf" for corresponding function type when
           --mmvveecclliibbaabbii==aaccmmll is used. Both --ffttrreeee--vveeccttoorriizzee and
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss have to be enabled. A SVML
           or ACML ABI compatible library will have to be
           specified at link time.

       --mmaabbii==_n_a_m_e
           Generate code for the specified calling convention.
           Permissible values are: ssyyssvv for the ABI used on
           GNU/Linux and other systems and mmss for the Microsoft
           ABI.  The default is to use the Microsoft ABI when
           targeting Windows.  On all other systems, the default
           is the SYSV ABI.  You can control this behavior for a
           specific function by using the function attribute
           mmss__aabbii/ssyyssvv__aabbii.





gcc-4.74                    2014-06-12                        247





GCC(1)                         GNU                         GCC(1)


       --mmttllss--ddiiaalleecctt==_t_y_p_e
           Generate code to access thread-local storage using the
           ggnnuu or ggnnuu22 conventions.  ggnnuu is the conservative
           default; ggnnuu22 is more efficient, but it may add
           compile- and run-time requirements that cannot be
           satisfied on all systems.

       --mmppuusshh--aarrggss
       --mmnnoo--ppuusshh--aarrggss
           Use PUSH operations to store outgoing parameters.
           This method is shorter and usually equally fast as
           method using SUB/MOV operations and is enabled by
           default.  In some cases disabling it may improve
           performance because of improved scheduling and reduced
           dependencies.

       --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           If enabled, the maximum amount of space required for
           outgoing arguments will be computed in the function
           prologue.  This is faster on most modern CPUs because
           of reduced dependencies, improved scheduling and
           reduced stack usage when preferred stack boundary is
           not equal to 2.  The drawback is a notable increase in
           code size.  This switch implies --mmnnoo--ppuusshh--aarrggss.

       --mmtthhrreeaaddss
           Support thread-safe exception handling on MMiinnggww3322.
           Code that relies on thread-safe exception handling
           must compile and link all code with the --mmtthhrreeaaddss
           option.  When compiling, --mmtthhrreeaaddss defines --DD__MMTT; when
           linking, it links in a special thread helper library
           --llmmiinnggwwtthhrrdd which cleans up per thread exception
           handling data.

       --mmnnoo--aalliiggnn--ssttrriinnggooppss
           Do not align destination of inlined string operations.
           This switch reduces code size and improves performance
           in case the destination is already aligned, but GCC
           doesn't know about it.

       --mmiinnlliinnee--aallll--ssttrriinnggooppss
           By default GCC inlines string operations only when the
           destination is known to be aligned to least a 4-byte
           boundary.  This enables more inlining, increase code
           size, but may improve performance of code that depends
           on fast memcpy, strlen and memset for short lengths.

       --mmiinnlliinnee--ssttrriinnggooppss--ddyynnaammiiccaallllyy
           For string operations of unknown size, use run-time
           checks with inline code for small blocks and a library
           call for large blocks.

       --mmssttrriinnggoopp--ssttrraatteeggyy==_a_l_g
           Overwrite internal decision heuristic about particular



gcc-4.74                    2014-06-12                        248





GCC(1)                         GNU                         GCC(1)


           algorithm to inline string operation with.  The
           allowed values are "rep_byte", "rep_4byte",
           "rep_8byte" for expanding using i386 "rep" prefix of
           specified size, "byte_loop", "loop", "unrolled_loop"
           for expanding inline loop, "libcall" for always
           expanding library call.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Don't keep the frame pointer in a register for leaf
           functions.  This avoids the instructions to save, set
           up and restore frame pointers and makes an extra
           register available in leaf functions.  The option
           --ffoommiitt--ffrraammee--ppooiinntteerr removes the frame pointer for all
           functions, which might make debugging harder.

       --mmttllss--ddiirreecctt--sseegg--rreeffss
       --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss
           Controls whether TLS variables may be accessed with
           offsets from the TLS segment register (%gs for 32-bit,
           %fs for 64-bit), or whether the thread base pointer
           must be added.  Whether or not this is legal depends
           on the operating system, and whether it maps the
           segment to cover the entire TLS area.

           For systems that use GNU libc, the default is on.

       --mmssssee22aavvxx
       --mmnnoo--ssssee22aavvxx
           Specify that the assembler should encode SSE
           instructions with VEX prefix.  The option --mmaavvxx turns
           this on by default.

       --mmffeennttrryy
       --mmnnoo--ffeennttrryy
           If profiling is active --ppgg put the profiling counter
           call before prologue.  Note: On x86 architectures the
           attribute "ms_hook_prologue" isn't possible at the
           moment for --mmffeennttrryy and --ppgg.

       --mm88bbiitt--iiddiivv
       --mmnnoo--88bbiitt--iiddiivv
           On some processors, like Intel Atom, 8-bit unsigned
           integer divide is much faster than 32-bit/64-bit
           integer divide.  This option generates a run-time
           check.  If both dividend and divisor are within range
           of 0 to 255, 8-bit unsigned integer divide is used
           instead of 32-bit/64-bit integer divide.

       --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--llooaadd
       --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--ssttoorree
           Split 32-byte AVX unaligned load and store.

       These --mm switches are supported in addition to the above
       on AMD x86-64 processors in 64-bit environments.



gcc-4.74                    2014-06-12                        249





GCC(1)                         GNU                         GCC(1)


       --mm3322
       --mm6644
       --mmxx3322
           Generate code for a 32-bit or 64-bit environment.  The
           --mm3322 option sets int, long and pointer to 32 bits and
           generates code that runs on any i386 system.  The --mm6644
           option sets int to 32 bits and long and pointer to 64
           bits and generates code for AMD's x86-64 architecture.
           The --mmxx3322 option sets int, long and pointer to 32 bits
           and generates code for AMD's x86-64 architecture.  For
           darwin only the --mm6644 option turns off the --ffnnoo--ppiicc and
           --mmddyynnaammiicc--nnoo--ppiicc options.

       --mmnnoo--rreedd--zzoonnee
           Do not use a so called red zone for x86-64 code.  The
           red zone is mandated by the x86-64 ABI, it is a
           128-byte area beyond the location of the stack pointer
           that will not be modified by signal or interrupt
           handlers and therefore can be used for temporary data
           without adjusting the stack pointer.  The flag
           --mmnnoo--rreedd--zzoonnee disables this red zone.

       --mmccmmooddeell==ssmmaallll
           Generate code for the small code model: the program
           and its symbols must be linked in the lower 2 GB of
           the address space.  Pointers are 64 bits.  Programs
           can be statically or dynamically linked.  This is the
           default code model.

       --mmccmmooddeell==kkeerrnneell
           Generate code for the kernel code model.  The kernel
           runs in the negative 2 GB of the address space.  This
           model has to be used for Linux kernel code.

       --mmccmmooddeell==mmeeddiiuumm
           Generate code for the medium model: The program is
           linked in the lower 2 GB of the address space.  Small
           symbols are also placed there.  Symbols with sizes
           larger than --mmllaarrggee--ddaattaa--tthhrreesshhoolldd are put into large
           data or bss sections and can be located above 2GB.
           Programs can be statically or dynamically linked.

       --mmccmmooddeell==llaarrggee
           Generate code for the large model: This model makes no
           assumptions about addresses and sizes of sections.

       _i_3_8_6 _a_n_d _x_8_6_-_6_4 _W_i_n_d_o_w_s _O_p_t_i_o_n_s

       These additional options are available for Windows
       targets:

       --mmccoonnssoollee
           This option is available for Cygwin and MinGW targets.
           It specifies that a console application is to be



gcc-4.74                    2014-06-12                        250





GCC(1)                         GNU                         GCC(1)


           generated, by instructing the linker to set the PE
           header subsystem type required for console
           applications.  This is the default behavior for Cygwin
           and MinGW targets.

       --mmddllll
           This option is available for Cygwin and MinGW targets.
           It specifies that a DLL - a dynamic link library - is
           to be generated, enabling the selection of the
           required runtime startup object and entry point.

       --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           This option is available for Cygwin and MinGW targets.
           It specifies that the dllimport attribute should be
           ignored.

       --mmtthhrreeaadd
           This option is available for MinGW targets. It
           specifies that MinGW-specific thread support is to be
           used.

       --mmuunniiccooddee
           This option is available for mingw-w64 targets.  It
           specifies that the UNICODE macro is getting pre-
           defined and that the unicode capable runtime startup
           code is chosen.

       --mmwwiinn3322
           This option is available for Cygwin and MinGW targets.
           It specifies that the typical Windows pre-defined
           macros are to be set in the pre-processor, but does
           not influence the choice of runtime library/startup
           code.

       --mmwwiinnddoowwss
           This option is available for Cygwin and MinGW targets.
           It specifies that a GUI application is to be generated
           by instructing the linker to set the PE header
           subsystem type appropriately.

       --ffnnoo--sseett--ssttaacckk--eexxeeccuuttaabbllee
           This option is available for MinGW targets. It
           specifies that the executable flag for stack used by
           nested functions isn't set. This is necessary for
           binaries running in kernel mode of Windows, as there
           the user32 API, which is used to set executable
           privileges, isn't available.

       --mmppee--aalliiggnneedd--ccoommmmoonnss
           This option is available for Cygwin and MinGW targets.
           It specifies that the GNU extension to the PE file
           format that permits the correct alignment of COMMON
           variables should be used when generating code.  It
           will be enabled by default if GCC detects that the



gcc-4.74                    2014-06-12                        251





GCC(1)                         GNU                         GCC(1)


           target assembler found during configuration supports
           the feature.

       See also under ii338866 aanndd xx8866--6644 OOppttiioonnss for standard
       options.

       _I_A_-_6_4 _O_p_t_i_o_n_s

       These are the --mm options defined for the Intel IA-64
       architecture.

       --mmbbiigg--eennddiiaann
           Generate code for a big-endian target.  This is the
           default for HP-UX.

       --mmlliittttllee--eennddiiaann
           Generate code for a little-endian target.  This is the
           default for AIX5 and GNU/Linux.

       --mmggnnuu--aass
       --mmnnoo--ggnnuu--aass
           Generate (or don't) code for the GNU assembler.  This
           is the default.

       --mmggnnuu--lldd
       --mmnnoo--ggnnuu--lldd
           Generate (or don't) code for the GNU linker.  This is
           the default.

       --mmnnoo--ppiicc
           Generate code that does not use a global pointer
           register.  The result is not position independent
           code, and violates the IA-64 ABI.

       --mmvvoollaattiillee--aassmm--ssttoopp
       --mmnnoo--vvoollaattiillee--aassmm--ssttoopp
           Generate (or don't) a stop bit immediately before and
           after volatile asm statements.

       --mmrreeggiisstteerr--nnaammeess
       --mmnnoo--rreeggiisstteerr--nnaammeess
           Generate (or don't) iinn, lloocc, and oouutt register names
           for the stacked registers.  This may make assembler
           output more readable.

       --mmnnoo--ssddaattaa
       --mmssddaattaa
           Disable (or enable) optimizations that use the small
           data section.  This may be useful for working around
           optimizer bugs.

       --mmccoonnssttaanntt--ggpp
           Generate code that uses a single constant global
           pointer value.  This is useful when compiling kernel



gcc-4.74                    2014-06-12                        252





GCC(1)                         GNU                         GCC(1)


           code.

       --mmaauuttoo--ppiicc
           Generate code that is self-relocatable.  This implies
           --mmccoonnssttaanntt--ggpp.  This is useful when compiling firmware
           code.

       --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           Generate code for inline divides of floating-point
           values using the minimum latency algorithm.

       --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline divides of floating-point
           values using the maximum throughput algorithm.

       --mmnnoo--iinnlliinnee--ffllooaatt--ddiivviiddee
           Do not generate inline code for divides of floating-
           point values.

       --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy
           Generate code for inline divides of integer values
           using the minimum latency algorithm.

       --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline divides of integer values
           using the maximum throughput algorithm.

       --mmnnoo--iinnlliinnee--iinntt--ddiivviiddee
           Do not generate inline code for divides of integer
           values.

       --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy
           Generate code for inline square roots using the
           minimum latency algorithm.

       --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline square roots using the
           maximum throughput algorithm.

       --mmnnoo--iinnlliinnee--ssqqrrtt
           Do not generate inline code for sqrt.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Do (don't) generate code that uses the fused
           multiply/add or multiply/subtract instructions.  The
           default is to use these instructions.

       --mmnnoo--ddwwaarrff22--aassmm
       --mmddwwaarrff22--aassmm
           Don't (or do) generate assembler code for the DWARF2
           line number debugging info.  This may be useful when
           not using the GNU assembler.




gcc-4.74                    2014-06-12                        253





GCC(1)                         GNU                         GCC(1)


       --mmeeaarrllyy--ssttoopp--bbiittss
       --mmnnoo--eeaarrllyy--ssttoopp--bbiittss
           Allow stop bits to be placed earlier than immediately
           preceding the instruction that triggered the stop bit.
           This can improve instruction scheduling, but does not
           always do so.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as
           fixed registers.  A fixed register is one that the
           register allocator can not use.  This is useful when
           compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple
           register ranges can be specified separated by a comma.

       --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e
           Specify bit size of immediate TLS offsets.  Valid
           values are 14, 22, and 64.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune the instruction scheduling for a particular CPU,
           Valid values are itanium, itanium1, merced, itanium2,
           and mckinley.

       --mmiillpp3322
       --mmllpp6644
           Generate code for a 32-bit or 64-bit environment.  The
           32-bit environment sets int, long and pointer to 32
           bits.  The 64-bit environment sets int to 32 bits and
           long and pointer to 64 bits.  These are HP-UX specific
           flags.

       --mmnnoo--sscchheedd--bbrr--ddaattaa--ssppeecc
       --mmsscchheedd--bbrr--ddaattaa--ssppeecc
           (Dis/En)able data speculative scheduling before
           reload.  This will result in generation of the ld.a
           instructions and the corresponding check instructions
           (ld.c / chk.a).  The default is 'disable'.

       --mmsscchheedd--aarr--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--aarr--ddaattaa--ssppeecc
           (En/Dis)able data speculative scheduling after reload.
           This will result in generation of the ld.a
           instructions and the corresponding check instructions
           (ld.c / chk.a).  The default is 'enable'.

       --mmnnoo--sscchheedd--ccoonnttrrooll--ssppeecc
       --mmsscchheedd--ccoonnttrrooll--ssppeecc
           (Dis/En)able control speculative scheduling.  This
           feature is available only during region scheduling
           (i.e. before reload).  This will result in generation
           of the ld.s instructions and the corresponding check
           instructions chk.s .  The default is 'disable'.




gcc-4.74                    2014-06-12                        254





GCC(1)                         GNU                         GCC(1)


       --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           (En/Dis)able speculative scheduling of the
           instructions that are dependent on the data
           speculative loads before reload.  This is effective
           only with --mmsscchheedd--bbrr--ddaattaa--ssppeecc enabled.  The default
           is 'enable'.

       --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--aarr--iinn--ddaattaa--ssppeecc
           (En/Dis)able speculative scheduling of the
           instructions that are dependent on the data
           speculative loads after reload.  This is effective
           only with --mmsscchheedd--aarr--ddaattaa--ssppeecc enabled.  The default
           is 'enable'.

       --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc
       --mmnnoo--sscchheedd--iinn--ccoonnttrrooll--ssppeecc
           (En/Dis)able speculative scheduling of the
           instructions that are dependent on the control
           speculative loads.  This is effective only with
           --mmsscchheedd--ccoonnttrrooll--ssppeecc enabled.  The default is
           'enable'.

       --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
       --mmsscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           If enabled, data speculative instructions will be
           chosen for schedule only if there are no other choices
           at the moment.  This will make the use of the data
           speculation much more conservative.  The default is
           'disable'.

       --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
       --mmsscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
           If enabled, control speculative instructions will be
           chosen for schedule only if there are no other choices
           at the moment.  This will make the use of the control
           speculation much more conservative.  The default is
           'disable'.

       --mmnnoo--sscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
       --mmsscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
           If enabled, speculative dependencies will be
           considered during computation of the instructions
           priorities.  This will make the use of the speculation
           a bit more conservative.  The default is 'disable'.

       --mmsscchheedd--ssppeecc--llddcc
           Use a simple data speculation check.  This option is
           on by default.

       --mmsscchheedd--ccoonnttrrooll--ssppeecc--llddcc
           Use a simple check for control speculation.  This
           option is on by default.



gcc-4.74                    2014-06-12                        255





GCC(1)                         GNU                         GCC(1)


       --mmsscchheedd--ssttoopp--bbiittss--aafftteerr--eevveerryy--ccyyccllee
           Place a stop bit after every cycle when scheduling.
           This option is on by default.

       --mmsscchheedd--ffpp--mmeemm--ddeeppss--zzeerroo--ccoosstt
           Assume that floating-point stores and loads are not
           likely to cause a conflict when placed into the same
           instruction group.  This option is disabled by
           default.

       --mmsseell--sscchheedd--ddoonntt--cchheecckk--ccoonnttrrooll--ssppeecc
           Generate checks for control speculation in selective
           scheduling.  This flag is disabled by default.

       --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss==_m_a_x_-_i_n_s_n_s
           Limit on the number of memory insns per instruction
           group, giving lower priority to subsequent memory
           insns attempting to schedule in the same instruction
           group. Frequently useful to prevent cache bank
           conflicts.  The default value is 1.

       --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss--hhaarrdd--lliimmiitt
           Disallow more than `msched-max-memory-insns' in
           instruction group.  Otherwise, limit is `soft' meaning
           that we would prefer non-memory operations when limit
           is reached but may still schedule memory operations.

       _I_A_-_6_4_/_V_M_S _O_p_t_i_o_n_s

       These --mm options are defined for the IA-64/VMS
       implementations:

       --mmvvmmss--rreettuurrnn--ccooddeess
           Return VMS condition codes from main. The default is
           to return POSIX style condition (e.g. error) codes.

       --mmddeebbuugg--mmaaiinn==_p_r_e_f_i_x
           Flag the first routine whose name starts with _p_r_e_f_i_x
           as the main routine for the debugger.

       --mmmmaalllloocc6644
           Default to 64-bit memory allocation routines.

       _L_M_3_2 _O_p_t_i_o_n_s

       These --mm options are defined for the Lattice Mico32
       architecture:

       --mmbbaarrrreell--sshhiifftt--eennaabblleedd
           Enable barrel-shift instructions.

       --mmddiivviiddee--eennaabblleedd
           Enable divide and modulus instructions.




gcc-4.74                    2014-06-12                        256





GCC(1)                         GNU                         GCC(1)


       --mmmmuullttiippllyy--eennaabblleedd
           Enable multiply instructions.

       --mmssiiggnn--eexxtteenndd--eennaabblleedd
           Enable sign extend instructions.

       --mmuusseerr--eennaabblleedd
           Enable user-defined instructions.

       _M_3_2_C _O_p_t_i_o_n_s

       --mmccppuu==_n_a_m_e
           Select the CPU for which code is generated.  _n_a_m_e may
           be one of rr88cc for the R8C/Tiny series, mm1166cc for the
           M16C (up to /60) series, mm3322ccmm for the M16C/80 series,
           or mm3322cc for the M32C/80 series.

       --mmssiimm
           Specifies that the program will be run on the
           simulator.  This causes an alternate runtime library
           to be linked in which supports, for example, file I/O.
           You must not use this option when generating programs
           that will run on real hardware; you must provide your
           own runtime library for whatever I/O functions are
           needed.

       --mmeemmrreeggss==_n_u_m_b_e_r
           Specifies the number of memory-based pseudo-registers
           GCC will use during code generation.  These pseudo-
           registers will be used like real registers, so there
           is a tradeoff between GCC's ability to fit the code
           into available registers, and the performance penalty
           of using memory instead of registers.  Note that all
           modules in a program must be compiled with the same
           value for this option.  Because of that, you must not
           use this option with the default runtime libraries gcc
           builds.

       _M_3_2_R_/_D _O_p_t_i_o_n_s

       These --mm options are defined for Renesas M32R/D
       architectures:

       --mm3322rr22
           Generate code for the M32R/2.

       --mm3322rrxx
           Generate code for the M32R/X.

       --mm3322rr
           Generate code for the M32R.  This is the default.

       --mmmmooddeell==ssmmaallll
           Assume all objects live in the lower 16MB of memory



gcc-4.74                    2014-06-12                        257





GCC(1)                         GNU                         GCC(1)


           (so that their addresses can be loaded with the "ld24"
           instruction), and assume all subroutines are reachable
           with the "bl" instruction.  This is the default.

           The addressability of a particular object can be set
           with the "model" attribute.

       --mmmmooddeell==mmeeddiiuumm
           Assume objects may be anywhere in the 32-bit address
           space (the compiler will generate "seth/add3"
           instructions to load their addresses), and assume all
           subroutines are reachable with the "bl" instruction.

       --mmmmooddeell==llaarrggee
           Assume objects may be anywhere in the 32-bit address
           space (the compiler will generate "seth/add3"
           instructions to load their addresses), and assume
           subroutines may not be reachable with the "bl"
           instruction (the compiler will generate the much
           slower "seth/add3/jl" instruction sequence).

       --mmssddaattaa==nnoonnee
           Disable use of the small data area.  Variables will be
           put into one of ..ddaattaa, bbssss, or ..rrooddaattaa (unless the
           "section" attribute has been specified).  This is the
           default.

           The small data area consists of sections ..ssddaattaa and
           ..ssbbssss.  Objects may be explicitly put in the small
           data area with the "section" attribute using one of
           these sections.

       --mmssddaattaa==ssddaattaa
           Put small global and static data in the small data
           area, but do not generate special code to reference
           them.

       --mmssddaattaa==uussee
           Put small global and static data in the small data
           area, and generate special instructions to reference
           them.

       --GG _n_u_m
           Put global and static objects less than or equal to
           _n_u_m bytes into the small data or bss sections instead
           of the normal data or bss sections.  The default value
           of _n_u_m is 8.  The --mmssddaattaa option must be set to one of
           ssddaattaa or uussee for this option to have any effect.

           All modules should be compiled with the same --GG _n_u_m
           value.  Compiling with different values of _n_u_m may or
           may not work; if it doesn't the linker will give an
           error message---incorrect code will not be generated.




gcc-4.74                    2014-06-12                        258





GCC(1)                         GNU                         GCC(1)


       --mmddeebbuugg
           Makes the M32R specific code in the compiler display
           some statistics that might help in debugging programs.

       --mmaalliiggnn--llooooppss
           Align all loops to a 32-byte boundary.

       --mmnnoo--aalliiggnn--llooooppss
           Do not enforce a 32-byte alignment for loops.  This is
           the default.

       --mmiissssuuee--rraattee==_n_u_m_b_e_r
           Issue _n_u_m_b_e_r instructions per cycle.  _n_u_m_b_e_r can only
           be 1 or 2.

       --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r
           _n_u_m_b_e_r can only be 1 or 2.  If it is 1 then branches
           will be preferred over conditional code, if it is 2,
           then the opposite will apply.

       --mmfflluusshh--ttrraapp==_n_u_m_b_e_r
           Specifies the trap number to use to flush the cache.
           The default is 12.  Valid numbers are between 0 and 15
           inclusive.

       --mmnnoo--fflluusshh--ttrraapp
           Specifies that the cache cannot be flushed by using a
           trap.

       --mmfflluusshh--ffuunncc==_n_a_m_e
           Specifies the name of the operating system function to
           call to flush the cache.  The default is ___f_l_u_s_h___c_a_c_h_e,
           but a function call will only be used if a trap is not
           available.

       --mmnnoo--fflluusshh--ffuunncc
           Indicates that there is no OS function for flushing
           the cache.

       _M_6_8_0_x_0 _O_p_t_i_o_n_s

       These are the --mm options defined for M680x0 and ColdFire
       processors.  The default settings depend on which
       architecture was selected when the compiler was
       configured; the defaults for the most common choices are
       given below.

       --mmaarrcchh==_a_r_c_h
           Generate code for a specific M680x0 or ColdFire
           instruction set architecture.  Permissible values of
           _a_r_c_h for M680x0 architectures are: 6688000000, 6688001100,
           6688002200, 6688003300, 6688004400, 6688006600 and ccppuu3322.  ColdFire
           architectures are selected according to Freescale's
           ISA classification and the permissible values are:



gcc-4.74                    2014-06-12                        259





GCC(1)                         GNU                         GCC(1)


           iissaaaa, iissaaaapplluuss, iissaabb and iissaacc.

           gcc defines a macro ____mmccff_a_r_c_h____ whenever it is
           generating code for a ColdFire target.  The _a_r_c_h in
           this macro is one of the --mmaarrcchh arguments given above.

           When used together, --mmaarrcchh and --mmttuunnee select code that
           runs on a family of similar processors but that is
           optimized for a particular microarchitecture.

       --mmccppuu==_c_p_u
           Generate code for a specific M680x0 or ColdFire
           processor.  The M680x0 _c_p_us are: 6688000000, 6688001100, 6688002200,
           6688003300, 6688004400, 6688006600, 6688330022, 6688333322 and ccppuu3322.  The
           ColdFire _c_p_us are given by the table below, which also
           classifies the CPUs into families:

           Family : --mmccppuu arguments
           5511 : 5511 5511aacc 5511ccnn 5511eemm 5511qqee
           55220066 : 55220022 55220044 55220066
           55220066ee : 55220066ee
           55220088 : 55220077 55220088
           55221111aa : 55221100aa 55221111aa
           55221133 : 55221111 55221122 55221133
           55221166 : 55221144 55221166
           5522223355 : 5522223300 5522223311 5522223322 5522223333 5522223344 5522223355
           55222255 : 55222244 55222255
           5522225599 : 5522225522 5522225544 5522225555 5522225566 5522225588 5522225599
           55223355 : 55223322 55223333 55223344 55223355 552233xx
           55224499 : 55224499
           55225500 : 55225500
           55227711 : 55227700 55227711
           55227722 : 55227722
           55227755 : 55227744 55227755
           55228822 : 55228800 55228811 55228822 552288xx
           5533001177 : 5533001111 5533001122 5533001133 5533001144 5533001155 5533001166 5533001177
           55330077 : 55330077
           55332299 : 55332277 55332288 55332299 553322xx
           55337733 : 55337722 55337733 553377xx
           55440077 : 55440077
           55447755 : 55447700 55447711 55447722 55447733 55447744 55447755 554477xx 55448800 55448811
           55448822 55448833 55448844 55448855

           --mmccppuu==_c_p_u overrides --mmaarrcchh==_a_r_c_h if _a_r_c_h is compatible
           with _c_p_u.  Other combinations of --mmccppuu and --mmaarrcchh are
           rejected.

           gcc defines the macro ____mmccff__ccppuu___c_p_u when ColdFire
           target _c_p_u is selected.  It also defines
           ____mmccff__ffaammiillyy___f_a_m_i_l_y, where the value of _f_a_m_i_l_y is
           given by the table above.

       --mmttuunnee==_t_u_n_e
           Tune the code for a particular microarchitecture,



gcc-4.74                    2014-06-12                        260





GCC(1)                         GNU                         GCC(1)


           within the constraints set by --mmaarrcchh and --mmccppuu.  The
           M680x0 microarchitectures are: 6688000000, 6688001100, 6688002200,
           6688003300, 6688004400, 6688006600 and ccppuu3322.  The ColdFire
           microarchitectures are: ccffvv11, ccffvv22, ccffvv33, ccffvv44 and
           ccffvv44ee.

           You can also use --mmttuunnee==6688002200--4400 for code that needs
           to run relatively well on 68020, 68030 and 68040
           targets.  --mmttuunnee==6688002200--6600 is similar but includes
           68060 targets as well.  These two options select the
           same tuning decisions as --mm6688002200--4400 and --mm6688002200--6600
           respectively.

           gcc defines the macros ____mmcc_a_r_c_h and ____mmcc_a_r_c_h____ when
           tuning for 680x0 architecture _a_r_c_h.  It also defines
           mmcc_a_r_c_h unless either --aannssii or a non-GNU --ssttdd option is
           used.  If gcc is tuning for a range of architectures,
           as selected by --mmttuunnee==6688002200--4400 or --mmttuunnee==6688002200--6600, it
           defines the macros for every architecture in the
           range.

           gcc also defines the macro ____mm_u_a_r_c_h____ when tuning for
           ColdFire microarchitecture _u_a_r_c_h, where _u_a_r_c_h is one
           of the arguments given above.

       --mm6688000000
       --mmcc6688000000
           Generate output for a 68000.  This is the default when
           the compiler is configured for 68000-based systems.
           It is equivalent to --mmaarrcchh==6688000000.

           Use this option for microcontrollers with a 68000 or
           EC000 core, including the 68008, 68302, 68306, 68307,
           68322, 68328 and 68356.

       --mm6688001100
           Generate output for a 68010.  This is the default when
           the compiler is configured for 68010-based systems.
           It is equivalent to --mmaarrcchh==6688001100.

       --mm6688002200
       --mmcc6688002200
           Generate output for a 68020.  This is the default when
           the compiler is configured for 68020-based systems.
           It is equivalent to --mmaarrcchh==6688002200.

       --mm6688003300
           Generate output for a 68030.  This is the default when
           the compiler is configured for 68030-based systems.
           It is equivalent to --mmaarrcchh==6688003300.

       --mm6688004400
           Generate output for a 68040.  This is the default when
           the compiler is configured for 68040-based systems.



gcc-4.74                    2014-06-12                        261





GCC(1)                         GNU                         GCC(1)


           It is equivalent to --mmaarrcchh==6688004400.

           This option inhibits the use of 68881/68882
           instructions that have to be emulated by software on
           the 68040.  Use this option if your 68040 does not
           have code to emulate those instructions.

       --mm6688006600
           Generate output for a 68060.  This is the default when
           the compiler is configured for 68060-based systems.
           It is equivalent to --mmaarrcchh==6688006600.

           This option inhibits the use of 68020 and 68881/68882
           instructions that have to be emulated by software on
           the 68060.  Use this option if your 68060 does not
           have code to emulate those instructions.

       --mmccppuu3322
           Generate output for a CPU32.  This is the default when
           the compiler is configured for CPU32-based systems.
           It is equivalent to --mmaarrcchh==ccppuu3322.

           Use this option for microcontrollers with a CPU32 or
           CPU32+ core, including the 68330, 68331, 68332, 68333,
           68334, 68336, 68340, 68341, 68349 and 68360.

       --mm55220000
           Generate output for a 520X ColdFire CPU.  This is the
           default when the compiler is configured for 520X-based
           systems.  It is equivalent to --mmccppuu==55220066, and is now
           deprecated in favor of that option.

           Use this option for microcontroller with a 5200 core,
           including the MCF5202, MCF5203, MCF5204 and MCF5206.

       --mm55220066ee
           Generate output for a 5206e ColdFire CPU.  The option
           is now deprecated in favor of the equivalent
           --mmccppuu==55220066ee.

       --mm552288xx
           Generate output for a member of the ColdFire 528X
           family.  The option is now deprecated in favor of the
           equivalent --mmccppuu==552288xx.

       --mm55330077
           Generate output for a ColdFire 5307 CPU.  The option
           is now deprecated in favor of the equivalent
           --mmccppuu==55330077.

       --mm55440077
           Generate output for a ColdFire 5407 CPU.  The option
           is now deprecated in favor of the equivalent
           --mmccppuu==55440077.



gcc-4.74                    2014-06-12                        262





GCC(1)                         GNU                         GCC(1)


       --mmccffvv44ee
           Generate output for a ColdFire V4e family CPU (e.g.
           547x/548x).  This includes use of hardware floating-
           point instructions.  The option is equivalent to
           --mmccppuu==554477xx, and is now deprecated in favor of that
           option.

       --mm6688002200--4400
           Generate output for a 68040, without using any of the
           new instructions.  This results in code that can run
           relatively efficiently on either a 68020/68881 or a
           68030 or a 68040.  The generated code does use the
           68881 instructions that are emulated on the 68040.

           The option is equivalent to --mmaarrcchh==6688002200
           --mmttuunnee==6688002200--4400.

       --mm6688002200--6600
           Generate output for a 68060, without using any of the
           new instructions.  This results in code that can run
           relatively efficiently on either a 68020/68881 or a
           68030 or a 68040.  The generated code does use the
           68881 instructions that are emulated on the 68060.

           The option is equivalent to --mmaarrcchh==6688002200
           --mmttuunnee==6688002200--6600.

       --mmhhaarrdd--ffllooaatt
       --mm6688888811
           Generate floating-point instructions.  This is the
           default for 68020 and above, and for ColdFire devices
           that have an FPU.  It defines the macro ____HHAAVVEE__6688888811____
           on M680x0 targets and ____mmccffffppuu____ on ColdFire targets.

       --mmssoofftt--ffllooaatt
           Do not generate floating-point instructions; use
           library calls instead.  This is the default for 68000,
           68010, and 68832 targets.  It is also the default for
           ColdFire devices that have no FPU.

       --mmddiivv
       --mmnnoo--ddiivv
           Generate (do not generate) ColdFire hardware divide
           and remainder instructions.  If --mmaarrcchh is used without
           --mmccppuu, the default is "on" for ColdFire architectures
           and "off" for M680x0 architectures.  Otherwise, the
           default is taken from the target CPU (either the
           default CPU, or the one specified by --mmccppuu).  For
           example, the default is "off" for --mmccppuu==55220066 and "on"
           for --mmccppuu==55220066ee.

           gcc defines the macro ____mmccffhhwwddiivv____ when this option is
           enabled.




gcc-4.74                    2014-06-12                        263





GCC(1)                         GNU                         GCC(1)


       --mmsshhoorrtt
           Consider type "int" to be 16 bits wide, like "short
           int".  Additionally, parameters passed on the stack
           are also aligned to a 16-bit boundary even on targets
           whose API mandates promotion to 32-bit.

       --mmnnoo--sshhoorrtt
           Do not consider type "int" to be 16 bits wide.  This
           is the default.

       --mmnnoobbiittffiieelldd
       --mmnnoo--bbiittffiieelldd
           Do not use the bit-field instructions.  The --mm6688000000,
           --mmccppuu3322 and --mm55220000 options imply --mmnnoobbiittffiieelldd.

       --mmbbiittffiieelldd
           Do use the bit-field instructions.  The --mm6688002200 option
           implies --mmbbiittffiieelldd.  This is the default if you use a
           configuration designed for a 68020.

       --mmrrttdd
           Use a different function-calling convention, in which
           functions that take a fixed number of arguments return
           with the "rtd" instruction, which pops their arguments
           while returning.  This saves one instruction in the
           caller since there is no need to pop the arguments
           there.

           This calling convention is incompatible with the one
           normally used on Unix, so you cannot use it if you
           need to call libraries compiled with the Unix
           compiler.

           Also, you must provide function prototypes for all
           functions that take variable numbers of arguments
           (including "printf"); otherwise incorrect code will be
           generated for calls to those functions.

           In addition, seriously incorrect code will result if
           you call a function with too many arguments.
           (Normally, extra arguments are harmlessly ignored.)

           The "rtd" instruction is supported by the 68010,
           68020, 68030, 68040, 68060 and CPU32 processors, but
           not by the 68000 or 5200.

       --mmnnoo--rrttdd
           Do not use the calling conventions selected by --mmrrttdd.
           This is the default.

       --mmaalliiggnn--iinntt
       --mmnnoo--aalliiggnn--iinntt
           Control whether GCC aligns "int", "long", "long long",
           "float", "double", and "long double" variables on a



gcc-4.74                    2014-06-12                        264





GCC(1)                         GNU                         GCC(1)


           32-bit boundary (--mmaalliiggnn--iinntt) or a 16-bit boundary
           (--mmnnoo--aalliiggnn--iinntt).  Aligning variables on 32-bit
           boundaries produces code that runs somewhat faster on
           processors with 32-bit busses at the expense of more
           memory.

           WWaarrnniinngg:: if you use the --mmaalliiggnn--iinntt switch, GCC will
           align structures containing the above types
           differently than most published application binary
           interface specifications for the m68k.

       --mmppccrreell
           Use the pc-relative addressing mode of the 68000
           directly, instead of using a global offset table.  At
           present, this option implies --ffppiicc, allowing at most a
           16-bit offset for pc-relative addressing.  --ffPPIICC is
           not presently supported with --mmppccrreell, though this
           could be supported for 68020 and higher processors.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           Do not (do) assume that unaligned memory references
           will be handled by the system.

       --mmsseepp--ddaattaa
           Generate code that allows the data segment to be
           located in a different area of memory from the text
           segment.  This allows for execute in place in an
           environment without virtual memory management.  This
           option implies --ffPPIICC.

       --mmnnoo--sseepp--ddaattaa
           Generate code that assumes that the data segment
           follows the text segment.  This is the default.

       --mmiidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the
           library ID method.  This allows for execute in place
           and shared libraries in an environment without virtual
           memory management.  This option implies --ffPPIICC.

       --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that doesn't assume ID based shared
           libraries are being used.  This is the default.

       --mmsshhaarreedd--lliibbrraarryy--iidd==nn
           Specified the identification number of the ID based
           shared library being compiled.  Specifying a value of
           0 will generate more compact code, specifying other
           values will force the allocation of that number to the
           current library but is no more space or time efficient
           than omitting this option.





gcc-4.74                    2014-06-12                        265





GCC(1)                         GNU                         GCC(1)


       --mmxxggoott
       --mmnnoo--xxggoott
           When generating position-independent code for
           ColdFire, generate code that works if the GOT has more
           than 8192 entries.  This code is larger and slower
           than code generated without this option.  On M680x0
           processors, this option is not needed; --ffPPIICC suffices.

           GCC normally uses a single instruction to load values
           from the GOT.  While this is relatively efficient, it
           only works if the GOT is smaller than about 64k.
           Anything larger causes the linker to report an error
           such as:

                   relocation truncated to fit: R_68K_GOT16O foobar

           If this happens, you should recompile your code with
           --mmxxggoott.  It should then work with very large GOTs.
           However, code generated with --mmxxggoott is less efficient,
           since it takes 4 instructions to fetch the value of a
           global symbol.

           Note that some linkers, including newer versions of
           the GNU linker, can create multiple GOTs and sort GOT
           entries.  If you have such a linker, you should only
           need to use --mmxxggoott when compiling a single object file
           that accesses more than 8192 GOT entries.  Very few
           do.

           These options have no effect unless GCC is generating
           position-independent code.

       _M_C_o_r_e _O_p_t_i_o_n_s

       These are the --mm options defined for the Motorola M*Core
       processors.

       --mmhhaarrddlliitt
       --mmnnoo--hhaarrddlliitt
           Inline constants into the code stream if it can be
           done in two instructions or less.

       --mmddiivv
       --mmnnoo--ddiivv
           Use the divide instruction.  (Enabled by default).

       --mmrreellaaxx--iimmmmeeddiiaattee
       --mmnnoo--rreellaaxx--iimmmmeeddiiaattee
           Allow arbitrary sized immediates in bit operations.

       --mmwwiiddee--bbiittffiieellddss
       --mmnnoo--wwiiddee--bbiittffiieellddss
           Always treat bit-fields as int-sized.




gcc-4.74                    2014-06-12                        266





GCC(1)                         GNU                         GCC(1)


       --mm44bbyyttee--ffuunnccttiioonnss
       --mmnnoo--44bbyyttee--ffuunnccttiioonnss
           Force all functions to be aligned to a 4-byte
           boundary.

       --mmccaallllggrraapphh--ddaattaa
       --mmnnoo--ccaallllggrraapphh--ddaattaa
           Emit callgraph information.

       --mmssllooww--bbyytteess
       --mmnnoo--ssllooww--bbyytteess
           Prefer word access when reading byte quantities.

       --mmlliittttllee--eennddiiaann
       --mmbbiigg--eennddiiaann
           Generate code for a little-endian target.

       --mm221100
       --mm334400
           Generate code for the 210 processor.

       --mmnnoo--llssiimm
           Assume that runtime support has been provided and so
           omit the simulator library (_l_i_b_s_i_m_._a_) from the linker
           command line.

       --mmssttaacckk--iinnccrreemmeenntt==_s_i_z_e
           Set the maximum amount for a single stack increment
           operation.  Large values can increase the speed of
           programs that contain functions that need a large
           amount of stack space, but they can also trigger a
           segmentation fault if the stack is extended too much.
           The default value is 0x1000.

       _M_e_P _O_p_t_i_o_n_s

       --mmaabbssddiiffff
           Enables the "abs" instruction, which is the absolute
           difference between two registers.

       --mmaallll--ooppttss
           Enables all the optional instructions - average,
           multiply, divide, bit operations, leading zero,
           absolute difference, min/max, clip, and saturation.

       --mmaavveerraaggee
           Enables the "ave" instruction, which computes the
           average of two registers.

       --mmbbaasseedd==_n
           Variables of size _n bytes or smaller will be placed in
           the ".based" section by default.  Based variables use
           the $tp register as a base register, and there is a
           128-byte limit to the ".based" section.



gcc-4.74                    2014-06-12                        267





GCC(1)                         GNU                         GCC(1)


       --mmbbiittooppss
           Enables the bit operation instructions - bit test
           ("btstm"), set ("bsetm"), clear ("bclrm"), invert
           ("bnotm"), and test-and-set ("tas").

       --mmcc==_n_a_m_e
           Selects which section constant data will be placed in.
           _n_a_m_e may be "tiny", "near", or "far".

       --mmcclliipp
           Enables the "clip" instruction.  Note that "-mclip" is
           not useful unless you also provide "-mminmax".

       --mmccoonnffiigg==_n_a_m_e
           Selects one of the build-in core configurations.  Each
           MeP chip has one or more modules in it; each module
           has a core CPU and a variety of coprocessors, optional
           instructions, and peripherals.  The "MeP-Integrator"
           tool, not part of GCC, provides these configurations
           through this option; using this option is the same as
           using all the corresponding command-line options.  The
           default configuration is "default".

       --mmccoopp
           Enables the coprocessor instructions.  By default,
           this is a 32-bit coprocessor.  Note that the
           coprocessor is normally enabled via the "-mconfig="
           option.

       --mmccoopp3322
           Enables the 32-bit coprocessor's instructions.

       --mmccoopp6644
           Enables the 64-bit coprocessor's instructions.

       --mmiivvcc22
           Enables IVC2 scheduling.  IVC2 is a 64-bit VLIW
           coprocessor.

       --mmddcc
           Causes constant variables to be placed in the ".near"
           section.

       --mmddiivv
           Enables the "div" and "divu" instructions.

       --mmeebb
           Generate big-endian code.

       --mmeell
           Generate little-endian code.

       --mmiioo--vvoollaattiillee
           Tells the compiler that any variable marked with the



gcc-4.74                    2014-06-12                        268





GCC(1)                         GNU                         GCC(1)


           "io" attribute is to be considered volatile.

       --mmll Causes variables to be assigned to the ".far" section
           by default.

       --mmlleeaaddzz
           Enables the "leadz" (leading zero) instruction.

       --mmmm Causes variables to be assigned to the ".near" section
           by default.

       --mmmmiinnmmaaxx
           Enables the "min" and "max" instructions.

       --mmmmuulltt
           Enables the multiplication and multiply-accumulate
           instructions.

       --mmnnoo--ooppttss
           Disables all the optional instructions enabled by
           "-mall-opts".

       --mmrreeppeeaatt
           Enables the "repeat" and "erepeat" instructions, used
           for low-overhead looping.

       --mmss Causes all variables to default to the ".tiny"
           section.  Note that there is a 65536-byte limit to
           this section.  Accesses to these variables use the %gp
           base register.

       --mmssaattuurr
           Enables the saturation instructions.  Note that the
           compiler does not currently generate these itself, but
           this option is included for compatibility with other
           tools, like "as".

       --mmssddrraamm
           Link the SDRAM-based runtime instead of the default
           ROM-based runtime.

       --mmssiimm
           Link the simulator runtime libraries.

       --mmssiimmnnoovveecc
           Link the simulator runtime libraries, excluding built-
           in support for reset and exception vectors and tables.

       --mmttff
           Causes all functions to default to the ".far" section.
           Without this option, functions default to the ".near"
           section.





gcc-4.74                    2014-06-12                        269





GCC(1)                         GNU                         GCC(1)


       --mmttiinnyy==_n
           Variables that are _n bytes or smaller will be
           allocated to the ".tiny" section.  These variables use
           the $gp base register.  The default for this option is
           4, but note that there's a 65536-byte limit to the
           ".tiny" section.

       _M_i_c_r_o_B_l_a_z_e _O_p_t_i_o_n_s

       --mmssoofftt--ffllooaatt
           Use software emulation for floating point (default).

       --mmhhaarrdd--ffllooaatt
           Use hardware floating-point instructions.

       --mmmmeemmccppyy
           Do not optimize block moves, use "memcpy".

       --mmnnoo--cclleeaarrbbssss
           This option is deprecated.  Use
           --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss instead.

       --mmccppuu==_c_p_u_-_t_y_p_e
           Use features of and schedule code for given CPU.
           Supported values are in the format vv_X.._Y_Y.._Z, where _X is
           a major version, _Y_Y is the minor version, and _Z is
           compatibility code.  Example values are vv33..0000..aa,
           vv44..0000..bb, vv55..0000..aa, vv55..0000..bb, vv55..0000..bb, vv66..0000..aa.

       --mmxxll--ssoofftt--mmuull
           Use software multiply emulation (default).

       --mmxxll--ssoofftt--ddiivv
           Use software emulation for divides (default).

       --mmxxll--bbaarrrreell--sshhiifftt
           Use the hardware barrel shifter.

       --mmxxll--ppaatttteerrnn--ccoommppaarree
           Use pattern compare instructions.

       --mmssmmaallll--ddiivviiddeess
           Use table lookup optimization for small signed integer
           divisions.

       --mmxxll--ssttaacckk--cchheecckk
           This option is deprecated.  Use -fstack-check instead.

       --mmxxll--ggpp--oopptt
           Use GP relative sdata/sbss sections.

       --mmxxll--mmuullttiippllyy--hhiigghh
           Use multiply high instructions for high part of 32x32
           multiply.



gcc-4.74                    2014-06-12                        270





GCC(1)                         GNU                         GCC(1)


       --mmxxll--ffllooaatt--ccoonnvveerrtt
           Use hardware floating-point conversion instructions.

       --mmxxll--ffllooaatt--ssqqrrtt
           Use hardware floating-point square root instruction.

       --mmxxll--mmooddee--_a_p_p_-_m_o_d_e_l
           Select application model _a_p_p_-_m_o_d_e_l.  Valid models are

           eexxeeccuuttaabbllee
               normal executable (default), uses startup code
               _c_r_t_0_._o.

           xxmmddssttuubb
               for use with Xilinx Microprocessor Debugger (XMD)
               based software intrusive debug agent called
               xmdstub. This uses startup file _c_r_t_1_._o and sets
               the start address of the program to be 0x800.

           bboooottssttrraapp
               for applications that are loaded using a
               bootloader.  This model uses startup file _c_r_t_2_._o
               which does not contain a processor reset vector
               handler. This is suitable for transferring control
               on a processor reset to the bootloader rather than
               the application.

           nnoovveeccttoorrss
               for applications that do not require any of the
               MicroBlaze vectors. This option may be useful for
               applications running within a monitoring
               application. This model uses _c_r_t_3_._o as a startup
               file.

           Option --xxll--mmooddee--_a_p_p_-_m_o_d_e_l is a deprecated alias for
           --mmxxll--mmooddee--_a_p_p_-_m_o_d_e_l.

       _M_I_P_S _O_p_t_i_o_n_s

       --EEBB Generate big-endian code.

       --EELL Generate little-endian code.  This is the default for
           mmiippss**eell--**--** configurations.

       --mmaarrcchh==_a_r_c_h
           Generate code that will run on _a_r_c_h, which can be the
           name of a generic MIPS ISA, or the name of a
           particular processor.  The ISA names are: mmiippss11,
           mmiippss22, mmiippss33, mmiippss44, mmiippss3322, mmiippss3322rr22, mmiippss6644 and
           mmiippss6644rr22.  The processor names are: 44kkcc, 44kkmm, 44kkpp,
           44kksscc, 44kkeecc, 44kkeemm, 44kkeepp, 44kkssdd, 55kkcc, 55kkff, 2200kkcc, 2244kkcc,
           2244kkff22__11, 2244kkff11__11, 2244kkeecc, 2244kkeeff22__11, 2244kkeeff11__11, 3344kkcc,
           3344kkff22__11, 3344kkff11__11, 7744kkcc, 7744kkff22__11, 7744kkff11__11, 7744kkff33__22,
           11000044kkcc, 11000044kkff22__11, 11000044kkff11__11, lloooonnggssoonn22ee, lloooonnggssoonn22ff,



gcc-4.74                    2014-06-12                        271





GCC(1)                         GNU                         GCC(1)


           lloooonnggssoonn33aa, mm44kk, oocctteeoonn, oocctteeoonn++, oocctteeoonn22, oorriioonn,
           rr22000000, rr33000000, rr33990000, rr44000000, rr44440000, rr44660000, rr44665500,
           rr66000000, rr88000000, rrmm77000000, rrmm99000000, rr1100000000, rr1122000000, rr1144000000,
           rr1166000000, ssbb11, ssrr7711000000, vvrr44110000, vvrr44111111, vvrr44112200, vvrr44113300,
           vvrr44330000, vvrr55000000, vvrr55440000, vvrr55550000 and xxllrr.  The special
           value ffrroomm--aabbii selects the most compatible
           architecture for the selected ABI (that is, mmiippss11 for
           32-bit ABIs and mmiippss33 for 64-bit ABIs).

           Native Linux/GNU and IRIX toolchains also support the
           value nnaattiivvee, which selects the best architecture
           option for the host processor.  --mmaarrcchh==nnaattiivvee has no
           effect if GCC does not recognize the processor.

           In processor names, a final 000000 can be abbreviated as
           kk (for example, --mmaarrcchh==rr22kk).  Prefixes are optional,
           and vvrr may be written rr.

           Names of the form _nff22__11 refer to processors with FPUs
           clocked at half the rate of the core, names of the
           form _nff11__11 refer to processors with FPUs clocked at
           the same rate as the core, and names of the form _nff33__22
           refer to processors with FPUs clocked a ratio of 3:2
           with respect to the core.  For compatibility reasons,
           _nff is accepted as a synonym for _nff22__11 while _nxx and _bffxx
           are accepted as synonyms for _nff11__11.

           GCC defines two macros based on the value of this
           option.  The first is __MMIIPPSS__AARRCCHH, which gives the name
           of target architecture, as a string.  The second has
           the form __MMIIPPSS__AARRCCHH___f_o_o, where _f_o_o is the capitalized
           value of __MMIIPPSS__AARRCCHH.  For example, --mmaarrcchh==rr22000000 will
           set __MMIIPPSS__AARRCCHH to ""rr22000000"" and define the macro
           __MMIIPPSS__AARRCCHH__RR22000000.

           Note that the __MMIIPPSS__AARRCCHH macro uses the processor
           names given above.  In other words, it will have the
           full prefix and will not abbreviate 000000 as kk.  In the
           case of ffrroomm--aabbii, the macro names the resolved
           architecture (either ""mmiippss11"" or ""mmiippss33"").  It names
           the default architecture when no --mmaarrcchh option is
           given.

       --mmttuunnee==_a_r_c_h
           Optimize for _a_r_c_h.  Among other things, this option
           controls the way instructions are scheduled, and the
           perceived cost of arithmetic operations.  The list of
           _a_r_c_h values is the same as for --mmaarrcchh.

           When this option is not used, GCC will optimize for
           the processor specified by --mmaarrcchh.  By using --mmaarrcchh
           and --mmttuunnee together, it is possible to generate code
           that will run on a family of processors, but optimize
           the code for one particular member of that family.



gcc-4.74                    2014-06-12                        272





GCC(1)                         GNU                         GCC(1)


           --mmttuunnee defines the macros __MMIIPPSS__TTUUNNEE and
           __MMIIPPSS__TTUUNNEE___f_o_o, which work in the same way as the
           --mmaarrcchh ones described above.

       --mmiippss11
           Equivalent to --mmaarrcchh==mmiippss11.

       --mmiippss22
           Equivalent to --mmaarrcchh==mmiippss22.

       --mmiippss33
           Equivalent to --mmaarrcchh==mmiippss33.

       --mmiippss44
           Equivalent to --mmaarrcchh==mmiippss44.

       --mmiippss3322
           Equivalent to --mmaarrcchh==mmiippss3322.

       --mmiippss3322rr22
           Equivalent to --mmaarrcchh==mmiippss3322rr22.

       --mmiippss6644
           Equivalent to --mmaarrcchh==mmiippss6644.

       --mmiippss6644rr22
           Equivalent to --mmaarrcchh==mmiippss6644rr22.

       --mmiippss1166
       --mmnnoo--mmiippss1166
           Generate (do not generate) MIPS16 code.  If GCC is
           targetting a MIPS32 or MIPS64 architecture, it will
           make use of the MIPS16e ASE.

           MIPS16 code generation can also be controlled on a
           per-function basis by means of "mips16" and "nomips16"
           attributes.

       --mmfflliipp--mmiippss1166
           Generate MIPS16 code on alternating functions.  This
           option is provided for regression testing of mixed
           MIPS16/non-MIPS16 code generation, and is not intended
           for ordinary use in compiling user code.

       --mmiinntteerrlliinnkk--mmiippss1166
       --mmnnoo--iinntteerrlliinnkk--mmiippss1166
           Require (do not require) that non-MIPS16 code be link-
           compatible with MIPS16 code.

           For example, non-MIPS16 code cannot jump directly to
           MIPS16 code; it must either use a call or an indirect
           jump.  --mmiinntteerrlliinnkk--mmiippss1166 therefore disables direct
           jumps unless GCC knows that the target of the jump is
           not MIPS16.



gcc-4.74                    2014-06-12                        273





GCC(1)                         GNU                         GCC(1)


       --mmaabbii==3322
       --mmaabbii==oo6644
       --mmaabbii==nn3322
       --mmaabbii==6644
       --mmaabbii==eeaabbii
           Generate code for the given ABI.

           Note that the EABI has a 32-bit and a 64-bit variant.
           GCC normally generates 64-bit code when you select a
           64-bit architecture, but you can use --mmggpp3322 to get
           32-bit code instead.

           For information about the O64 ABI, see
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//pprroojjeeccttss//mmiippssoo6644--aabbii..hhttmmll>.

           GCC supports a variant of the o32 ABI in which
           floating-point registers are 64 rather than 32 bits
           wide.  You can select this combination with --mmaabbii==3322
           --mmffpp6644.  This ABI relies on the mmtthhcc11 and mmffhhcc11
           instructions and is therefore only supported for
           MIPS32R2 processors.

           The register assignments for arguments and return
           values remain the same, but each scalar value is
           passed in a single 64-bit register rather than a pair
           of 32-bit registers.  For example, scalar floating-
           point values are returned in $$ff00 only, not a $$ff00/$$ff11
           pair.  The set of call-saved registers also remains
           the same, but all 64 bits are saved.

       --mmaabbiiccaallllss
       --mmnnoo--aabbiiccaallllss
           Generate (do not generate) code that is suitable for
           SVR4-style dynamic objects.  --mmaabbiiccaallllss is the default
           for SVR4-based systems.

       --mmsshhaarreedd
       --mmnnoo--sshhaarreedd
           Generate (do not generate) code that is fully
           position-independent, and that can therefore be linked
           into shared libraries.  This option only affects
           --mmaabbiiccaallllss.

           All --mmaabbiiccaallllss code has traditionally been
           position-independent, regardless of options like --ffPPIICC
           and --ffppiicc.  However, as an extension, the GNU
           toolchain allows executables to use absolute accesses
           for locally-binding symbols.  It can also use shorter
           GP initialization sequences and generate direct calls
           to locally-defined functions.  This mode is selected
           by --mmnnoo--sshhaarreedd.

           --mmnnoo--sshhaarreedd depends on binutils 2.16 or higher and
           generates objects that can only be linked by the GNU



gcc-4.74                    2014-06-12                        274





GCC(1)                         GNU                         GCC(1)


           linker.  However, the option does not affect the ABI
           of the final executable; it only affects the ABI of
           relocatable objects.  Using --mmnnoo--sshhaarreedd will generally
           make executables both smaller and quicker.

           --mmsshhaarreedd is the default.

       --mmpplltt
       --mmnnoo--pplltt
           Assume (do not assume) that the static and dynamic
           linkers support PLTs and copy relocations.  This
           option only affects --mmnnoo--sshhaarreedd --mmaabbiiccaallllss.  For the
           n64 ABI, this option has no effect without --mmssyymm3322.

           You can make --mmpplltt the default by configuring GCC with
           ----wwiitthh--mmiippss--pplltt.  The default is --mmnnoo--pplltt otherwise.

       --mmxxggoott
       --mmnnoo--xxggoott
           Lift (do not lift) the usual restrictions on the size
           of the global offset table.

           GCC normally uses a single instruction to load values
           from the GOT.  While this is relatively efficient, it
           will only work if the GOT is smaller than about 64k.
           Anything larger will cause the linker to report an
           error such as:

                   relocation truncated to fit: R_MIPS_GOT16 foobar

           If this happens, you should recompile your code with
           --mmxxggoott.  It should then work with very large GOTs,
           although it will also be less efficient, since it will
           take three instructions to fetch the value of a global
           symbol.

           Note that some linkers can create multiple GOTs.  If
           you have such a linker, you should only need to use
           --mmxxggoott when a single object file accesses more than
           64k's worth of GOT entries.  Very few do.

           These options have no effect unless GCC is generating
           position independent code.

       --mmggpp3322
           Assume that general-purpose registers are 32 bits
           wide.

       --mmggpp6644
           Assume that general-purpose registers are 64 bits
           wide.

       --mmffpp3322
           Assume that floating-point registers are 32 bits wide.



gcc-4.74                    2014-06-12                        275





GCC(1)                         GNU                         GCC(1)


       --mmffpp6644
           Assume that floating-point registers are 64 bits wide.

       --mmhhaarrdd--ffllooaatt
           Use floating-point coprocessor instructions.

       --mmssoofftt--ffllooaatt
           Do not use floating-point coprocessor instructions.
           Implement floating-point calculations using library
           calls instead.

       --mmssiinnggllee--ffllooaatt
           Assume that the floating-point coprocessor only
           supports single-precision operations.

       --mmddoouubbllee--ffllooaatt
           Assume that the floating-point coprocessor supports
           double-precision operations.  This is the default.

       --mmllllsscc
       --mmnnoo--llllsscc
           Use (do not use) llll, sscc, and ssyynncc instructions to
           implement atomic memory built-in functions.  When
           neither option is specified, GCC will use the
           instructions if the target architecture supports them.

           --mmllllsscc is useful if the runtime environment can
           emulate the instructions and --mmnnoo--llllsscc can be useful
           when compiling for nonstandard ISAs.  You can make
           either option the default by configuring GCC with
           ----wwiitthh--llllsscc and ----wwiitthhoouutt--llllsscc respectively.
           ----wwiitthh--llllsscc is the default for some configurations;
           see the installation documentation for details.

       --mmddsspp
       --mmnnoo--ddsspp
           Use (do not use) revision 1 of the MIPS DSP ASE.
             This option defines the preprocessor macro
           ____mmiippss__ddsspp.  It also defines ____mmiippss__ddsspp__rreevv to 1.

       --mmddsspprr22
       --mmnnoo--ddsspprr22
           Use (do not use) revision 2 of the MIPS DSP ASE.
             This option defines the preprocessor macros
           ____mmiippss__ddsspp and ____mmiippss__ddsspprr22.  It also defines
           ____mmiippss__ddsspp__rreevv to 2.

       --mmssmmaarrttmmiippss
       --mmnnoo--ssmmaarrttmmiippss
           Use (do not use) the MIPS SmartMIPS ASE.

       --mmppaaiirreedd--ssiinnggllee
       --mmnnoo--ppaaiirreedd--ssiinnggllee
           Use (do not use) paired-single floating-point



gcc-4.74                    2014-06-12                        276





GCC(1)                         GNU                         GCC(1)


           instructions.
             This option requires hardware floating-point support
           to be enabled.

       --mmddmmxx
       --mmnnoo--mmddmmxx
           Use (do not use) MIPS Digital Media Extension
           instructions.  This option can only be used when
           generating 64-bit code and requires hardware floating-
           point support to be enabled.

       --mmiippss33dd
       --mmnnoo--mmiippss33dd
           Use (do not use) the MIPS-3D ASE.  The option --mmiippss33dd
           implies --mmppaaiirreedd--ssiinnggllee.

       --mmmmtt
       --mmnnoo--mmtt
           Use (do not use) MT Multithreading instructions.

       --mmlloonngg6644
           Force "long" types to be 64 bits wide.  See --mmlloonngg3322
           for an explanation of the default and the way that the
           pointer size is determined.

       --mmlloonngg3322
           Force "long", "int", and pointer types to be 32 bits
           wide.

           The default size of "int"s, "long"s and pointers
           depends on the ABI.  All the supported ABIs use 32-bit
           "int"s.  The n64 ABI uses 64-bit "long"s, as does the
           64-bit EABI; the others use 32-bit "long"s.  Pointers
           are the same size as "long"s, or the same size as
           integer registers, whichever is smaller.

       --mmssyymm3322
       --mmnnoo--ssyymm3322
           Assume (do not assume) that all symbols have 32-bit
           values, regardless of the selected ABI.  This option
           is useful in combination with --mmaabbii==6644 and
           --mmnnoo--aabbiiccaallllss because it allows GCC to generate
           shorter and faster references to symbolic addresses.

       --GG _n_u_m
           Put definitions of externally-visible data in a small
           data section if that data is no bigger than _n_u_m bytes.
           GCC can then access the data more efficiently; see
           --mmggppoopptt for details.

           The default --GG option depends on the configuration.

       --mmllooccaall--ssddaattaa




gcc-4.74                    2014-06-12                        277





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--llooccaall--ssddaattaa
           Extend (do not extend) the --GG behavior to local data
           too, such as to static variables in C.  --mmllooccaall--ssddaattaa
           is the default for all configurations.

           If the linker complains that an application is using
           too much small data, you might want to try rebuilding
           the less performance-critical parts with
           --mmnnoo--llooccaall--ssddaattaa.  You might also want to build large
           libraries with --mmnnoo--llooccaall--ssddaattaa, so that the libraries
           leave more room for the main program.

       --mmeexxtteerrnn--ssddaattaa
       --mmnnoo--eexxtteerrnn--ssddaattaa
           Assume (do not assume) that externally-defined data
           will be in a small data section if that data is within
           the --GG limit.  --mmeexxtteerrnn--ssddaattaa is the default for all
           configurations.

           If you compile a module _M_o_d with --mmeexxtteerrnn--ssddaattaa --GG _n_u_m
           --mmggppoopptt, and _M_o_d references a variable _V_a_r that is no
           bigger than _n_u_m bytes, you must make sure that _V_a_r is
           placed in a small data section.  If _V_a_r is defined by
           another module, you must either compile that module
           with a high-enough --GG setting or attach a "section"
           attribute to _V_a_r's definition.  If _V_a_r is common, you
           must link the application with a high-enough --GG
           setting.

           The easiest way of satisfying these restrictions is to
           compile and link every module with the same --GG option.
           However, you may wish to build a library that supports
           several different small data limits.  You can do this
           by compiling the library with the highest supported --GG
           setting and additionally using --mmnnoo--eexxtteerrnn--ssddaattaa to
           stop the library from making assumptions about
           externally-defined data.

       --mmggppoopptt
       --mmnnoo--ggppoopptt
           Use (do not use) GP-relative accesses for symbols that
           are known to be in a small data section; see --GG,
           --mmllooccaall--ssddaattaa and --mmeexxtteerrnn--ssddaattaa.  --mmggppoopptt is the
           default for all configurations.

           --mmnnoo--ggppoopptt is useful for cases where the $gp register
           might not hold the value of "_gp".  For example, if
           the code is part of a library that might be used in a
           boot monitor, programs that call boot monitor routines
           will pass an unknown value in $gp.  (In such
           situations, the boot monitor itself would usually be
           compiled with --GG00.)

           --mmnnoo--ggppoopptt implies --mmnnoo--llooccaall--ssddaattaa and



gcc-4.74                    2014-06-12                        278





GCC(1)                         GNU                         GCC(1)


           --mmnnoo--eexxtteerrnn--ssddaattaa.

       --mmeemmbbeeddddeedd--ddaattaa
       --mmnnoo--eemmbbeeddddeedd--ddaattaa
           Allocate variables to the read-only data section first
           if possible, then next in the small data section if
           possible, otherwise in data.  This gives slightly
           slower code than the default, but reduces the amount
           of RAM required when executing, and thus may be
           preferred for some embedded systems.

       --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa
       --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa
           Put uninitialized "const" variables in the read-only
           data section.  This option is only meaningful in
           conjunction with --mmeemmbbeeddddeedd--ddaattaa.

       --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g
           Specify whether GCC may generate code that reads from
           executable sections.  There are three possible
           settings:

           --mmccooddee--rreeaaddaabbllee==yyeess
               Instructions may freely access executable
               sections.  This is the default setting.

           --mmccooddee--rreeaaddaabbllee==ppccrreell
               MIPS16 PC-relative load instructions can access
               executable sections, but other instructions must
               not do so.  This option is useful on 4KSc and 4KSd
               processors when the code TLBs have the Read
               Inhibit bit set.  It is also useful on processors
               that can be configured to have a dual
               instruction/data SRAM interface and that, like the
               M4K, automatically redirect PC-relative loads to
               the instruction RAM.

           --mmccooddee--rreeaaddaabbllee==nnoo
               Instructions must not access executable sections.
               This option can be useful on targets that are
               configured to have a dual instruction/data SRAM
               interface but that (unlike the M4K) do not
               automatically redirect PC-relative loads to the
               instruction RAM.

       --mmsspplliitt--aaddddrreesssseess
       --mmnnoo--sspplliitt--aaddddrreesssseess
           Enable (disable) use of the "%hi()" and "%lo()"
           assembler relocation operators.  This option has been
           superseded by --mmeexxpplliicciitt--rreellooccss but is retained for
           backwards compatibility.

       --mmeexxpplliicciitt--rreellooccss




gcc-4.74                    2014-06-12                        279





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--eexxpplliicciitt--rreellooccss
           Use (do not use) assembler relocation operators when
           dealing with symbolic addresses.  The alternative,
           selected by --mmnnoo--eexxpplliicciitt--rreellooccss, is to use assembler
           macros instead.

           --mmeexxpplliicciitt--rreellooccss is the default if GCC was configured
           to use an assembler that supports relocation
           operators.

       --mmcchheecckk--zzeerroo--ddiivviissiioonn
       --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn
           Trap (do not trap) on integer division by zero.

           The default is --mmcchheecckk--zzeerroo--ddiivviissiioonn.

       --mmddiivviiddee--ttrraappss
       --mmddiivviiddee--bbrreeaakkss
           MIPS systems check for division by zero by generating
           either a conditional trap or a break instruction.
           Using traps results in smaller code, but is only
           supported on MIPS II and later.  Also, some versions
           of the Linux kernel have a bug that prevents trap from
           generating the proper signal ("SIGFPE").  Use
           --mmddiivviiddee--ttrraappss to allow conditional traps on
           architectures that support them and --mmddiivviiddee--bbrreeaakkss to
           force the use of breaks.

           The default is usually --mmddiivviiddee--ttrraappss, but this can be
           overridden at configure time using
           ----wwiitthh--ddiivviiddee==bbrreeaakkss.  Divide-by-zero checks can be
           completely disabled using --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn.

       --mmmmeemmccppyy
       --mmnnoo--mmeemmccppyy
           Force (do not force) the use of "memcpy()" for non-
           trivial block moves.  The default is --mmnnoo--mmeemmccppyy,
           which allows GCC to inline most constant-sized copies.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Disable (do not disable) use of the "jal" instruction.
           Calling functions using "jal" is more efficient but
           requires the caller and callee to be in the same 256
           megabyte segment.

           This option has no effect on abicalls code.  The
           default is --mmnnoo--lloonngg--ccaallllss.

       --mmmmaadd
       --mmnnoo--mmaadd
           Enable (disable) use of the "mad", "madu" and "mul"
           instructions, as provided by the R4650 ISA.




gcc-4.74                    2014-06-12                        280





GCC(1)                         GNU                         GCC(1)


       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable (disable) use of the floating-point multiply-
           accumulate instructions, when they are available.  The
           default is --mmffuusseedd--mmaadddd.

           When multiply-accumulate instructions are used, the
           intermediate product is calculated to infinite
           precision and is not subject to the FCSR Flush to Zero
           bit.  This may be undesirable in some circumstances.

       --nnooccpppp
           Tell the MIPS assembler to not run its preprocessor
           over user assembler files (with a ..ss suffix) when
           assembling them.

       --mmffiixx--2244kk
       --mmnnoo--ffiixx--2244kk
           Work around the 24K E48 (lost data on stores during
           refill) errata.  The workarounds are implemented by
           the assembler rather than by GCC.

       --mmffiixx--rr44000000
       --mmnnoo--ffiixx--rr44000000
           Work around certain R4000 CPU errata:

           -   A double-word or a variable shift may give an
               incorrect result if executed immediately after
               starting an integer division.

           -   A double-word or a variable shift may give an
               incorrect result if executed while an integer
               multiplication is in progress.

           -   An integer division may give an incorrect result
               if started in a delay slot of a taken branch or a
               jump.

       --mmffiixx--rr44440000
       --mmnnoo--ffiixx--rr44440000
           Work around certain R4400 CPU errata:

           -   A double-word or a variable shift may give an
               incorrect result if executed immediately after
               starting an integer division.

       --mmffiixx--rr1100000000
       --mmnnoo--ffiixx--rr1100000000
           Work around certain R10000 errata:

           -   "ll"/"sc" sequences may not behave atomically on
               revisions prior to 3.0.  They may deadlock on
               revisions 2.6 and earlier.




gcc-4.74                    2014-06-12                        281





GCC(1)                         GNU                         GCC(1)


           This option can only be used if the target
           architecture supports branch-likely instructions.
           --mmffiixx--rr1100000000 is the default when --mmaarrcchh==rr1100000000 is
           used; --mmnnoo--ffiixx--rr1100000000 is the default otherwise.

       --mmffiixx--vvrr44112200
       --mmnnoo--ffiixx--vvrr44112200
           Work around certain VR4120 errata:

           -   "dmultu" does not always produce the correct
               result.

           -   "div" and "ddiv" do not always produce the correct
               result if one of the operands is negative.

           The workarounds for the division errata rely on
           special functions in _l_i_b_g_c_c_._a.  At present, these
           functions are only provided by the "mips64vr*-elf"
           configurations.

           Other VR4120 errata require a nop to be inserted
           between certain pairs of instructions.  These errata
           are handled by the assembler, not by GCC itself.

       --mmffiixx--vvrr44113300
           Work around the VR4130 "mflo"/"mfhi" errata.  The
           workarounds are implemented by the assembler rather
           than by GCC, although GCC will avoid using "mflo" and
           "mfhi" if the VR4130 "macc", "macchi", "dmacc" and
           "dmacchi" instructions are available instead.

       --mmffiixx--ssbb11
       --mmnnoo--ffiixx--ssbb11
           Work around certain SB-1 CPU core errata.  (This flag
           currently works around the SB-1 revision 2 "F1" and
           "F2" floating-point errata.)

       --mmrr1100kk--ccaacchhee--bbaarrrriieerr==_s_e_t_t_i_n_g
           Specify whether GCC should insert cache barriers to
           avoid the side-effects of speculation on R10K
           processors.

           In common with many processors, the R10K tries to
           predict the outcome of a conditional branch and
           speculatively executes instructions from the "taken"
           branch.  It later aborts these instructions if the
           predicted outcome was wrong.  However, on the R10K,
           even aborted instructions can have side effects.

           This problem only affects kernel stores and, depending
           on the system, kernel loads.  As an example, a
           speculatively-executed store may load the target
           memory into cache and mark the cache line as dirty,
           even if the store itself is later aborted.  If a DMA



gcc-4.74                    2014-06-12                        282





GCC(1)                         GNU                         GCC(1)


           operation writes to the same area of memory before the
           "dirty" line is flushed, the cached data will
           overwrite the DMA-ed data.  See the R10K processor
           manual for a full description, including other
           potential problems.

           One workaround is to insert cache barrier instructions
           before every memory access that might be speculatively
           executed and that might have side effects even if
           aborted.  --mmrr1100kk--ccaacchhee--bbaarrrriieerr==_s_e_t_t_i_n_g controls GCC's
           implementation of this workaround.  It assumes that
           aborted accesses to any byte in the following regions
           will not have side effects:

           1.  the memory occupied by the current function's
               stack frame;

           2.  the memory occupied by an incoming stack argument;

           3.  the memory occupied by an object with a link-time-
               constant address.

           It is the kernel's responsibility to ensure that
           speculative accesses to these regions are indeed safe.

           If the input program contains a function declaration
           such as:

                   void foo (void);

           then the implementation of "foo" must allow "j foo"
           and "jal foo" to be executed speculatively.  GCC
           honors this restriction for functions it compiles
           itself.  It expects non-GCC functions (such as hand-
           written assembly code) to do the same.

           The option has three forms:

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==llooaadd--ssttoorree
               Insert a cache barrier before a load or store that
               might be speculatively executed and that might
               have side effects even if aborted.

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==ssttoorree
               Insert a cache barrier before a store that might
               be speculatively executed and that might have side
               effects even if aborted.

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==nnoonnee
               Disable the insertion of cache barriers.  This is
               the default setting.

       --mmfflluusshh--ffuunncc==_f_u_n_c




gcc-4.74                    2014-06-12                        283





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--fflluusshh--ffuunncc
           Specifies the function to call to flush the I and D
           caches, or to not call any such function.  If called,
           the function must take the same arguments as the
           common "_flush_func()", that is, the address of the
           memory range for which the cache is being flushed, the
           size of the memory range, and the number 3 (to flush
           both caches).  The default depends on the target GCC
           was configured for, but commonly is either __fflluusshh__ffuunncc
           or ____ccppuu__fflluusshh.

       mmbbrraanncchh--ccoosstt==_n_u_m
           Set the cost of branches to roughly _n_u_m "simple"
           instructions.  This cost is only a heuristic and is
           not guaranteed to produce consistent results across
           releases.  A zero cost redundantly selects the
           default, which is based on the --mmttuunnee setting.

       --mmbbrraanncchh--lliikkeellyy
       --mmnnoo--bbrraanncchh--lliikkeellyy
           Enable or disable use of Branch Likely instructions,
           regardless of the default for the selected
           architecture.  By default, Branch Likely instructions
           may be generated if they are supported by the selected
           architecture.  An exception is for the MIPS32 and
           MIPS64 architectures and processors that implement
           those architectures; for those, Branch Likely
           instructions will not be generated by default because
           the MIPS32 and MIPS64 architectures specifically
           deprecate their use.

       --mmffpp--eexxcceeppttiioonnss
       --mmnnoo--ffpp--eexxcceeppttiioonnss
           Specifies whether FP exceptions are enabled.  This
           affects how we schedule FP instructions for some
           processors.  The default is that FP exceptions are
           enabled.

           For instance, on the SB-1, if FP exceptions are
           disabled, and we are emitting 64-bit code, then we can
           use both FP pipes.  Otherwise, we can only use one FP
           pipe.

       --mmvvrr44113300--aalliiggnn
       --mmnnoo--vvrr44113300--aalliiggnn
           The VR4130 pipeline is two-way superscalar, but can
           only issue two instructions together if the first one
           is 8-byte aligned.  When this option is enabled, GCC
           will align pairs of instructions that it thinks should
           execute in parallel.

           This option only has an effect when optimizing for the
           VR4130.  It normally makes code faster, but at the
           expense of making it bigger.  It is enabled by default



gcc-4.74                    2014-06-12                        284





GCC(1)                         GNU                         GCC(1)


           at optimization level --OO33.

       --mmssyynnccii
       --mmnnoo--ssyynnccii
           Enable (disable) generation of "synci" instructions on
           architectures that support it.  The "synci"
           instructions (if enabled) will be generated when
           "__builtin___clear_cache()" is compiled.

           This option defaults to "-mno-synci", but the default
           can be overridden by configuring with "--with-synci".

           When compiling code for single processor systems, it
           is generally safe to use "synci".  However, on many
           multi-core (SMP) systems, it will not invalidate the
           instruction caches on all cores and may lead to
           undefined behavior.

       --mmrreellaaxx--ppiicc--ccaallllss
       --mmnnoo--rreellaaxx--ppiicc--ccaallllss
           Try to turn PIC calls that are normally dispatched via
           register $25 into direct calls.  This is only possible
           if the linker can resolve the destination at link-time
           and if the destination is within range for a direct
           call.

           --mmrreellaaxx--ppiicc--ccaallllss is the default if GCC was configured
           to use an assembler and a linker that supports the
           ".reloc" assembly directive and "-mexplicit-relocs" is
           in effect.  With "-mno-explicit-relocs", this
           optimization can be performed by the assembler and the
           linker alone without help from the compiler.

       --mmmmccoouunntt--rraa--aaddddrreessss
       --mmnnoo--mmccoouunntt--rraa--aaddddrreessss
           Emit (do not emit) code that allows "_mcount" to
           modify the calling function's return address.  When
           enabled, this option extends the usual "_mcount"
           interface with a new _r_a_-_a_d_d_r_e_s_s parameter, which has
           type "intptr_t *" and is passed in register $12.
           "_mcount" can then modify the return address by doing
           both of the following:

           *   Returning the new address in register $31.

           *   Storing the new address in "*ra-address", if _r_a_-
               _a_d_d_r_e_s_s is nonnull.

           The default is --mmnnoo--mmccoouunntt--rraa--aaddddrreessss.

       _M_M_I_X _O_p_t_i_o_n_s

       These options are defined for the MMIX:




gcc-4.74                    2014-06-12                        285





GCC(1)                         GNU                         GCC(1)


       --mmlliibbffuunnccss
       --mmnnoo--lliibbffuunnccss
           Specify that intrinsic library functions are being
           compiled, passing all values in registers, no matter
           the size.

       --mmeeppssiilloonn
       --mmnnoo--eeppssiilloonn
           Generate floating-point comparison instructions that
           compare with respect to the "rE" epsilon register.

       --mmaabbii==mmmmiixxwwaarree
       --mmaabbii==ggnnuu
           Generate code that passes function parameters and
           return values that (in the called function) are seen
           as registers $0 and up, as opposed to the GNU ABI
           which uses global registers $231 and up.

       --mmzzeerroo--eexxtteenndd
       --mmnnoo--zzeerroo--eexxtteenndd
           When reading data from memory in sizes shorter than 64
           bits, use (do not use) zero-extending load
           instructions by default, rather than sign-extending
           ones.

       --mmkknnuutthhddiivv
       --mmnnoo--kknnuutthhddiivv
           Make the result of a division yielding a remainder
           have the same sign as the divisor.  With the default,
           --mmnnoo--kknnuutthhddiivv, the sign of the remainder follows the
           sign of the dividend.  Both methods are arithmetically
           valid, the latter being almost exclusively used.

       --mmttoopplleevveell--ssyymmbboollss
       --mmnnoo--ttoopplleevveell--ssyymmbboollss
           Prepend (do not prepend) a :: to all global symbols, so
           the assembly code can be used with the "PREFIX"
           assembly directive.

       --mmeellff
           Generate an executable in the ELF format, rather than
           the default mmmmoo format used by the mmmmiixx simulator.

       --mmbbrraanncchh--pprreeddiicctt
       --mmnnoo--bbrraanncchh--pprreeddiicctt
           Use (do not use) the probable-branch instructions,
           when static branch prediction indicates a probable
           branch.

       --mmbbaassee--aaddddrreesssseess
       --mmnnoo--bbaassee--aaddddrreesssseess
           Generate (do not generate) code that uses _b_a_s_e
           _a_d_d_r_e_s_s_e_s.  Using a base address automatically
           generates a request (handled by the assembler and the



gcc-4.74                    2014-06-12                        286





GCC(1)                         GNU                         GCC(1)


           linker) for a constant to be set up in a global
           register.  The register is used for one or more base
           address requests within the range 0 to 255 from the
           value held in the register.  The generally leads to
           short and fast code, but the number of different data
           items that can be addressed is limited.  This means
           that a program that uses lots of static data may
           require --mmnnoo--bbaassee--aaddddrreesssseess.

       --mmssiinnggllee--eexxiitt
       --mmnnoo--ssiinnggllee--eexxiitt
           Force (do not force) generated code to have a single
           exit point in each function.

       _M_N_1_0_3_0_0 _O_p_t_i_o_n_s

       These --mm options are defined for Matsushita MN10300
       architectures:

       --mmmmuulltt--bbuugg
           Generate code to avoid bugs in the multiply
           instructions for the MN10300 processors.  This is the
           default.

       --mmnnoo--mmuulltt--bbuugg
           Do not generate code to avoid bugs in the multiply
           instructions for the MN10300 processors.

       --mmaamm3333
           Generate code using features specific to the AM33
           processor.

       --mmnnoo--aamm3333
           Do not generate code using features specific to the
           AM33 processor.  This is the default.

       --mmaamm3333--22
           Generate code using features specific to the AM33/2.0
           processor.

       --mmaamm3344
           Generate code using features specific to the AM34
           processor.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Use the timing characteristics of the indicated CPU
           type when scheduling instructions.  This does not
           change the targeted processor type.  The CPU type must
           be one of mmnn1100330000, aamm3333, aamm3333--22 or aamm3344.

       --mmrreettuurrnn--ppooiinntteerr--oonn--dd00
           When generating a function that returns a pointer,
           return the pointer in both "a0" and "d0".  Otherwise,
           the pointer is returned only in a0, and attempts to



gcc-4.74                    2014-06-12                        287





GCC(1)                         GNU                         GCC(1)


           call such functions without a prototype would result
           in errors.  Note that this option is on by default;
           use --mmnnoo--rreettuurrnn--ppooiinntteerr--oonn--dd00 to disable it.

       --mmnnoo--ccrrtt00
           Do not link in the C run-time initialization object
           file.

       --mmrreellaaxx
           Indicate to the linker that it should perform a
           relaxation optimization pass to shorten branches,
           calls and absolute memory addresses.  This option only
           has an effect when used on the command line for the
           final link step.

           This option makes symbolic debugging impossible.

       --mmlliiww
           Allow the compiler to generate _L_o_n_g _I_n_s_t_r_u_c_t_i_o_n _W_o_r_d
           instructions if the target is the AAMM3333 or later.  This
           is the default.  This option defines the preprocessor
           macro ____LLIIWW____.

       --mmnnoolliiww
           Do not allow the compiler to generate _L_o_n_g _I_n_s_t_r_u_c_t_i_o_n
           _W_o_r_d instructions.  This option defines the
           preprocessor macro ____NNOO__LLIIWW____.

       --mmsseettllbb
           Allow the compiler to generate the _S_E_T_L_B and _L_c_c
           instructions if the target is the AAMM3333 or later.  This
           is the default.  This option defines the preprocessor
           macro ____SSEETTLLBB____.

       --mmnnoosseettllbb
           Do not allow the compiler to generate _S_E_T_L_B or _L_c_c
           instructions.  This option defines the preprocessor
           macro ____NNOO__SSEETTLLBB____.

       _P_D_P_-_1_1 _O_p_t_i_o_n_s

       These options are defined for the PDP-11:

       --mmffppuu
           Use hardware FPP floating point.  This is the default.
           (FIS floating point on the PDP-11/40 is not
           supported.)

       --mmssoofftt--ffllooaatt
           Do not use hardware floating point.

       --mmaacc00
           Return floating-point results in ac0 (fr0 in Unix
           assembler syntax).



gcc-4.74                    2014-06-12                        288





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--aacc00
           Return floating-point results in memory.  This is the
           default.

       --mm4400
           Generate code for a PDP-11/40.

       --mm4455
           Generate code for a PDP-11/45.  This is the default.

       --mm1100
           Generate code for a PDP-11/10.

       --mmbbccooppyy--bbuuiillttiinn
           Use inline "movmemhi" patterns for copying memory.
           This is the default.

       --mmbbccooppyy
           Do not use inline "movmemhi" patterns for copying
           memory.

       --mmiinntt1166
       --mmnnoo--iinntt3322
           Use 16-bit "int".  This is the default.

       --mmiinntt3322
       --mmnnoo--iinntt1166
           Use 32-bit "int".

       --mmffllooaatt6644
       --mmnnoo--ffllooaatt3322
           Use 64-bit "float".  This is the default.

       --mmffllooaatt3322
       --mmnnoo--ffllooaatt6644
           Use 32-bit "float".

       --mmaabbsshhii
           Use "abshi2" pattern.  This is the default.

       --mmnnoo--aabbsshhii
           Do not use "abshi2" pattern.

       --mmbbrraanncchh--eexxppeennssiivvee
           Pretend that branches are expensive.  This is for
           experimenting with code generation only.

       --mmbbrraanncchh--cchheeaapp
           Do not pretend that branches are expensive.  This is
           the default.

       --mmuunniixx--aassmm
           Use Unix assembler syntax.  This is the default when
           configured for ppddpp1111--**--bbssdd.



gcc-4.74                    2014-06-12                        289





GCC(1)                         GNU                         GCC(1)


       --mmddeecc--aassmm
           Use DEC assembler syntax.  This is the default when
           configured for any PDP-11 target other than
           ppddpp1111--**--bbssdd.

       _p_i_c_o_C_h_i_p _O_p_t_i_o_n_s

       These --mm options are defined for picoChip implementations:

       --mmaaee==_a_e___t_y_p_e
           Set the instruction set, register set, and instruction
           scheduling parameters for array element type _a_e___t_y_p_e.
           Supported values for _a_e___t_y_p_e are AANNYY, MMUULL, and MMAACC.

           --mmaaee==AANNYY selects a completely generic AE type.  Code
           generated with this option will run on any of the
           other AE types.  The code will not be as efficient as
           it would be if compiled for a specific AE type, and
           some types of operation (e.g., multiplication) will
           not work properly on all types of AE.

           --mmaaee==MMUULL selects a MUL AE type.  This is the most
           useful AE type for compiled code, and is the default.

           --mmaaee==MMAACC selects a DSP-style MAC AE.  Code compiled
           with this option may suffer from poor performance of
           byte (char) manipulation, since the DSP AE does not
           provide hardware support for byte load/stores.

       --mmssyymmbbooll--aass--aaddddrreessss
           Enable the compiler to directly use a symbol name as
           an address in a load/store instruction, without first
           loading it into a register.  Typically, the use of
           this option will generate larger programs, which run
           faster than when the option isn't used.  However, the
           results vary from program to program, so it is left as
           a user option, rather than being permanently enabled.

       --mmnnoo--iinneeffffiicciieenntt--wwaarrnniinnggss
           Disables warnings about the generation of inefficient
           code.  These warnings can be generated, for example,
           when compiling code that performs byte-level memory
           operations on the MAC AE type.  The MAC AE has no
           hardware support for byte-level memory operations, so
           all byte load/stores must be synthesized from word
           load/store operations.  This is inefficient and a
           warning will be generated indicating to the programmer
           that they should rewrite the code to avoid byte
           operations, or to target an AE type that has the
           necessary hardware support.  This option enables the
           warning to be turned off.

       _P_o_w_e_r_P_C _O_p_t_i_o_n_s




gcc-4.74                    2014-06-12                        290





GCC(1)                         GNU                         GCC(1)


       These are listed under

       _R_L_7_8 _O_p_t_i_o_n_s

       --mmssiimm
           Links in additional target libraries to support
           operation within a simulator.

       --mmmmuull==nnoonnee
       --mmmmuull==gg1133
       --mmmmuull==rrll7788
           Specifies the type of hardware multiplication support
           to be used.  The default is "none", which uses
           software multiplication functions.  The "g13" option
           is for the hardware multiply/divide peripheral only on
           the RL78/G13 targets.  The "rl78" option is for the
           standard hardware multiplication defined in the RL78
           software manual.

       _I_B_M _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s

       These --mm options are defined for the IBM RS/6000 and
       PowerPC:

       --mmppoowweerr
       --mmnnoo--ppoowweerr
       --mmppoowweerr22
       --mmnnoo--ppoowweerr22
       --mmppoowweerrppcc
       --mmnnoo--ppoowweerrppcc
       --mmppoowweerrppcc--ggppoopptt
       --mmnnoo--ppoowweerrppcc--ggppoopptt
       --mmppoowweerrppcc--ggffxxoopptt
       --mmnnoo--ppoowweerrppcc--ggffxxoopptt
       --mmppoowweerrppcc6644
       --mmnnoo--ppoowweerrppcc6644
       --mmmmffccrrff
       --mmnnoo--mmffccrrff
       --mmppooppccnnttbb
       --mmnnoo--ppooppccnnttbb
       --mmppooppccnnttdd
       --mmnnoo--ppooppccnnttdd
       --mmffpprrnndd
       --mmnnoo--ffpprrnndd
       --mmccmmppbb
       --mmnnoo--ccmmppbb
       --mmmmffppggpprr
       --mmnnoo--mmffppggpprr
       --mmhhaarrdd--ddffpp
       --mmnnoo--hhaarrdd--ddffpp
           GCC supports two related instruction set architectures
           for the RS/6000 and PowerPC.  The _P_O_W_E_R instruction
           set are those instructions supported by the rriiooss chip
           set used in the original RS/6000 systems and the



gcc-4.74                    2014-06-12                        291





GCC(1)                         GNU                         GCC(1)


           _P_o_w_e_r_P_C instruction set is the architecture of the
           Freescale MPC5xx, MPC6xx, MPC8xx microprocessors, and
           the IBM 4xx, 6xx, and follow-on microprocessors.

           Neither architecture is a subset of the other.
           However there is a large common subset of instructions
           supported by both.  An MQ register is included in
           processors supporting the POWER architecture.

           You use these options to specify which instructions
           are available on the processor you are using.  The
           default value of these options is determined when
           configuring GCC.  Specifying the --mmccppuu==_c_p_u___t_y_p_e
           overrides the specification of these options.  We
           recommend you use the --mmccppuu==_c_p_u___t_y_p_e option rather
           than the options listed above.

           The --mmppoowweerr option allows GCC to generate instructions
           that are found only in the POWER architecture and to
           use the MQ register.  Specifying --mmppoowweerr22 implies
           --ppoowweerr and also allows GCC to generate instructions
           that are present in the POWER2 architecture but not
           the original POWER architecture.

           The --mmppoowweerrppcc option allows GCC to generate
           instructions that are found only in the 32-bit subset
           of the PowerPC architecture.  Specifying
           --mmppoowweerrppcc--ggppoopptt implies --mmppoowweerrppcc and also allows GCC
           to use the optional PowerPC architecture instructions
           in the General Purpose group, including floating-point
           square root.  Specifying --mmppoowweerrppcc--ggffxxoopptt implies
           --mmppoowweerrppcc and also allows GCC to use the optional
           PowerPC architecture instructions in the Graphics
           group, including floating-point select.

           The --mmmmffccrrff option allows GCC to generate the move
           from condition register field instruction implemented
           on the POWER4 processor and other processors that
           support the PowerPC V2.01 architecture.  The --mmppooppccnnttbb
           option allows GCC to generate the popcount and double-
           precision FP reciprocal estimate instruction
           implemented on the POWER5 processor and other
           processors that support the PowerPC V2.02
           architecture.  The --mmppooppccnnttdd option allows GCC to
           generate the popcount instruction implemented on the
           POWER7 processor and other processors that support the
           PowerPC V2.06 architecture.  The --mmffpprrnndd option allows
           GCC to generate the FP round to integer instructions
           implemented on the POWER5+ processor and other
           processors that support the PowerPC V2.03
           architecture.  The --mmccmmppbb option allows GCC to
           generate the compare bytes instruction implemented on
           the POWER6 processor and other processors that support
           the PowerPC V2.05 architecture.  The --mmmmffppggpprr option



gcc-4.74                    2014-06-12                        292





GCC(1)                         GNU                         GCC(1)


           allows GCC to generate the FP move to/from general-
           purpose register instructions implemented on the
           POWER6X processor and other processors that support
           the extended PowerPC V2.05 architecture.  The
           --mmhhaarrdd--ddffpp option allows GCC to generate the decimal
           floating-point instructions implemented on some POWER
           processors.

           The --mmppoowweerrppcc6644 option allows GCC to generate the
           additional 64-bit instructions that are found in the
           full PowerPC64 architecture and to treat GPRs as
           64-bit, doubleword quantities.  GCC defaults to
           --mmnnoo--ppoowweerrppcc6644.

           If you specify both --mmnnoo--ppoowweerr and --mmnnoo--ppoowweerrppcc, GCC
           will use only the instructions in the common subset of
           both architectures plus some special AIX common-mode
           calls, and will not use the MQ register.  Specifying
           both --mmppoowweerr and --mmppoowweerrppcc permits GCC to use any
           instruction from either architecture and to allow use
           of the MQ register; specify this for the Motorola
           MPC601.

       --mmnneeww--mmnneemmoonniiccss
       --mmoolldd--mmnneemmoonniiccss
           Select which mnemonics to use in the generated
           assembler code.  With --mmnneeww--mmnneemmoonniiccss, GCC uses the
           assembler mnemonics defined for the PowerPC
           architecture.  With --mmoolldd--mmnneemmoonniiccss it uses the
           assembler mnemonics defined for the POWER
           architecture.  Instructions defined in only one
           architecture have only one mnemonic; GCC uses that
           mnemonic irrespective of which of these options is
           specified.

           GCC defaults to the mnemonics appropriate for the
           architecture in use.  Specifying --mmccppuu==_c_p_u___t_y_p_e
           sometimes overrides the value of these option.  Unless
           you are building a cross-compiler, you should normally
           not specify either --mmnneeww--mmnneemmoonniiccss or --mmoolldd--mmnneemmoonniiccss,
           but should instead accept the default.

       --mmccppuu==_c_p_u___t_y_p_e
           Set architecture type, register usage, choice of
           mnemonics, and instruction scheduling parameters for
           machine type _c_p_u___t_y_p_e.  Supported values for _c_p_u___t_y_p_e
           are 440011, 440033, 440055, 440055ffpp, 444400, 444400ffpp, 446644, 446644ffpp, 447766,
           447766ffpp, 550055, 660011, 660022, 660033, 660033ee, 660044, 660044ee, 662200, 663300,
           774400, 77440000, 77445500, 775500, 880011, 882211, 882233, 886600, 997700, 88554400,
           aa22, ee330000cc22, ee330000cc33, ee550000mmcc, ee550000mmcc6644, eecc660033ee, GG33, GG44,
           GG55, ttiittaann, ppoowweerr, ppoowweerr22, ppoowweerr33, ppoowweerr44, ppoowweerr55,
           ppoowweerr55++, ppoowweerr66, ppoowweerr66xx, ppoowweerr77, ccoommmmoonn, ppoowweerrppcc,
           ppoowweerrppcc6644, rriiooss, rriiooss11, rriiooss22, rrsscc, and rrss6644.




gcc-4.74                    2014-06-12                        293





GCC(1)                         GNU                         GCC(1)


           --mmccppuu==ccoommmmoonn selects a completely generic processor.
           Code generated under this option will run on any POWER
           or PowerPC processor.  GCC will use only the
           instructions in the common subset of both
           architectures, and will not use the MQ register.  GCC
           assumes a generic processor model for scheduling
           purposes.

           --mmccppuu==ppoowweerr, --mmccppuu==ppoowweerr22, --mmccppuu==ppoowweerrppcc, and
           --mmccppuu==ppoowweerrppcc6644 specify generic POWER, POWER2, pure
           32-bit PowerPC (i.e., not MPC601), and 64-bit PowerPC
           architecture machine types, with an appropriate,
           generic processor model assumed for scheduling
           purposes.

           The other options specify a specific processor.  Code
           generated under those options will run best on that
           processor, and may not run at all on others.

           The --mmccppuu options automatically enable or disable the
           following options:

           --mmaallttiivveecc  --mmffpprrnndd  --mmhhaarrdd--ffllooaatt  --mmmmffccrrff  --mmmmuullttiippllee
           --mmnneeww--mmnneemmoonniiccss  --mmppooppccnnttbb --mmppooppccnnttdd  --mmppoowweerr
           --mmppoowweerr22  --mmppoowweerrppcc6644 --mmppoowweerrppcc--ggppoopptt
           --mmppoowweerrppcc--ggffxxoopptt  --mmssiinnggllee--ffllooaatt --mmddoouubbllee--ffllooaatt
           --mmssiimmppllee--ffppuu --mmssttrriinngg  --mmmmuullhhww  --mmddllmmzzbb  --mmmmffppggpprr
           --mmvvssxx

           The particular options set for any particular CPU will
           vary between compiler versions, depending on what
           setting seems to produce optimal code for that CPU; it
           doesn't necessarily reflect the actual hardware's
           capabilities.  If you wish to set an individual option
           to a particular value, you may specify it after the
           --mmccppuu option, like --mmccppuu==997700 --mmnnoo--aallttiivveecc.

           On AIX, the --mmaallttiivveecc and --mmppoowweerrppcc6644 options are not
           enabled or disabled by the --mmccppuu option at present
           because AIX does not have full support for these
           options.  You may still enable or disable them
           individually if you're sure it'll work in your
           environment.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine
           type _c_p_u___t_y_p_e, but do not set the architecture type,
           register usage, or choice of mnemonics, as
           --mmccppuu==_c_p_u___t_y_p_e would.  The same values for _c_p_u___t_y_p_e
           are used for --mmttuunnee as for --mmccppuu.  If both are
           specified, the code generated will use the
           architecture, registers, and mnemonics set by --mmccppuu,
           but the scheduling parameters set by --mmttuunnee.




gcc-4.74                    2014-06-12                        294





GCC(1)                         GNU                         GCC(1)


       --mmccmmooddeell==ssmmaallll
           Generate PowerPC64 code for the small model: The TOC
           is limited to 64k.

       --mmccmmooddeell==mmeeddiiuumm
           Generate PowerPC64 code for the medium model: The TOC
           and other static data may be up to a total of 4G in
           size.

       --mmccmmooddeell==llaarrggee
           Generate PowerPC64 code for the large model: The TOC
           may be up to 4G in size.  Other data and code is only
           limited by the 64-bit address space.

       --mmaallttiivveecc
       --mmnnoo--aallttiivveecc
           Generate code that uses (does not use) AltiVec
           instructions, and also enable the use of built-in
           functions that allow more direct access to the AltiVec
           instruction set.  You may also need to set
           --mmaabbii==aallttiivveecc to adjust the current ABI with AltiVec
           ABI enhancements.

       --mmvvrrssaavvee
       --mmnnoo--vvrrssaavvee
           Generate VRSAVE instructions when generating AltiVec
           code.

       --mmggeenn--cceellll--mmiiccrrooccooddee
           Generate Cell microcode instructions

       --mmwwaarrnn--cceellll--mmiiccrrooccooddee
           Warning when a Cell microcode instruction is going to
           emitted.  An example of a Cell microcode instruction
           is a variable shift.

       --mmsseeccuurree--pplltt
           Generate code that allows ld and ld.so to build
           executables and shared libraries with non-exec .plt
           and .got sections.  This is a PowerPC 32-bit SYSV ABI
           option.

       --mmbbssss--pplltt
           Generate code that uses a BSS .plt section that ld.so
           fills in, and requires .plt and .got sections that are
           both writable and executable.  This is a PowerPC
           32-bit SYSV ABI option.

       --mmiisseell
       --mmnnoo--iisseell
           This switch enables or disables the generation of ISEL
           instructions.





gcc-4.74                    2014-06-12                        295





GCC(1)                         GNU                         GCC(1)


       --mmiisseell==_y_e_s_/_n_o
           This switch has been deprecated.  Use --mmiisseell and
           --mmnnoo--iisseell instead.

       --mmssppee
       --mmnnoo--ssppee
           This switch enables or disables the generation of SPE
           simd instructions.

       --mmppaaiirreedd
       --mmnnoo--ppaaiirreedd
           This switch enables or disables the generation of
           PAIRED simd instructions.

       --mmssppee==_y_e_s_/_n_o
           This option has been deprecated.  Use --mmssppee and
           --mmnnoo--ssppee instead.

       --mmvvssxx
       --mmnnoo--vvssxx
           Generate code that uses (does not use) vector/scalar
           (VSX) instructions, and also enable the use of built-
           in functions that allow more direct access to the VSX
           instruction set.

       --mmffllooaatt--ggpprrss==_y_e_s_/_s_i_n_g_l_e_/_d_o_u_b_l_e_/_n_o
       --mmffllooaatt--ggpprrss
           This switch enables or disables the generation of
           floating-point operations on the general-purpose
           registers for architectures that support it.

           The argument _y_e_s or _s_i_n_g_l_e enables the use of single-
           precision floating-point operations.

           The argument _d_o_u_b_l_e enables the use of single and
           double-precision floating-point operations.

           The argument _n_o disables floating-point operations on
           the general-purpose registers.

           This option is currently only available on the
           MPC854x.

       --mm3322
       --mm6644
           Generate code for 32-bit or 64-bit environments of
           Darwin and SVR4 targets (including GNU/Linux).  The
           32-bit environment sets int, long and pointer to 32
           bits and generates code that runs on any PowerPC
           variant.  The 64-bit environment sets int to 32 bits
           and long and pointer to 64 bits, and generates code
           for PowerPC64, as for --mmppoowweerrppcc6644.





gcc-4.74                    2014-06-12                        296





GCC(1)                         GNU                         GCC(1)


       --mmffuullll--ttoocc
       --mmnnoo--ffpp--iinn--ttoocc
       --mmnnoo--ssuumm--iinn--ttoocc
       --mmmmiinniimmaall--ttoocc
           Modify generation of the TOC (Table Of Contents),
           which is created for every executable file.  The
           --mmffuullll--ttoocc option is selected by default.  In that
           case, GCC will allocate at least one TOC entry for
           each unique non-automatic variable reference in your
           program.  GCC will also place floating-point constants
           in the TOC.  However, only 16,384 entries are
           available in the TOC.

           If you receive a linker error message that saying you
           have overflowed the available TOC space, you can
           reduce the amount of TOC space used with the
           --mmnnoo--ffpp--iinn--ttoocc and --mmnnoo--ssuumm--iinn--ttoocc options.
           --mmnnoo--ffpp--iinn--ttoocc prevents GCC from putting floating-
           point constants in the TOC and --mmnnoo--ssuumm--iinn--ttoocc forces
           GCC to generate code to calculate the sum of an
           address and a constant at run time instead of putting
           that sum into the TOC.  You may specify one or both of
           these options.  Each causes GCC to produce very
           slightly slower and larger code at the expense of
           conserving TOC space.

           If you still run out of space in the TOC even when you
           specify both of these options, specify --mmmmiinniimmaall--ttoocc
           instead.  This option causes GCC to make only one TOC
           entry for every file.  When you specify this option,
           GCC will produce code that is slower and larger but
           which uses extremely little TOC space.  You may wish
           to use this option only on files that contain less
           frequently executed code.

       --mmaaiixx6644
       --mmaaiixx3322
           Enable 64-bit AIX ABI and calling convention: 64-bit
           pointers, 64-bit "long" type, and the infrastructure
           needed to support them.  Specifying --mmaaiixx6644 implies
           --mmppoowweerrppcc6644 and --mmppoowweerrppcc, while --mmaaiixx3322 disables the
           64-bit ABI and implies --mmnnoo--ppoowweerrppcc6644.  GCC defaults
           to --mmaaiixx3322.

       --mmxxll--ccoommppaatt
       --mmnnoo--xxll--ccoommppaatt
           Produce code that conforms more closely to IBM XL
           compiler semantics when using AIX-compatible ABI.
           Pass floating-point arguments to prototyped functions
           beyond the register save area (RSA) on the stack in
           addition to argument FPRs.  Do not assume that most
           significant double in 128-bit long double value is
           properly rounded when comparing values and converting
           to double.  Use XL symbol names for long double



gcc-4.74                    2014-06-12                        297





GCC(1)                         GNU                         GCC(1)


           support routines.

           The AIX calling convention was extended but not
           initially documented to handle an obscure K&R C case
           of calling a function that takes the address of its
           arguments with fewer arguments than declared.  IBM XL
           compilers access floating-point arguments that do not
           fit in the RSA from the stack when a subroutine is
           compiled without optimization.  Because always storing
           floating-point arguments on the stack is inefficient
           and rarely needed, this option is not enabled by
           default and only is necessary when calling subroutines
           compiled by IBM XL compilers without optimization.

       --mmppee
           Support _I_B_M _R_S_/_6_0_0_0 _S_P _P_a_r_a_l_l_e_l _E_n_v_i_r_o_n_m_e_n_t (PE).
           Link an application written to use message passing
           with special startup code to enable the application to
           run.  The system must have PE installed in the
           standard location (_/_u_s_r_/_l_p_p_/_p_p_e_._p_o_e_/), or the _s_p_e_c_s
           file must be overridden with the --ssppeeccss== option to
           specify the appropriate directory location.  The
           Parallel Environment does not support threads, so the
           --mmppee option and the --pptthhrreeaadd option are incompatible.

       --mmaalliiggnn--nnaattuurraall
       --mmaalliiggnn--ppoowweerr
           On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux,
           the option --mmaalliiggnn--nnaattuurraall overrides the ABI-defined
           alignment of larger types, such as floating-point
           doubles, on their natural size-based boundary.  The
           option --mmaalliiggnn--ppoowweerr instructs GCC to follow the ABI-
           specified alignment rules.  GCC defaults to the
           standard alignment defined in the ABI.

           On 64-bit Darwin, natural alignment is the default,
           and --mmaalliiggnn--ppoowweerr is not supported.

       --mmssoofftt--ffllooaatt
       --mmhhaarrdd--ffllooaatt
           Generate code that does not use (uses) the floating-
           point register set.  Software floating-point emulation
           is provided if you use the --mmssoofftt--ffllooaatt option, and
           pass the option to GCC when linking.

       --mmssiinnggllee--ffllooaatt
       --mmddoouubbllee--ffllooaatt
           Generate code for single- or double-precision
           floating-point operations.  --mmddoouubbllee--ffllooaatt implies
           --mmssiinnggllee--ffllooaatt.

       --mmssiimmppllee--ffppuu
           Do not generate sqrt and div instructions for hardware
           floating-point unit.



gcc-4.74                    2014-06-12                        298





GCC(1)                         GNU                         GCC(1)


       --mmffppuu
           Specify type of floating-point unit.  Valid values are
           _s_p___l_i_t_e (equivalent to -msingle-float -msimple-fpu),
           _d_p___l_i_t_e (equivalent to -mdouble-float -msimple-fpu),
           _s_p___f_u_l_l (equivalent to -msingle-float), and _d_p___f_u_l_l
           (equivalent to -mdouble-float).

       --mmxxiilliinnxx--ffppuu
           Perform optimizations for the floating-point unit on
           Xilinx PPC 405/440.

       --mmmmuullttiippllee
       --mmnnoo--mmuullttiippllee
           Generate code that uses (does not use) the load
           multiple word instructions and the store multiple word
           instructions.  These instructions are generated by
           default on POWER systems, and not generated on PowerPC
           systems.  Do not use --mmmmuullttiippllee on little-endian
           PowerPC systems, since those instructions do not work
           when the processor is in little-endian mode.  The
           exceptions are PPC740 and PPC750 which permit these
           instructions in little-endian mode.

       --mmssttrriinngg
       --mmnnoo--ssttrriinngg
           Generate code that uses (does not use) the load string
           instructions and the store string word instructions to
           save multiple registers and do small block moves.
           These instructions are generated by default on POWER
           systems, and not generated on PowerPC systems.  Do not
           use --mmssttrriinngg on little-endian PowerPC systems, since
           those instructions do not work when the processor is
           in little-endian mode.  The exceptions are PPC740 and
           PPC750 which permit these instructions in little-
           endian mode.

       --mmuuppddaattee
       --mmnnoo--uuppddaattee
           Generate code that uses (does not use) the load or
           store instructions that update the base register to
           the address of the calculated memory location.  These
           instructions are generated by default.  If you use
           --mmnnoo--uuppddaattee, there is a small window between the time
           that the stack pointer is updated and the address of
           the previous frame is stored, which means code that
           walks the stack frame across interrupts or signals may
           get corrupted data.

       --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess
       --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess
           Generate code that tries to avoid (not avoid) the use
           of indexed load or store instructions. These
           instructions can incur a performance penalty on Power6
           processors in certain situations, such as when



gcc-4.74                    2014-06-12                        299





GCC(1)                         GNU                         GCC(1)


           stepping through large arrays that cross a 16M
           boundary.  This option is enabled by default when
           targetting Power6 and disabled otherwise.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating-
           point multiply and accumulate instructions.  These
           instructions are generated by default if hardware
           floating point is used.  The machine-dependent
           --mmffuusseedd--mmaadddd option is now mapped to the machine-
           independent --ffffpp--ccoonnttrraacctt==ffaasstt option, and
           --mmnnoo--ffuusseedd--mmaadddd is mapped to --ffffpp--ccoonnttrraacctt==ooffff.

       --mmmmuullhhww
       --mmnnoo--mmuullhhww
           Generate code that uses (does not use) the half-word
           multiply and multiply-accumulate instructions on the
           IBM 405, 440, 464 and 476 processors.  These
           instructions are generated by default when targetting
           those processors.

       --mmddllmmzzbb
       --mmnnoo--ddllmmzzbb
           Generate code that uses (does not use) the string-
           search ddllmmzzbb instruction on the IBM 405, 440, 464 and
           476 processors.  This instruction is generated by
           default when targetting those processors.

       --mmnnoo--bbiitt--aalliiggnn
       --mmbbiitt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do)
           force structures and unions that contain bit-fields to
           be aligned to the base type of the bit-field.

           For example, by default a structure containing nothing
           but 8 "unsigned" bit-fields of length 1 is aligned to
           a 4-byte boundary and has a size of 4 bytes.  By using
           --mmnnoo--bbiitt--aalliiggnn, the structure is aligned to a 1-byte
           boundary and is 1 byte in size.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do)
           assume that unaligned memory references will be
           handled by the system.

       --mmrreellooccaattaabbllee
       --mmnnoo--rreellooccaattaabbllee
           Generate code that allows (does not allow) a static
           executable to be relocated to a different address at
           run time.  A simple embedded PowerPC system loader
           should relocate the entire contents of ".got2" and
           4-byte locations listed in the ".fixup" section, a



gcc-4.74                    2014-06-12                        300





GCC(1)                         GNU                         GCC(1)


           table of 32-bit addresses generated by this option.
           For this to work, all objects linked together must be
           compiled with --mmrreellooccaattaabbllee or --mmrreellooccaattaabbllee--lliibb.
           --mmrreellooccaattaabbllee code aligns the stack to an 8-byte
           boundary.

       --mmrreellooccaattaabbllee--lliibb
       --mmnnoo--rreellooccaattaabbllee--lliibb
           Like --mmrreellooccaattaabbllee, --mmrreellooccaattaabbllee--lliibb generates a
           ".fixup" section to allow static executables to be
           relocated at run time, but --mmrreellooccaattaabbllee--lliibb does not
           use the smaller stack alignment of --mmrreellooccaattaabbllee.
           Objects compiled with --mmrreellooccaattaabbllee--lliibb may be linked
           with objects compiled with any combination of the
           --mmrreellooccaattaabbllee options.

       --mmnnoo--ttoocc
       --mmttoocc
           On System V.4 and embedded PowerPC systems do not (do)
           assume that register 2 contains a pointer to a global
           area pointing to the addresses used in the program.

       --mmlliittttllee
       --mmlliittttllee--eennddiiaann
           On System V.4 and embedded PowerPC systems compile
           code for the processor in little-endian mode.  The
           --mmlliittttllee--eennddiiaann option is the same as --mmlliittttllee.

       --mmbbiigg
       --mmbbiigg--eennddiiaann
           On System V.4 and embedded PowerPC systems compile
           code for the processor in big-endian mode.  The
           --mmbbiigg--eennddiiaann option is the same as --mmbbiigg.

       --mmddyynnaammiicc--nnoo--ppiicc
           On Darwin and Mac OS X systems, compile code so that
           it is not relocatable, but that its external
           references are relocatable.  The resulting code is
           suitable for applications, but not shared libraries.

       --mmssiinnggllee--ppiicc--bbaassee
           Treat the register used for PIC addressing as
           read-only, rather than loading it in the prologue for
           each function.  The runtime system is responsible for
           initializing this register with an appropriate value
           before execution begins.

       --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           This option controls the priority that is assigned to
           dispatch-slot restricted instructions during the
           second scheduling pass.  The argument _p_r_i_o_r_i_t_y takes
           the value _0_/_1_/_2 to assign _n_o_/_h_i_g_h_e_s_t_/_s_e_c_o_n_d_-_h_i_g_h_e_s_t
           priority to dispatch slot restricted instructions.




gcc-4.74                    2014-06-12                        301





GCC(1)                         GNU                         GCC(1)


       --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e
           This option controls which dependences are considered
           costly by the target during instruction scheduling.
           The argument _d_e_p_e_n_d_e_n_c_e___t_y_p_e takes one of the
           following values: _n_o: no dependence is costly, _a_l_l:
           all dependences are costly, _t_r_u_e___s_t_o_r_e___t_o___l_o_a_d: a true
           dependence from store to load is costly,
           _s_t_o_r_e___t_o___l_o_a_d: any dependence from store to load is
           costly, _n_u_m_b_e_r: any dependence for which latency >=
           _n_u_m_b_e_r is costly.

       --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e
           This option controls which nop insertion scheme will
           be used during the second scheduling pass.  The
           argument _s_c_h_e_m_e takes one of the following values: _n_o:
           Don't insert nops.  _p_a_d: Pad with nops any dispatch
           group that has vacant issue slots, according to the
           scheduler's grouping.  _r_e_g_r_o_u_p___e_x_a_c_t: Insert nops to
           force costly dependent insns into separate groups.
           Insert exactly as many nops as needed to force an insn
           to a new group, according to the estimated processor
           grouping.  _n_u_m_b_e_r: Insert nops to force costly
           dependent insns into separate groups.  Insert _n_u_m_b_e_r
           nops to force an insn to a new group.

       --mmccaallll--ssyyssvv
           On System V.4 and embedded PowerPC systems compile
           code using calling conventions that adheres to the
           March 1995 draft of the System V Application Binary
           Interface, PowerPC processor supplement.  This is the
           default unless you configured GCC using
           ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssyyssvv--eeaabbii
       --mmccaallll--eeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmeeaabbii options.

       --mmccaallll--ssyyssvv--nnooeeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmnnoo--eeaabbii options.

       --mmccaallll--aaiixxddeesscc
           On System V.4 and embedded PowerPC systems compile
           code for the AIX operating system.

       --mmccaallll--lliinnuuxx
           On System V.4 and embedded PowerPC systems compile
           code for the Linux-based GNU system.

       --mmccaallll--ffrreeeebbssdd
           On System V.4 and embedded PowerPC systems compile
           code for the FreeBSD operating system.

       --mmccaallll--nneettbbssdd
           On System V.4 and embedded PowerPC systems compile



gcc-4.74                    2014-06-12                        302





GCC(1)                         GNU                         GCC(1)


           code for the NetBSD operating system.

       --mmccaallll--ooppeennbbssdd
           On System V.4 and embedded PowerPC systems compile
           code for the OpenBSD operating system.

       --mmaaiixx--ssttrruucctt--rreettuurrnn
           Return all structures in memory (as specified by the
           AIX ABI).

       --mmssvvrr44--ssttrruucctt--rreettuurrnn
           Return structures smaller than 8 bytes in registers
           (as specified by the SVR4 ABI).

       --mmaabbii==_a_b_i_-_t_y_p_e
           Extend the current ABI with a particular extension, or
           remove such extension.  Valid values are _a_l_t_i_v_e_c, _n_o_-
           _a_l_t_i_v_e_c, _s_p_e, _n_o_-_s_p_e, _i_b_m_l_o_n_g_d_o_u_b_l_e, _i_e_e_e_l_o_n_g_d_o_u_b_l_e.

       --mmaabbii==ssppee
           Extend the current ABI with SPE ABI extensions.  This
           does not change the default ABI, instead it adds the
           SPE ABI extensions to the current ABI.

       --mmaabbii==nnoo--ssppee
           Disable Booke SPE ABI extensions for the current ABI.

       --mmaabbii==iibbmmlloonnggddoouubbllee
           Change the current ABI to use IBM extended-precision
           long double.  This is a PowerPC 32-bit SYSV ABI
           option.

       --mmaabbii==iieeeeeelloonnggddoouubbllee
           Change the current ABI to use IEEE extended-precision
           long double.  This is a PowerPC 32-bit Linux ABI
           option.

       --mmpprroottoottyyppee
       --mmnnoo--pprroottoottyyppee
           On System V.4 and embedded PowerPC systems assume that
           all calls to variable argument functions are properly
           prototyped.  Otherwise, the compiler must insert an
           instruction before every non prototyped call to set or
           clear bit 6 of the condition code register (_C_R) to
           indicate whether floating-point values were passed in
           the floating-point registers in case the function
           takes variable arguments.  With --mmpprroottoottyyppee, only
           calls to prototyped variable argument functions will
           set or clear the bit.

       --mmssiimm
           On embedded PowerPC systems, assume that the startup
           module is called _s_i_m_-_c_r_t_0_._o and that the standard C
           libraries are _l_i_b_s_i_m_._a and _l_i_b_c_._a.  This is the



gcc-4.74                    2014-06-12                        303





GCC(1)                         GNU                         GCC(1)


           default for ppoowweerrppcc--**--eeaabbiissiimm configurations.

       --mmmmvvmmee
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_m_v_m_e_._a and _l_i_b_c_._a.

       --mmaaddss
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_a_d_s_._a and _l_i_b_c_._a.

       --mmyyeelllloowwkknniiffee
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_y_k_._a and _l_i_b_c_._a.

       --mmvvxxwwoorrkkss
           On System V.4 and embedded PowerPC systems, specify
           that you are compiling for a VxWorks system.

       --mmeemmbb
           On embedded PowerPC systems, set the _P_P_C___E_M_B bit in
           the ELF flags header to indicate that eeaabbii extended
           relocations are used.

       --mmeeaabbii
       --mmnnoo--eeaabbii
           On System V.4 and embedded PowerPC systems do (do not)
           adhere to the Embedded Applications Binary Interface
           (eabi) which is a set of modifications to the System
           V.4 specifications.  Selecting --mmeeaabbii means that the
           stack is aligned to an 8-byte boundary, a function
           "__eabi" is called to from "main" to set up the eabi
           environment, and the --mmssddaattaa option can use both "r2"
           and "r13" to point to two separate small data areas.
           Selecting --mmnnoo--eeaabbii means that the stack is aligned to
           a 16-byte boundary, do not call an initialization
           function from "main", and the --mmssddaattaa option will only
           use "r13" to point to a single small data area.  The
           --mmeeaabbii option is on by default if you configured GCC
           using one of the ppoowweerrppcc**--**--eeaabbii** options.

       --mmssddaattaa==eeaabbii
           On System V.4 and embedded PowerPC systems, put small
           initialized "const" global and static data in the
           ..ssddaattaa22 section, which is pointed to by register "r2".
           Put small initialized non-"const" global and static
           data in the ..ssddaattaa section, which is pointed to by
           register "r13".  Put small uninitialized global and
           static data in the ..ssbbssss section, which is adjacent to
           the ..ssddaattaa section.  The --mmssddaattaa==eeaabbii option is
           incompatible with the --mmrreellooccaattaabbllee option.  The
           --mmssddaattaa==eeaabbii option also sets the --mmeemmbb option.



gcc-4.74                    2014-06-12                        304





GCC(1)                         GNU                         GCC(1)


       --mmssddaattaa==ssyyssvv
           On System V.4 and embedded PowerPC systems, put small
           global and static data in the ..ssddaattaa section, which is
           pointed to by register "r13".  Put small uninitialized
           global and static data in the ..ssbbssss section, which is
           adjacent to the ..ssddaattaa section.  The --mmssddaattaa==ssyyssvv
           option is incompatible with the --mmrreellooccaattaabbllee option.

       --mmssddaattaa==ddeeffaauulltt
       --mmssddaattaa
           On System V.4 and embedded PowerPC systems, if --mmeeaabbii
           is used, compile code the same as --mmssddaattaa==eeaabbii,
           otherwise compile code the same as --mmssddaattaa==ssyyssvv.

       --mmssddaattaa==ddaattaa
           On System V.4 and embedded PowerPC systems, put small
           global data in the ..ssddaattaa section.  Put small
           uninitialized global data in the ..ssbbssss section.  Do
           not use register "r13" to address small data however.
           This is the default behavior unless other --mmssddaattaa
           options are used.

       --mmssddaattaa==nnoonnee
       --mmnnoo--ssddaattaa
           On embedded PowerPC systems, put all initialized
           global and static data in the ..ddaattaa section, and all
           uninitialized data in the ..bbssss section.

       --mmbblloocckk--mmoovvee--iinnlliinnee--lliimmiitt==_n_u_m
           Inline all block moves (such as calls to "memcpy" or
           structure copies) less than or equal to _n_u_m bytes.
           The minimum value for _n_u_m is 32 bytes on 32-bit
           targets and 64 bytes on 64-bit targets.  The default
           value is target-specific.

       --GG _n_u_m
           On embedded PowerPC systems, put global and static
           items less than or equal to _n_u_m bytes into the small
           data or bss sections instead of the normal data or bss
           section.  By default, _n_u_m is 8.  The --GG _n_u_m switch is
           also passed to the linker.  All modules should be
           compiled with the same --GG _n_u_m value.

       --mmrreeggnnaammeess
       --mmnnoo--rreeggnnaammeess
           On System V.4 and embedded PowerPC systems do (do not)
           emit register names in the assembly language output
           using symbolic forms.

       --mmlloonnggccaallll
       --mmnnoo--lloonnggccaallll
           By default assume that all calls are far away so that
           a longer more expensive calling sequence is required.
           This is required for calls further than 32 megabytes



gcc-4.74                    2014-06-12                        305





GCC(1)                         GNU                         GCC(1)


           (33,554,432 bytes) from the current location.  A short
           call will be generated if the compiler knows the call
           cannot be that far away.  This setting can be
           overridden by the "shortcall" function attribute, or
           by "#pragma longcall(0)".

           Some linkers are capable of detecting out-of-range
           calls and generating glue code on the fly.  On these
           systems, long calls are unnecessary and generate
           slower code.  As of this writing, the AIX linker can
           do this, as can the GNU linker for PowerPC/64.  It is
           planned to add this feature to the GNU linker for
           32-bit PowerPC systems as well.

           On Darwin/PPC systems, "#pragma longcall" will
           generate "jbsr callee, L42", plus a "branch island"
           (glue code).  The two target addresses represent the
           callee and the "branch island".  The Darwin/PPC linker
           will prefer the first address and generate a "bl
           callee" if the PPC "bl" instruction will reach the
           callee directly; otherwise, the linker will generate
           "bl L42" to call the "branch island".  The "branch
           island" is appended to the body of the calling
           function; it computes the full 32-bit address of the
           callee and jumps to it.

           On Mach-O (Darwin) systems, this option directs the
           compiler emit to the glue for every direct call, and
           the Darwin linker decides whether to use or discard
           it.

           In the future, we may cause GCC to ignore all longcall
           specifications when the linker is known to generate
           glue.

       --mmttllss--mmaarrkkeerrss
       --mmnnoo--ttllss--mmaarrkkeerrss
           Mark (do not mark) calls to "__tls_get_addr" with a
           relocation specifying the function argument.  The
           relocation allows ld to reliably associate function
           call with argument setup instructions for TLS
           optimization, which in turn allows gcc to better
           schedule the sequence.

       --pptthhrreeaadd
           Adds support for multithreading with the _p_t_h_r_e_a_d_s
           library.  This option sets flags for both the
           preprocessor and linker.

       --mmrreecciipp
       --mmnnoo--rreecciipp
           This option will enable GCC to use the reciprocal
           estimate and reciprocal square root estimate
           instructions with additional Newton-Raphson steps to



gcc-4.74                    2014-06-12                        306





GCC(1)                         GNU                         GCC(1)


           increase precision instead of doing a divide or square
           root and divide for floating-point arguments.  You
           should use the --ffffaasstt--mmaatthh option when using --mmrreecciipp
           (or at least --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss,
           --ffiinniittee--mmaatthh--oonnllyy, --ffrreecciipprrooccaall--mmaatthh and
           --ffnnoo--ttrraappppiinngg--mmaatthh).  Note that while the throughput
           of the sequence is generally higher than the
           throughput of the non-reciprocal instruction, the
           precision of the sequence can be decreased by up to 2
           ulp (i.e. the inverse of 1.0 equals 0.99999994) for
           reciprocal square roots.

       --mmrreecciipp==_o_p_t
           This option allows to control which reciprocal
           estimate instructions may be used.  _o_p_t is a comma
           separated list of options, which may be preceded by a
           "!" to invert the option: "all": enable all estimate
           instructions, "default": enable the default
           instructions, equivalent to --mmrreecciipp, "none": disable
           all estimate instructions, equivalent to --mmnnoo--rreecciipp;
           "div": enable the reciprocal approximation
           instructions for both single and double precision;
           "divf": enable the single-precision reciprocal
           approximation instructions; "divd": enable the double-
           precision reciprocal approximation instructions;
           "rsqrt": enable the reciprocal square root
           approximation instructions for both single and double
           precision; "rsqrtf": enable the single-precision
           reciprocal square root approximation instructions;
           "rsqrtd": enable the double-precision reciprocal
           square root approximation instructions;

           So for example, --mmrreecciipp==aallll,,!!rrssqqrrttdd would enable the
           all of the reciprocal estimate instructions, except
           for the "FRSQRTE", "XSRSQRTEDP", and "XVRSQRTEDP"
           instructions which handle the double-precision
           reciprocal square root calculations.

       --mmrreecciipp--pprreecciissiioonn
       --mmnnoo--rreecciipp--pprreecciissiioonn
           Assume (do not assume) that the reciprocal estimate
           instructions provide higher-precision estimates than
           is mandated by the PowerPC ABI.  Selecting
           --mmccppuu==ppoowweerr66 or --mmccppuu==ppoowweerr77 automatically selects
           --mmrreecciipp--pprreecciissiioonn.  The double-precision square root
           estimate instructions are not generated by default on
           low-precision machines, since they do not provide an
           estimate that converges after three steps.

       --mmvveecclliibbaabbii==_t_y_p_e
           Specifies the ABI type to use for vectorizing
           intrinsics using an external library.  The only type
           supported at present is "mass", which specifies to use
           IBM's Mathematical Acceleration Subsystem (MASS)



gcc-4.74                    2014-06-12                        307





GCC(1)                         GNU                         GCC(1)


           libraries for vectorizing intrinsics using external
           libraries.  GCC will currently emit calls to "acosd2",
           "acosf4", "acoshd2", "acoshf4", "asind2", "asinf4",
           "asinhd2", "asinhf4", "atan2d2", "atan2f4", "atand2",
           "atanf4", "atanhd2", "atanhf4", "cbrtd2", "cbrtf4",
           "cosd2", "cosf4", "coshd2", "coshf4", "erfcd2",
           "erfcf4", "erfd2", "erff4", "exp2d2", "exp2f4",
           "expd2", "expf4", "expm1d2", "expm1f4", "hypotd2",
           "hypotf4", "lgammad2", "lgammaf4", "log10d2",
           "log10f4", "log1pd2", "log1pf4", "log2d2", "log2f4",
           "logd2", "logf4", "powd2", "powf4", "sind2", "sinf4",
           "sinhd2", "sinhf4", "sqrtd2", "sqrtf4", "tand2",
           "tanf4", "tanhd2", and "tanhf4" when generating code
           for power7.  Both --ffttrreeee--vveeccttoorriizzee and
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss have to be enabled.  The
           MASS libraries will have to be specified at link time.

       --mmffrriizz
       --mmnnoo--ffrriizz
           Generate (do not generate) the "friz" instruction when
           the --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss option is used to
           optimize rounding of floating-point values to 64-bit
           integer and back to floating point.  The "friz"
           instruction does not return the same value if the
           floating-point number is too large to fit in an
           integer.

       --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
       --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
           Generate (do not generate) code to load up the static
           chain register (_r_1_1) when calling through a pointer on
           AIX and 64-bit Linux systems where a function pointer
           points to a 3-word descriptor giving the function
           address, TOC value to be loaded in register _r_2, and
           static chain value to be loaded in register _r_1_1.  The
           --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss is on by default.  You
           will not be able to call through pointers to nested
           functions or pointers to functions compiled in other
           languages that use the static chain if you use the
           --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss.

       --mmssaavvee--ttoocc--iinnddiirreecctt
       --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt
           Generate (do not generate) code to save the TOC value
           in the reserved stack location in the function
           prologue if the function calls through a pointer on
           AIX and 64-bit Linux systems.  If the TOC value is not
           saved in the prologue, it is saved just before the
           call through the pointer.  The --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt
           option is the default.

       _R_X _O_p_t_i_o_n_s

       These command-line options are defined for RX targets:



gcc-4.74                    2014-06-12                        308





GCC(1)                         GNU                         GCC(1)


       --mm6644bbiitt--ddoouubblleess
       --mm3322bbiitt--ddoouubblleess
           Make the "double" data type be 64 bits
           (--mm6644bbiitt--ddoouubblleess) or 32 bits (--mm3322bbiitt--ddoouubblleess) in
           size.  The default is --mm3322bbiitt--ddoouubblleess.  _N_o_t_e RX
           floating-point hardware only works on 32-bit values,
           which is why the default is --mm3322bbiitt--ddoouubblleess.

       --ffppuu
       --nnooffppuu
           Enables (--ffppuu) or disables (--nnooffppuu) the use of RX
           floating-point hardware.  The default is enabled for
           the _R_X_6_0_0 series and disabled for the _R_X_2_0_0 series.

           Floating-point instructions will only be generated for
           32-bit floating-point values however, so if the
           --mm6644bbiitt--ddoouubblleess option is in use then the FPU hardware
           will not be used for doubles.

           _N_o_t_e If the --ffppuu option is enabled then
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is also enabled
           automatically.  This is because the RX FPU
           instructions are themselves unsafe.

       --mmccppuu==_n_a_m_e
           Selects the type of RX CPU to be targeted.  Currently
           three types are supported, the generic _R_X_6_0_0 and _R_X_2_0_0
           series hardware and the specific _R_X_6_1_0 CPU.  The
           default is _R_X_6_0_0.

           The only difference between _R_X_6_0_0 and _R_X_6_1_0 is that
           the _R_X_6_1_0 does not support the "MVTIPL" instruction.

           The _R_X_2_0_0 series does not have a hardware floating-
           point unit and so --nnooffppuu is enabled by default when
           this type is selected.

       --mmbbiigg--eennddiiaann--ddaattaa
       --mmlliittttllee--eennddiiaann--ddaattaa
           Store data (but not code) in the big-endian format.
           The default is --mmlliittttllee--eennddiiaann--ddaattaa, i.e. to store
           data in the little-endian format.

       --mmssmmaallll--ddaattaa--lliimmiitt==_N
           Specifies the maximum size in bytes of global and
           static variables which can be placed into the small
           data area.  Using the small data area can lead to
           smaller and faster code, but the size of area is
           limited and it is up to the programmer to ensure that
           the area does not overflow.  Also when the small data
           area is used one of the RX's registers (usually "r13")
           is reserved for use pointing to this area, so it is no
           longer available for use by the compiler.  This could
           result in slower and/or larger code if variables which



gcc-4.74                    2014-06-12                        309





GCC(1)                         GNU                         GCC(1)


           once could have been held in the reserved register are
           now pushed onto the stack.

           Note, common variables (variables that have not been
           initialized) and constants are not placed into the
           small data area as they are assigned to other sections
           in the output executable.

           The default value is zero, which disables this
           feature.  Note, this feature is not enabled by default
           with higher optimization levels (--OO22 etc) because of
           the potentially detrimental effects of reserving a
           register.  It is up to the programmer to experiment
           and discover whether this feature is of benefit to
           their program.  See the description of the --mmppiidd
           option for a description of how the actual register to
           hold the small data area pointer is chosen.

       --mmssiimm
       --mmnnoo--ssiimm
           Use the simulator runtime.  The default is to use the
           libgloss board specific runtime.

       --mmaass110000--ssyynnttaaxx
       --mmnnoo--aass110000--ssyynnttaaxx
           When generating assembler output use a syntax that is
           compatible with Renesas's AS100 assembler.  This
           syntax can also be handled by the GAS assembler but it
           has some restrictions so generating it is not the
           default option.

       --mmmmaaxx--ccoonnssttaanntt--ssiizzee==_N
           Specifies the maximum size, in bytes, of a constant
           that can be used as an operand in a RX instruction.
           Although the RX instruction set does allow constants
           of up to 4 bytes in length to be used in instructions,
           a longer value equates to a longer instruction.  Thus
           in some circumstances it can be beneficial to restrict
           the size of constants that are used in instructions.
           Constants that are too big are instead placed into a
           constant pool and referenced via register indirection.

           The value _N can be between 0 and 4.  A value of 0 (the
           default) or 4 means that constants of any size are
           allowed.

       --mmrreellaaxx
           Enable linker relaxation.  Linker relaxation is a
           process whereby the linker will attempt to reduce the
           size of a program by finding shorter versions of
           various instructions.  Disabled by default.

       --mmiinntt--rreeggiisstteerr==_N
           Specify the number of registers to reserve for fast



gcc-4.74                    2014-06-12                        310





GCC(1)                         GNU                         GCC(1)


           interrupt handler functions.  The value _N can be
           between 0 and 4.  A value of 1 means that register
           "r13" will be reserved for the exclusive use of fast
           interrupt handlers.  A value of 2 reserves "r13" and
           "r12".  A value of 3 reserves "r13", "r12" and "r11",
           and a value of 4 reserves "r13" through "r10".  A
           value of 0, the default, does not reserve any
           registers.

       --mmssaavvee--aacccc--iinn--iinntteerrrruuppttss
           Specifies that interrupt handler functions should
           preserve the accumulator register.  This is only
           necessary if normal code might use the accumulator
           register, for example because it performs 64-bit
           multiplications.  The default is to ignore the
           accumulator as this makes the interrupt handlers
           faster.

       --mmppiidd
       --mmnnoo--ppiidd
           Enables the generation of position independent data.
           When enabled any access to constant data will done via
           an offset from a base address held in a register.
           This allows the location of constant data to be
           determined at run time without requiring the
           executable to be relocated, which is a benefit to
           embedded applications with tight memory constraints.
           Data that can be modified is not affected by this
           option.

           Note, using this feature reserves a register, usually
           "r13", for the constant data base address.  This can
           result in slower and/or larger code, especially in
           complicated functions.

           The actual register chosen to hold the constant data
           base address depends upon whether the
           --mmssmmaallll--ddaattaa--lliimmiitt and/or the --mmiinntt--rreeggiisstteerr command-
           line options are enabled.  Starting with register
           "r13" and proceeding downwards, registers are
           allocated first to satisfy the requirements of
           --mmiinntt--rreeggiisstteerr, then --mmppiidd and finally
           --mmssmmaallll--ddaattaa--lliimmiitt.  Thus it is possible for the small
           data area register to be "r8" if both --mmiinntt--rreeggiisstteerr==44
           and --mmppiidd are specified on the command line.

           By default this feature is not enabled.  The default
           can be restored via the --mmnnoo--ppiidd command-line option.

       _N_o_t_e_: The generic GCC command-line option --ffffiixxeedd--_r_e_g has
       special significance to the RX port when used with the
       "interrupt" function attribute.  This attribute indicates
       a function intended to process fast interrupts.  GCC will
       will ensure that it only uses the registers "r10", "r11",



gcc-4.74                    2014-06-12                        311





GCC(1)                         GNU                         GCC(1)


       "r12" and/or "r13" and only provided that the normal use
       of the corresponding registers have been restricted via
       the --ffffiixxeedd--_r_e_g or --mmiinntt--rreeggiisstteerr command-line options.

       _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s

       These are the --mm options defined for the S/390 and zSeries
       architecture.

       --mmhhaarrdd--ffllooaatt
       --mmssoofftt--ffllooaatt
           Use (do not use) the hardware floating-point
           instructions and registers for floating-point
           operations.  When --mmssoofftt--ffllooaatt is specified, functions
           in _l_i_b_g_c_c_._a will be used to perform floating-point
           operations.  When --mmhhaarrdd--ffllooaatt is specified, the
           compiler generates IEEE floating-point instructions.
           This is the default.

       --mmhhaarrdd--ddffpp
       --mmnnoo--hhaarrdd--ddffpp
           Use (do not use) the hardware decimal-floating-point
           instructions for decimal-floating-point operations.
           When --mmnnoo--hhaarrdd--ddffpp is specified, functions in _l_i_b_g_c_c_._a
           will be used to perform decimal-floating-point
           operations.  When --mmhhaarrdd--ddffpp is specified, the
           compiler generates decimal-floating-point hardware
           instructions.  This is the default for --mmaarrcchh==zz99--eecc or
           higher.

       --mmlloonngg--ddoouubbllee--6644
       --mmlloonngg--ddoouubbllee--112288
           These switches control the size of "long double" type.
           A size of 64 bits makes the "long double" type
           equivalent to the "double" type. This is the default.

       --mmbbaacckkcchhaaiinn
       --mmnnoo--bbaacckkcchhaaiinn
           Store (do not store) the address of the caller's frame
           as backchain pointer into the callee's stack frame.  A
           backchain may be needed to allow debugging using tools
           that do not understand DWARF-2 call frame information.
           When --mmnnoo--ppaacckkeedd--ssttaacckk is in effect, the backchain
           pointer is stored at the bottom of the stack frame;
           when --mmppaacckkeedd--ssttaacckk is in effect, the backchain is
           placed into the topmost word of the 96/160 byte
           register save area.

           In general, code compiled with --mmbbaacckkcchhaaiinn is call-
           compatible with code compiled with --mmmmoo--bbaacckkcchhaaiinn;
           however, use of the backchain for debugging purposes
           usually requires that the whole binary is built with
           --mmbbaacckkcchhaaiinn.  Note that the combination of
           --mmbbaacckkcchhaaiinn, --mmppaacckkeedd--ssttaacckk and --mmhhaarrdd--ffllooaatt is not



gcc-4.74                    2014-06-12                        312





GCC(1)                         GNU                         GCC(1)


           supported.  In order to build a linux kernel use
           --mmssoofftt--ffllooaatt.

           The default is to not maintain the backchain.

       --mmppaacckkeedd--ssttaacckk
       --mmnnoo--ppaacckkeedd--ssttaacckk
           Use (do not use) the packed stack layout.  When
           --mmnnoo--ppaacckkeedd--ssttaacckk is specified, the compiler uses the
           all fields of the 96/160 byte register save area only
           for their default purpose; unused fields still take up
           stack space.  When --mmppaacckkeedd--ssttaacckk is specified,
           register save slots are densely packed at the top of
           the register save area; unused space is reused for
           other purposes, allowing for more efficient use of the
           available stack space.  However, when --mmbbaacckkcchhaaiinn is
           also in effect, the topmost word of the save area is
           always used to store the backchain, and the return
           address register is always saved two words below the
           backchain.

           As long as the stack frame backchain is not used, code
           generated with --mmppaacckkeedd--ssttaacckk is call-compatible with
           code generated with --mmnnoo--ppaacckkeedd--ssttaacckk.  Note that some
           non-FSF releases of GCC 2.95 for S/390 or zSeries
           generated code that uses the stack frame backchain at
           run time, not just for debugging purposes.  Such code
           is not call-compatible with code compiled with
           --mmppaacckkeedd--ssttaacckk.  Also, note that the combination of
           --mmbbaacckkcchhaaiinn, --mmppaacckkeedd--ssttaacckk and --mmhhaarrdd--ffllooaatt is not
           supported.  In order to build a linux kernel use
           --mmssoofftt--ffllooaatt.

           The default is to not use the packed stack layout.

       --mmssmmaallll--eexxeecc
       --mmnnoo--ssmmaallll--eexxeecc
           Generate (or do not generate) code using the "bras"
           instruction to do subroutine calls.  This only works
           reliably if the total executable size does not exceed
           64k.  The default is to use the "basr" instruction
           instead, which does not have this limitation.

       --mm6644
       --mm3311
           When --mm3311 is specified, generate code compliant to the
           GNU/Linux for S/390 ABI.  When --mm6644 is specified,
           generate code compliant to the GNU/Linux for zSeries
           ABI.  This allows GCC in particular to generate 64-bit
           instructions.  For the ss339900 targets, the default is
           --mm3311, while the ss339900xx targets default to --mm6644.

       --mmzzaarrcchh




gcc-4.74                    2014-06-12                        313





GCC(1)                         GNU                         GCC(1)


       --mmeessaa
           When --mmzzaarrcchh is specified, generate code using the
           instructions available on z/Architecture.  When --mmeessaa
           is specified, generate code using the instructions
           available on ESA/390.  Note that --mmeessaa is not possible
           with --mm6644.  When generating code compliant to the
           GNU/Linux for S/390 ABI, the default is --mmeessaa.  When
           generating code compliant to the GNU/Linux for zSeries
           ABI, the default is --mmzzaarrcchh.

       --mmmmvvccllee
       --mmnnoo--mmvvccllee
           Generate (or do not generate) code using the "mvcle"
           instruction to perform block moves.  When --mmnnoo--mmvvccllee
           is specified, use a "mvc" loop instead.  This is the
           default unless optimizing for size.

       --mmddeebbuugg
       --mmnnoo--ddeebbuugg
           Print (or do not print) additional debug information
           when compiling.  The default is to not print debug
           information.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate code that will run on _c_p_u_-_t_y_p_e, which is the
           name of a system representing a certain processor
           type.  Possible values for _c_p_u_-_t_y_p_e are gg55, gg66, zz990000,
           zz999900, zz99--110099, zz99--eecc and zz1100.  When generating code
           using the instructions available on z/Architecture,
           the default is --mmaarrcchh==zz990000.  Otherwise, the default is
           --mmaarrcchh==gg55.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the
           generated code, except for the ABI and the set of
           available instructions.  The list of _c_p_u_-_t_y_p_e values
           is the same as for --mmaarrcchh.  The default is the value
           used for --mmaarrcchh.

       --mmttppff--ttrraaccee
       --mmnnoo--ttppff--ttrraaccee
           Generate code that adds (does not add) in TPF OS
           specific branches to trace routines in the operating
           system.  This option is off by default, even when
           compiling for the TPF OS.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating-
           point multiply and accumulate instructions.  These
           instructions are generated by default if hardware
           floating point is used.





gcc-4.74                    2014-06-12                        314





GCC(1)                         GNU                         GCC(1)


       --mmwwaarrnn--ffrraammeessiizzee==_f_r_a_m_e_s_i_z_e
           Emit a warning if the current function exceeds the
           given frame size.  Because this is a compile-time
           check it doesn't need to be a real problem when the
           program runs.  It is intended to identify functions
           that most probably cause a stack overflow.  It is
           useful to be used in an environment with limited stack
           size e.g. the linux kernel.

       --mmwwaarrnn--ddyynnaammiiccssttaacckk
           Emit a warning if the function calls alloca or uses
           dynamically sized arrays.  This is generally a bad
           idea with a limited stack size.

       --mmssttaacckk--gguuaarrdd==_s_t_a_c_k_-_g_u_a_r_d
       --mmssttaacckk--ssiizzee==_s_t_a_c_k_-_s_i_z_e
           If these options are provided the s390 back end emits
           additional instructions in the function prologue which
           trigger a trap if the stack size is _s_t_a_c_k_-_g_u_a_r_d bytes
           above the _s_t_a_c_k_-_s_i_z_e (remember that the stack on s390
           grows downward).  If the _s_t_a_c_k_-_g_u_a_r_d option is omitted
           the smallest power of 2 larger than the frame size of
           the compiled function is chosen.  These options are
           intended to be used to help debugging stack overflow
           problems.  The additionally emitted code causes only
           little overhead and hence can also be used in
           production like systems without greater performance
           degradation.  The given values have to be exact powers
           of 2 and _s_t_a_c_k_-_s_i_z_e has to be greater than _s_t_a_c_k_-_g_u_a_r_d
           without exceeding 64k.  In order to be efficient the
           extra code makes the assumption that the stack starts
           at an address aligned to the value given by _s_t_a_c_k_-
           _s_i_z_e.  The _s_t_a_c_k_-_g_u_a_r_d option can only be used in
           conjunction with _s_t_a_c_k_-_s_i_z_e.

       _S_c_o_r_e _O_p_t_i_o_n_s

       These options are defined for Score implementations:

       --mmeebb
           Compile code for big-endian mode.  This is the
           default.

       --mmeell
           Compile code for little-endian mode.

       --mmnnhhwwlloooopp
           Disable generate bcnz instruction.

       --mmuullss
           Enable generate unaligned load and store instruction.

       --mmmmaacc
           Enable the use of multiply-accumulate instructions.



gcc-4.74                    2014-06-12                        315





GCC(1)                         GNU                         GCC(1)


           Disabled by default.

       --mmssccoorree55
           Specify the SCORE5 as the target architecture.

       --mmssccoorree55uu
           Specify the SCORE5U of the target architecture.

       --mmssccoorree77
           Specify the SCORE7 as the target architecture. This is
           the default.

       --mmssccoorree77dd
           Specify the SCORE7D as the target architecture.

       _S_H _O_p_t_i_o_n_s

       These --mm options are defined for the SH implementations:

       --mm11 Generate code for the SH1.

       --mm22 Generate code for the SH2.

       --mm22ee
           Generate code for the SH2e.

       --mm22aa--nnooffppuu
           Generate code for the SH2a without FPU, or for a
           SH2a-FPU in such a way that the floating-point unit is
           not used.

       --mm22aa--ssiinnggllee--oonnllyy
           Generate code for the SH2a-FPU, in such a way that no
           double-precision floating-point operations are used.

       --mm22aa--ssiinnggllee
           Generate code for the SH2a-FPU assuming the floating-
           point unit is in single-precision mode by default.

       --mm22aa
           Generate code for the SH2a-FPU assuming the floating-
           point unit is in double-precision mode by default.

       --mm33 Generate code for the SH3.

       --mm33ee
           Generate code for the SH3e.

       --mm44--nnooffppuu
           Generate code for the SH4 without a floating-point
           unit.

       --mm44--ssiinnggllee--oonnllyy
           Generate code for the SH4 with a floating-point unit



gcc-4.74                    2014-06-12                        316





GCC(1)                         GNU                         GCC(1)


           that only supports single-precision arithmetic.

       --mm44--ssiinnggllee
           Generate code for the SH4 assuming the floating-point
           unit is in single-precision mode by default.

       --mm44 Generate code for the SH4.

       --mm44aa--nnooffppuu
           Generate code for the SH4al-dsp, or for a SH4a in such
           a way that the floating-point unit is not used.

       --mm44aa--ssiinnggllee--oonnllyy
           Generate code for the SH4a, in such a way that no
           double-precision floating-point operations are used.

       --mm44aa--ssiinnggllee
           Generate code for the SH4a assuming the floating-point
           unit is in single-precision mode by default.

       --mm44aa
           Generate code for the SH4a.

       --mm44aall
           Same as --mm44aa--nnooffppuu, except that it implicitly passes
           --ddsspp to the assembler.  GCC doesn't generate any DSP
           instructions at the moment.

       --mmbb Compile code for the processor in big-endian mode.

       --mmll Compile code for the processor in little-endian mode.

       --mmddaalliiggnn
           Align doubles at 64-bit boundaries.  Note that this
           changes the calling conventions, and thus some
           functions from the standard C library will not work
           unless you recompile it first with --mmddaalliiggnn.

       --mmrreellaaxx
           Shorten some address references at link time, when
           possible; uses the linker option --rreellaaxx.

       --mmbbiiggttaabbllee
           Use 32-bit offsets in "switch" tables.  The default is
           to use 16-bit offsets.

       --mmbbiittooppss
           Enable the use of bit manipulation instructions on
           SH2A.

       --mmffmmoovvdd
           Enable the use of the instruction "fmovd".  Check
           --mmddaalliiggnn for alignment constraints.




gcc-4.74                    2014-06-12                        317





GCC(1)                         GNU                         GCC(1)


       --mmhhiittaacchhii
           Comply with the calling conventions defined by
           Renesas.

       --mmrreenneessaass
           Comply with the calling conventions defined by
           Renesas.

       --mmnnoo--rreenneessaass
           Comply with the calling conventions defined for GCC
           before the Renesas conventions were available.  This
           option is the default for all targets of the SH
           toolchain.

       --mmnnoommaaccssaavvee
           Mark the "MAC" register as call-clobbered, even if
           --mmhhiittaacchhii is given.

       --mmiieeeeee
       --mmnnoo--iieeeeee
           Control the IEEE compliance of floating-point
           comparisons, which affects the handling of cases where
           the result of a comparison is unordered.  By default
           --mmiieeeeee is implicitly enabled.  If --ffffiinniittee--mmaatthh--oonnllyy
           is enabled --mmnnoo--iieeeeee is implicitly set, which results
           in faster floating-point greater-equal and less-equal
           comparisons.  The implcit settings can be overridden
           by specifying either --mmiieeeeee or --mmnnoo--iieeeeee.

       --mmiinnlliinnee--iicc__iinnvvaalliiddaattee
           Inline code to invalidate instruction cache entries
           after setting up nested function trampolines.  This
           option has no effect if -musermode is in effect and
           the selected code generation option (e.g. -m4) does
           not allow the use of the icbi instruction.  If the
           selected code generation option does not allow the use
           of the icbi instruction, and -musermode is not in
           effect, the inlined code will manipulate the
           instruction cache address array directly with an
           associative write.  This not only requires privileged
           mode, but it will also fail if the cache line had been
           mapped via the TLB and has become unmapped.

       --mmiissiizzee
           Dump instruction size and location in the assembly
           code.

       --mmppaaddssttrruucctt
           This option is deprecated.  It pads structures to
           multiple of 4 bytes, which is incompatible with the SH
           ABI.

       --mmssoofftt--aattoommiicc
           Generate GNU/Linux compatible gUSA software atomic



gcc-4.74                    2014-06-12                        318





GCC(1)                         GNU                         GCC(1)


           sequences for the atomic built-in functions.  The
           generated atomic sequences require support from the
           interrupt / exception handling code of the system and
           are only suitable for single-core systems.  They will
           not perform correctly on multi-core systems.  This
           option is enabled by default when the target is
           "sh-*-linux*".  For details on the atomic built-in
           functions see ____aattoommiicc BBuuiillttiinnss.

       --mmssppaaccee
           Optimize for space instead of speed.  Implied by --OOss.

       --mmpprreeffeerrggoott
           When generating position-independent code, emit
           function calls using the Global Offset Table instead
           of the Procedure Linkage Table.

       --mmuusseerrmmooddee
           Don't generate privileged mode only code; implies
           -mno-inline-ic_invalidate if the inlined code would
           not work in user mode.  This is the default when the
           target is "sh-*-linux*".

       --mmuullttccoosstt==_n_u_m_b_e_r
           Set the cost to assume for a multiply insn.

       --mmddiivv==_s_t_r_a_t_e_g_y
           Set the division strategy to be used for integer
           division operations.  For SHmedia _s_t_r_a_t_e_g_y can be one
           of:

           ffpp  Performs the operation in floating point.  This
               has a very high latency, but needs only a few
               instructions, so it might be a good choice if your
               code has enough easily-exploitable ILP to allow
               the compiler to schedule the floating-point
               instructions together with other instructions.
               Division by zero causes a floating-point
               exception.

           iinnvv Uses integer operations to calculate the inverse
               of the divisor, and then multiplies the dividend
               with the inverse.  This strategy allows CSE and
               hoisting of the inverse calculation.  Division by
               zero calculates an unspecified result, but does
               not trap.

           iinnvv::mmiinnllaatt
               A variant of iinnvv where, if no CSE or hoisting
               opportunities have been found, or if the entire
               operation has been hoisted to the same place, the
               last stages of the inverse calculation are
               intertwined with the final multiply to reduce the
               overall latency, at the expense of using a few



gcc-4.74                    2014-06-12                        319





GCC(1)                         GNU                         GCC(1)


               more instructions, and thus offering fewer
               scheduling opportunities with other code.

           ccaallll
               Calls a library function that usually implements
               the iinnvv::mmiinnllaatt strategy.  This gives high code
               density for "m5-*media-nofpu" compilations.

           ccaallll22
               Uses a different entry point of the same library
               function, where it assumes that a pointer to a
               lookup table has already been set up, which
               exposes the pointer load to CSE and code hoisting
               optimizations.

           iinnvv::ccaallll
           iinnvv::ccaallll22
           iinnvv::ffpp
               Use the iinnvv algorithm for initial code generation,
               but if the code stays unoptimized, revert to the
               ccaallll, ccaallll22, or ffpp strategies, respectively.  Note
               that the potentially-trapping side effect of
               division by zero is carried by a separate
               instruction, so it is possible that all the
               integer instructions are hoisted out, but the
               marker for the side effect stays where it is.  A
               recombination to floating-point operations or a
               call is not possible in that case.

           iinnvv2200uu
           iinnvv2200ll
               Variants of the iinnvv::mmiinnllaatt strategy.  In the case
               that the inverse calculation is not separated from
               the multiply, they speed up division where the
               dividend fits into 20 bits (plus sign where
               applicable) by inserting a test to skip a number
               of operations in this case; this test slows down
               the case of larger dividends.  iinnvv2200uu assumes the
               case of a such a small dividend to be unlikely,
               and iinnvv2200ll assumes it to be likely.

           For targets other than SHmedia _s_t_r_a_t_e_g_y can be one of:

           ccaallll--ddiivv11
               Calls a library function that uses the single-step
               division instruction "div1" to perform the
               operation.  Division by zero calculates an
               unspecified result and does not trap.  This is the
               default except for SH4, SH2A and SHcompact.

           ccaallll--ffpp
               Calls a library function that performs the
               operation in double precision floating point.
               Division by zero causes a floating-point



gcc-4.74                    2014-06-12                        320





GCC(1)                         GNU                         GCC(1)


               exception.  This is the default for SHcompact with
               FPU.  Specifying this for targets that do not have
               a double precision FPU will default to
               "call-div1".

           ccaallll--ttaabbllee
               Calls a library function that uses a lookup table
               for small divisors and the "div1" instruction with
               case distinction for larger divisors.  Division by
               zero calculates an unspecified result and does not
               trap.  This is the default for SH4.  Specifying
               this for targets that do not have dynamic shift
               instructions will default to "call-div1".

           When a division strategy has not been specified the
           default strategy will be selected based on the current
           target.  For SH2A the default strategy is to use the
           "divs" and "divu" instructions instead of library
           function calls.

       --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           Reserve space once for outgoing arguments in the
           function prologue rather than around each call.
           Generally beneficial for performance and size.  Also
           needed for unwinding to avoid changing the stack frame
           around conditional code.

       --mmddiivvssii33__lliibbffuunncc==_n_a_m_e
           Set the name of the library function used for 32-bit
           signed division to _n_a_m_e.  This only affect the name
           used in the call and inv:call division strategies, and
           the compiler will still expect the same sets of
           input/output/clobbered registers as if this option was
           not present.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as
           fixed registers.  A fixed register is one that the
           register allocator can not use.  This is useful when
           compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple
           register ranges can be specified separated by a comma.

       --mmaaddjjuusstt--uunnrroollll
           Throttle unrolling to avoid thrashing target
           registers.  This option only has an effect if the gcc
           code base supports the TARGET_ADJUST_UNROLL_MAX target
           hook.

       --mmiinnddeexxeedd--aaddddrreessssiinngg
           Enable the use of the indexed addressing mode for
           SHmedia32/SHcompact.  This is only safe if the
           hardware and/or OS implement 32-bit wrap-around
           semantics for the indexed addressing mode.  The



gcc-4.74                    2014-06-12                        321





GCC(1)                         GNU                         GCC(1)


           architecture allows the implementation of processors
           with 64-bit MMU, which the OS could use to get 32-bit
           addressing, but since no current hardware
           implementation supports this or any other way to make
           the indexed addressing mode safe to use in the 32-bit
           ABI, the default is --mmnnoo--iinnddeexxeedd--aaddddrreessssiinngg.

       --mmggeettttrrccoosstt==_n_u_m_b_e_r
           Set the cost assumed for the gettr instruction to
           _n_u_m_b_e_r.  The default is 2 if --mmpptt--ffiixxeedd is in effect,
           100 otherwise.

       --mmpptt--ffiixxeedd
           Assume pt* instructions won't trap.  This will
           generally generate better scheduled code, but is
           unsafe on current hardware.  The current architecture
           definition says that ptabs and ptrel trap when the
           target anded with 3 is 3.  This has the unintentional
           effect of making it unsafe to schedule ptabs / ptrel
           before a branch, or hoist it out of a loop.  For
           example, __do_global_ctors, a part of libgcc that runs
           constructors at program startup, calls functions in a
           list which is delimited by -1.  With the -mpt-fixed
           option, the ptabs will be done before testing against
           -1.  That means that all the constructors will be run
           a bit quicker, but when the loop comes to the end of
           the list, the program crashes because ptabs loads -1
           into a target register.  Since this option is unsafe
           for any hardware implementing the current architecture
           specification, the default is -mno-pt-fixed.  Unless
           the user specifies a specific cost with --mmggeettttrrccoosstt,
           -mno-pt-fixed also implies --mmggeettttrrccoosstt==110000; this
           deters register allocation using target registers for
           storing ordinary integers.

       --mmiinnvvaalliidd--ssyymmbboollss
           Assume symbols might be invalid.  Ordinary function
           symbols generated by the compiler will always be valid
           to load with movi/shori/ptabs or movi/shori/ptrel, but
           with assembler and/or linker tricks it is possible to
           generate symbols that will cause ptabs / ptrel to
           trap.  This option is only meaningful when
           --mmnnoo--pptt--ffiixxeedd is in effect.  It will then prevent
           cross-basic-block cse, hoisting and most scheduling of
           symbol loads.  The default is --mmnnoo--iinnvvaalliidd--ssyymmbboollss.

       --mmbbrraanncchh--ccoosstt==_n_u_m
           Assume _n_u_m to be the cost for a branch instruction.
           Higher numbers will make the compiler try to generate
           more branch-free code if possible.  If not specified
           the value is selected depending on the processor type
           that is being compiled for.





gcc-4.74                    2014-06-12                        322





GCC(1)                         GNU                         GCC(1)


       --mmccbbrraanncchhddii
           Enable the "cbranchdi4" instruction pattern.

       --mmccmmppeeqqddii
           Emit the "cmpeqdi_t" instruction pattern even when
           --mmccbbrraanncchhddii is in effect.

       --mmffuusseedd--mmaadddd
           Allow the usage of the "fmac" instruction
           (floating-point multiply-accumulate) if the processor
           type supports it.  Enabling this option might generate
           code that produces different numeric floating-point
           results compared to strict IEEE 754 arithmetic.

       --mmpprreetteenndd--ccmmoovvee
           Prefer zero-displacement conditional branches for
           conditional move instruction patterns.  This can
           result in faster code on the SH4 processor.

       _S_o_l_a_r_i_s _2 _O_p_t_i_o_n_s

       These --mm options are supported on Solaris 2:

       --mmiimmppuurree--tteexxtt
           --mmiimmppuurree--tteexxtt, used in addition to --sshhaarreedd, tells the
           compiler to not pass --zz tteexxtt to the linker when
           linking a shared object.  Using this option, you can
           link position-dependent code into a shared object.

           --mmiimmppuurree--tteexxtt suppresses the "relocations remain
           against allocatable but non-writable sections" linker
           error message.  However, the necessary relocations
           will trigger copy-on-write, and the shared object is
           not actually shared across processes.  Instead of
           using --mmiimmppuurree--tteexxtt, you should compile all source
           code with --ffppiicc or --ffPPIICC.

       These switches are supported in addition to the above on
       Solaris 2:

       --pptthhrreeaaddss
           Add support for multithreading using the POSIX threads
           library.  This option sets flags for both the
           preprocessor and linker.  This option does not affect
           the thread safety of object code produced  by the
           compiler or that of libraries supplied with it.

       --pptthhrreeaadd
           This is a synonym for --pptthhrreeaaddss.

       _S_P_A_R_C _O_p_t_i_o_n_s

       These --mm options are supported on the SPARC:




gcc-4.74                    2014-06-12                        323





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--aapppp--rreeggss
       --mmaapppp--rreeggss
           Specify --mmaapppp--rreeggss to generate output using the global
           registers 2 through 4, which the SPARC SVR4 ABI
           reserves for applications.  Like the global register
           1, each global register 2 through 4 is then treated as
           an allocable register that is clobbered by function
           calls.  This is the default.

           To be fully SVR4 ABI compliant at the cost of some
           performance loss, specify --mmnnoo--aapppp--rreeggss.  You should
           compile libraries and system software with this
           option.

       --mmffllaatt
       --mmnnoo--ffllaatt
           With --mmffllaatt, the compiler does not generate
           save/restore instructions and uses a "flat" or single
           register window model.  This model is compatible with
           the regular register window model.  The local
           registers and the input registers (0--5) are still
           treated as "call-saved" registers and will be saved on
           the stack as needed.

           With --mmnnoo--ffllaatt (the default), the compiler generates
           save/restore instructions (except for leaf functions).
           This is the normal operating mode.

       --mmffppuu
       --mmhhaarrdd--ffllooaatt
           Generate output containing floating-point
           instructions.  This is the default.

       --mmnnoo--ffppuu
       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating
           point.  WWaarrnniinngg:: the requisite libraries are not
           available for all SPARC targets.  Normally the
           facilities of the machine's usual C compiler are used,
           but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.  The
           embedded targets ssppaarrcc--**--aaoouutt and ssppaarrcclliittee--**--** do
           provide software floating-point support.

           --mmssoofftt--ffllooaatt changes the calling convention in the
           output file; therefore, it is only useful if you
           compile _a_l_l of a program with this option.  In
           particular, you need to compile _l_i_b_g_c_c_._a, the library
           that comes with GCC, with --mmssoofftt--ffllooaatt in order for
           this to work.

       --mmhhaarrdd--qquuaadd--ffllooaatt
           Generate output containing quad-word (long double)



gcc-4.74                    2014-06-12                        324





GCC(1)                         GNU                         GCC(1)


           floating-point instructions.

       --mmssoofftt--qquuaadd--ffllooaatt
           Generate output containing library calls for quad-word
           (long double) floating-point instructions.  The
           functions called are those specified in the SPARC ABI.
           This is the default.

           As of this writing, there are no SPARC implementations
           that have hardware support for the quad-word floating-
           point instructions.  They all invoke a trap handler
           for one of these instructions, and then the trap
           handler emulates the effect of the instruction.
           Because of the trap handler overhead, this is much
           slower than calling the ABI library routines.  Thus
           the --mmssoofftt--qquuaadd--ffllooaatt option is the default.

       --mmnnoo--uunnaalliiggnneedd--ddoouubblleess
       --mmuunnaalliiggnneedd--ddoouubblleess
           Assume that doubles have 8-byte alignment.  This is
           the default.

           With --mmuunnaalliiggnneedd--ddoouubblleess, GCC assumes that doubles
           have 8-byte alignment only if they are contained in
           another type, or if they have an absolute address.
           Otherwise, it assumes they have 4-byte alignment.
           Specifying this option avoids some rare compatibility
           problems with code generated by other compilers.  It
           is not the default because it results in a performance
           loss, especially for floating-point code.

       --mmnnoo--ffaasstteerr--ssttrruuccttss
       --mmffaasstteerr--ssttrruuccttss
           With --mmffaasstteerr--ssttrruuccttss, the compiler assumes that
           structures should have 8-byte alignment.  This enables
           the use of pairs of "ldd" and "std" instructions for
           copies in structure assignment, in place of twice as
           many "ld" and "st" pairs.  However, the use of this
           changed alignment directly violates the SPARC ABI.
           Thus, it's intended only for use on targets where the
           developer acknowledges that their resulting code will
           not be directly in line with the rules of the ABI.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set, register set, and instruction
           scheduling parameters for machine type _c_p_u___t_y_p_e.
           Supported values for _c_p_u___t_y_p_e are vv77, ccyypprreessss, vv88,
           ssuuppeerrssppaarrcc, hhyyppeerrssppaarrcc, lleeoonn, ssppaarrcclliittee, ff993300, ff993344,
           ssppaarrcclliittee8866xx, ssppaarrcclleett, ttsscc770011, vv99, uullttrraassppaarrcc,
           uullttrraassppaarrcc33, nniiaaggaarraa, nniiaaggaarraa22, nniiaaggaarraa33, and
           nniiaaggaarraa44.

           Native Solaris and GNU/Linux toolchains also support
           the value nnaattiivvee, which selects the best architecture



gcc-4.74                    2014-06-12                        325





GCC(1)                         GNU                         GCC(1)


           option for the host processor.  --mmccppuu==nnaattiivvee has no
           effect if GCC does not recognize the processor.

           Default instruction scheduling parameters are used for
           values that select an architecture and not an
           implementation.  These are vv77, vv88, ssppaarrcclliittee,
           ssppaarrcclleett, vv99.

           Here is a list of each supported architecture and
           their supported implementations.

           v7  cypress

           v8  supersparc, hypersparc, leon

           sparclite
               f930, f934, sparclite86x

           sparclet
               tsc701

           v9  ultrasparc, ultrasparc3, niagara, niagara2,
               niagara3, niagara4

           By default (unless configured otherwise), GCC
           generates code for the V7 variant of the SPARC
           architecture.  With --mmccppuu==ccyypprreessss, the compiler
           additionally optimizes it for the Cypress CY7C602
           chip, as used in the SPARCStation/SPARCServer 3xx
           series.  This is also appropriate for the older
           SPARCStation 1, 2, IPX etc.

           With --mmccppuu==vv88, GCC generates code for the V8 variant
           of the SPARC architecture.  The only difference from
           V7 code is that the compiler emits the integer
           multiply and integer divide instructions which exist
           in SPARC-V8 but not in SPARC-V7.  With
           --mmccppuu==ssuuppeerrssppaarrcc, the compiler additionally optimizes
           it for the SuperSPARC chip, as used in the
           SPARCStation 10, 1000 and 2000 series.

           With --mmccppuu==ssppaarrcclliittee, GCC generates code for the
           SPARClite variant of the SPARC architecture.  This
           adds the integer multiply, integer divide step and
           scan ("ffs") instructions which exist in SPARClite but
           not in SPARC-V7.  With --mmccppuu==ff993300, the compiler
           additionally optimizes it for the Fujitsu MB86930
           chip, which is the original SPARClite, with no FPU.
           With --mmccppuu==ff993344, the compiler additionally optimizes
           it for the Fujitsu MB86934 chip, which is the more
           recent SPARClite with FPU.

           With --mmccppuu==ssppaarrcclleett, GCC generates code for the
           SPARClet variant of the SPARC architecture.  This adds



gcc-4.74                    2014-06-12                        326





GCC(1)                         GNU                         GCC(1)


           the integer multiply, multiply/accumulate, integer
           divide step and scan ("ffs") instructions which exist
           in SPARClet but not in SPARC-V7.  With --mmccppuu==ttsscc770011,
           the compiler additionally optimizes it for the TEMIC
           SPARClet chip.

           With --mmccppuu==vv99, GCC generates code for the V9 variant
           of the SPARC architecture.  This adds 64-bit integer
           and floating-point move instructions, 3 additional
           floating-point condition code registers and
           conditional move instructions.  With --mmccppuu==uullttrraassppaarrcc,
           the compiler additionally optimizes it for the Sun
           UltraSPARC I/II/IIi chips.  With --mmccppuu==uullttrraassppaarrcc33,
           the compiler additionally optimizes it for the Sun
           UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With
           --mmccppuu==nniiaaggaarraa, the compiler additionally optimizes it
           for Sun UltraSPARC T1 chips.  With --mmccppuu==nniiaaggaarraa22, the
           compiler additionally optimizes it for Sun UltraSPARC
           T2 chips. With --mmccppuu==nniiaaggaarraa33, the compiler
           additionally optimizes it for Sun UltraSPARC T3 chips.
           With --mmccppuu==nniiaaggaarraa44, the compiler additionally
           optimizes it for Sun UltraSPARC T4 chips.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine
           type _c_p_u___t_y_p_e, but do not set the instruction set or
           register set that the option --mmccppuu==_c_p_u___t_y_p_e would.

           The same values for --mmccppuu==_c_p_u___t_y_p_e can be used for
           --mmttuunnee==_c_p_u___t_y_p_e, but the only useful values are those
           that select a particular CPU implementation.  Those
           are ccyypprreessss, ssuuppeerrssppaarrcc, hhyyppeerrssppaarrcc, lleeoonn, ff993300, ff993344,
           ssppaarrcclliittee8866xx, ttsscc770011, uullttrraassppaarrcc, uullttrraassppaarrcc33,
           nniiaaggaarraa, nniiaaggaarraa22, nniiaaggaarraa33 and nniiaaggaarraa44.  With native
           Solaris and GNU/Linux toolchains, nnaattiivvee can also be
           used.

       --mmvv88pplluuss
       --mmnnoo--vv88pplluuss
           With --mmvv88pplluuss, GCC generates code for the SPARC-V8+
           ABI.  The difference from the V8 ABI is that the
           global and out registers are considered 64 bits wide.
           This is enabled by default on Solaris in 32-bit mode
           for all SPARC-V9 processors.

       --mmvviiss
       --mmnnoo--vviiss
           With --mmvviiss, GCC generates code that takes advantage of
           the UltraSPARC Visual Instruction Set extensions.  The
           default is --mmnnoo--vviiss.

       --mmvviiss22
       --mmnnoo--vviiss22
           With --mmvviiss22, GCC generates code that takes advantage



gcc-4.74                    2014-06-12                        327





GCC(1)                         GNU                         GCC(1)


           of version 2.0 of the UltraSPARC Visual Instruction
           Set extensions.  The default is --mmvviiss22 when targetting
           a cpu that supports such instructions, such as
           UltraSPARC-III and later.  Setting --mmvviiss22 also sets
           --mmvviiss.

       --mmvviiss33
       --mmnnoo--vviiss33
           With --mmvviiss33, GCC generates code that takes advantage
           of version 3.0 of the UltraSPARC Visual Instruction
           Set extensions.  The default is --mmvviiss33 when targetting
           a cpu that supports such instructions, such as
           niagara-3 and later.  Setting --mmvviiss33 also sets --mmvviiss22
           and --mmvviiss.

       --mmppooppcc
       --mmnnoo--ppooppcc
           With --mmppooppcc, GCC generates code that takes advantage
           of the UltraSPARC population count instruction.  The
           default is --mmppooppcc when targetting a cpu that supports
           such instructions, such as Niagara-2 and later.

       --mmffmmaaff
       --mmnnoo--ffmmaaff
           With --mmffmmaaff, GCC generates code that takes advantage
           of the UltraSPARC Fused Multiply-Add Floating-point
           extensions.  The default is --mmffmmaaff when targetting a
           cpu that supports such instructions, such as Niagara-3
           and later.

       --mmffiixx--aatt669977ff
           Enable the documented workaround for the single
           erratum of the Atmel AT697F processor (which
           corresponds to erratum #13 of the AT697E processor).

       These --mm options are supported in addition to the above on
       SPARC-V9 processors in 64-bit environments:

       --mm3322
       --mm6644
           Generate code for a 32-bit or 64-bit environment.  The
           32-bit environment sets int, long and pointer to 32
           bits.  The 64-bit environment sets int to 32 bits and
           long and pointer to 64 bits.

       --mmccmmooddeell==_w_h_i_c_h
           Set the code model to one of

           mmeeddllooww
               The Medium/Low code model: 64-bit addresses,
               programs must be linked in the low 32 bits of
               memory.  Programs can be statically or dynamically
               linked.




gcc-4.74                    2014-06-12                        328





GCC(1)                         GNU                         GCC(1)


           mmeeddmmiidd
               The Medium/Middle code model: 64-bit addresses,
               programs must be linked in the low 44 bits of
               memory, the text and data segments must be less
               than 2GB in size and the data segment must be
               located within 2GB of the text segment.

           mmeeddaannyy
               The Medium/Anywhere code model: 64-bit addresses,
               programs may be linked anywhere in memory, the
               text and data segments must be less than 2GB in
               size and the data segment must be located within
               2GB of the text segment.

           eemmbbmmeeddaannyy
               The Medium/Anywhere code model for embedded
               systems: 64-bit addresses, the text and data
               segments must be less than 2GB in size, both
               starting anywhere in memory (determined at link
               time).  The global register %g4 points to the base
               of the data segment.  Programs are statically
               linked and PIC is not supported.

       --mmmmeemmoorryy--mmooddeell==_m_e_m_-_m_o_d_e_l
           Set the memory model in force on the processor to one
           of

           ddeeffaauulltt
               The default memory model for the processor and
               operating system.

           rrmmoo Relaxed Memory Order

           ppssoo Partial Store Order

           ttssoo Total Store Order

           sscc  Sequential Consistency

           These memory models are formally defined in Appendix D
           of the Sparc V9 architecture manual, as set in the
           processor's "PSTATE.MM" field.

       --mmssttaacckk--bbiiaass
       --mmnnoo--ssttaacckk--bbiiaass
           With --mmssttaacckk--bbiiaass, GCC assumes that the stack pointer,
           and frame pointer if present, are offset by -2047
           which must be added back when making stack frame
           references.  This is the default in 64-bit mode.
           Otherwise, assume no such offset is present.

       _S_P_U _O_p_t_i_o_n_s

       These --mm options are supported on the SPU:



gcc-4.74                    2014-06-12                        329





GCC(1)                         GNU                         GCC(1)


       --mmwwaarrnn--rreelloocc
       --mmeerrrroorr--rreelloocc
           The loader for SPU does not handle dynamic
           relocations.  By default, GCC will give an error when
           it generates code that requires a dynamic relocation.
           --mmnnoo--eerrrroorr--rreelloocc disables the error, --mmwwaarrnn--rreelloocc will
           generate a warning instead.

       --mmssaaffee--ddmmaa
       --mmuunnssaaffee--ddmmaa
           Instructions that initiate or test completion of DMA
           must not be reordered with respect to loads and stores
           of the memory that is being accessed.  Users typically
           address this problem using the volatile keyword, but
           that can lead to inefficient code in places where the
           memory is known to not change.  Rather than mark the
           memory as volatile we treat the DMA instructions as
           potentially effecting all memory.  With --mmuunnssaaffee--ddmmaa
           users must use the volatile keyword to protect memory
           accesses.

       --mmbbrraanncchh--hhiinnttss
           By default, GCC will generate a branch hint
           instruction to avoid pipeline stalls for always taken
           or probably taken branches.  A hint will not be
           generated closer than 8 instructions away from its
           branch.  There is little reason to disable them,
           except for debugging purposes, or to make an object a
           little bit smaller.

       --mmssmmaallll--mmeemm
       --mmllaarrggee--mmeemm
           By default, GCC generates code assuming that addresses
           are never larger than 18 bits.  With --mmllaarrggee--mmeemm code
           is generated that assumes a full 32-bit address.

       --mmssttddmmaaiinn
           By default, GCC links against startup code that
           assumes the SPU-style main function interface (which
           has an unconventional parameter list).  With
           --mmssttddmmaaiinn, GCC will link your program against startup
           code that assumes a C99-style interface to "main",
           including a local copy of "argv" strings.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as
           fixed registers.  A fixed register is one that the
           register allocator can not use.  This is useful when
           compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple
           register ranges can be specified separated by a comma.

       --mmeeaa3322




gcc-4.74                    2014-06-12                        330





GCC(1)                         GNU                         GCC(1)


       --mmeeaa6644
           Compile code assuming that pointers to the PPU address
           space accessed via the "__ea" named address space
           qualifier are either 32 or 64 bits wide.  The default
           is 32 bits.  As this is an ABI changing option, all
           object code in an executable must be compiled with the
           same setting.

       --mmaaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn
       --mmnnoo--aaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn
           Allow/disallow treating the "__ea" address space as
           superset of the generic address space.  This enables
           explicit type casts between "__ea" and generic pointer
           as well as implicit conversions of generic pointers to
           "__ea" pointers.  The default is to allow address
           space pointer conversions.

       --mmccaacchhee--ssiizzee==_c_a_c_h_e_-_s_i_z_e
           This option controls the version of libgcc that the
           compiler links to an executable and selects a
           software-managed cache for accessing variables in the
           "__ea" address space with a particular cache size.
           Possible options for _c_a_c_h_e_-_s_i_z_e are 88, 1166, 3322, 6644 and
           112288.  The default cache size is 64KB.

       --mmaattoommiicc--uuppddaatteess
       --mmnnoo--aattoommiicc--uuppddaatteess
           This option controls the version of libgcc that the
           compiler links to an executable and selects whether
           atomic updates to the software-managed cache of PPU-
           side variables are used.  If you use atomic updates,
           changes to a PPU variable from SPU code using the
           "__ea" named address space qualifier will not
           interfere with changes to other PPU variables residing
           in the same cache line from PPU code.  If you do not
           use atomic updates, such interference may occur;
           however, writing back cache lines will be more
           efficient.  The default behavior is to use atomic
           updates.

       --mmdduuaall--nnooppss
       --mmdduuaall--nnooppss==_n
           By default, GCC will insert nops to increase dual
           issue when it expects it to increase performance.  _n
           can be a value from 0 to 10.  A smaller _n will insert
           fewer nops.  10 is the default, 0 is the same as
           --mmnnoo--dduuaall--nnooppss.  Disabled with --OOss.

       --mmhhiinntt--mmaaxx--nnooppss==_n
           Maximum number of nops to insert for a branch hint.  A
           branch hint must be at least 8 instructions away from
           the branch it is effecting.  GCC will insert up to _n
           nops to enforce this, otherwise it will not generate
           the branch hint.



gcc-4.74                    2014-06-12                        331





GCC(1)                         GNU                         GCC(1)


       --mmhhiinntt--mmaaxx--ddiissttaannccee==_n
           The encoding of the branch hint instruction limits the
           hint to be within 256 instructions of the branch it is
           effecting.  By default, GCC makes sure it is within
           125.

       --mmssaaffee--hhiinnttss
           Work around a hardware bug that causes the SPU to
           stall indefinitely.  By default, GCC will insert the
           "hbrp" instruction to make sure this stall won't
           happen.

       _O_p_t_i_o_n_s _f_o_r _S_y_s_t_e_m _V

       These additional options are available on System V Release
       4 for compatibility with other compilers on those systems:

       --GG  Create a shared object.  It is recommended that
           --ssyymmbboolliicc or --sshhaarreedd be used instead.

       --QQyy Identify the versions of each tool used by the
           compiler, in a ".ident" assembler directive in the
           output.

       --QQnn Refrain from adding ".ident" directives to the output
           file (this is the default).

       --YYPP,,_d_i_r_s
           Search the directories _d_i_r_s, and no others, for
           libraries specified with --ll.

       --YYmm,,_d_i_r
           Look in the directory _d_i_r to find the M4 preprocessor.
           The assembler uses this option.

       _T_I_L_E_-_G_x _O_p_t_i_o_n_s

       These --mm options are supported on the TILE-Gx:

       --mmccppuu==_n_a_m_e
           Selects the type of CPU to be targeted.  Currently the
           only supported type is ttiilleeggxx.

       --mm3322
       --mm6644
           Generate code for a 32-bit or 64-bit environment.  The
           32-bit environment sets int, long, and pointer to 32
           bits.  The 64-bit environment sets int to 32 bits and
           long and pointer to 64 bits.

       _T_I_L_E_P_r_o _O_p_t_i_o_n_s

       These --mm options are supported on the TILEPro:




gcc-4.74                    2014-06-12                        332





GCC(1)                         GNU                         GCC(1)


       --mmccppuu==_n_a_m_e
           Selects the type of CPU to be targeted.  Currently the
           only supported type is ttiilleepprroo.

       --mm3322
           Generate code for a 32-bit environment, which sets
           int, long, and pointer to 32 bits.  This is the only
           supported behavior so the flag is essentially ignored.

       _V_8_5_0 _O_p_t_i_o_n_s

       These --mm options are defined for V850 implementations:

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Treat all calls as being far away (near).  If calls
           are assumed to be far away, the compiler will always
           load the functions address up into a register, and
           call indirect through the pointer.

       --mmnnoo--eepp
       --mmeepp
           Do not optimize (do optimize) basic blocks that use
           the same index pointer 4 or more times to copy pointer
           into the "ep" register, and use the shorter "sld" and
           "sst" instructions.  The --mmeepp option is on by default
           if you optimize.

       --mmnnoo--pprroolloogg--ffuunnccttiioonn
       --mmpprroolloogg--ffuunnccttiioonn
           Do not use (do use) external functions to save and
           restore registers at the prologue and epilogue of a
           function.  The external functions are slower, but use
           less code space if more than one function saves the
           same number of registers.  The --mmpprroolloogg--ffuunnccttiioonn
           option is on by default if you optimize.

       --mmssppaaccee
           Try to make the code as small as possible.  At
           present, this just turns on the --mmeepp and
           --mmpprroolloogg--ffuunnccttiioonn options.

       --mmttddaa==_n
           Put static or global variables whose size is _n bytes
           or less into the tiny data area that register "ep"
           points to.  The tiny data area can hold up to 256
           bytes in total (128 bytes for byte references).

       --mmssddaa==_n
           Put static or global variables whose size is _n bytes
           or less into the small data area that register "gp"
           points to.  The small data area can hold up to 64
           kilobytes.




gcc-4.74                    2014-06-12                        333





GCC(1)                         GNU                         GCC(1)


       --mmzzddaa==_n
           Put static or global variables whose size is _n bytes
           or less into the first 32 kilobytes of memory.

       --mmvv885500
           Specify that the target processor is the V850.

       --mmbbiigg--sswwiittcchh
           Generate code suitable for big switch tables.  Use
           this option only if the assembler/linker complain
           about out of range branches within a switch table.

       --mmaapppp--rreeggss
           This option will cause r2 and r5 to be used in the
           code generated by the compiler.  This setting is the
           default.

       --mmnnoo--aapppp--rreeggss
           This option will cause r2 and r5 to be treated as
           fixed registers.

       --mmvv885500ee22vv33
           Specify that the target processor is the V850E2V3.
           The preprocessor constants ____vv885500ee22vv33____ will be
           defined if this option is used.

       --mmvv885500ee22
           Specify that the target processor is the V850E2.  The
           preprocessor constants ____vv885500ee22____ will be defined if
           this option is used.

       --mmvv885500ee11
           Specify that the target processor is the V850E1.  The
           preprocessor constants ____vv885500ee11____ and ____vv885500ee____ will
           be defined if this option is used.

       --mmvv885500eess
           Specify that the target processor is the V850ES.  This
           is an alias for the --mmvv885500ee11 option.

       --mmvv885500ee
           Specify that the target processor is the V850E.  The
           preprocessor constant ____vv885500ee____ will be defined if
           this option is used.

           If neither --mmvv885500 nor --mmvv885500ee nor --mmvv885500ee11 nor
           --mmvv885500ee22 nor --mmvv885500ee22vv33 are defined then a default
           target processor will be chosen and the relevant
           ____vv885500**____ preprocessor constant will be defined.

           The preprocessor constants ____vv885500 and ____vv885511____ are
           always defined, regardless of which processor variant
           is the target.




gcc-4.74                    2014-06-12                        334





GCC(1)                         GNU                         GCC(1)


       --mmddiissaabbllee--ccaalllltt
           This option will suppress generation of the CALLT
           instruction for the v850e, v850e1, v850e2 and v850e2v3
           flavors of the v850 architecture.  The default is
           --mmnnoo--ddiissaabbllee--ccaalllltt which allows the CALLT instruction
           to be used.

       _V_A_X _O_p_t_i_o_n_s

       These --mm options are defined for the VAX:

       --mmuunniixx
           Do not output certain jump instructions ("aobleq" and
           so on) that the Unix assembler for the VAX cannot
           handle across long ranges.

       --mmggnnuu
           Do output those jump instructions, on the assumption
           that you will assemble with the GNU assembler.

       --mmgg Output code for G-format floating-point numbers
           instead of D-format.

       _V_x_W_o_r_k_s _O_p_t_i_o_n_s

       The options in this section are defined for all VxWorks
       targets.  Options specific to the target hardware are
       listed with the other options for that target.

       --mmrrttpp
           GCC can generate code for both VxWorks kernels and
           real time processes (RTPs).  This option switches from
           the former to the latter.  It also defines the
           preprocessor macro "__RTP__".

       --nnoonn--ssttaattiicc
           Link an RTP executable against shared libraries rather
           than static libraries.  The options --ssttaattiicc and
           --sshhaarreedd can also be used for RTPs; --ssttaattiicc is the
           default.

       --BBssttaattiicc
       --BBddyynnaammiicc
           These options are passed down to the linker.  They are
           defined for compatibility with Diab.

       --XXbbiinndd--llaazzyy
           Enable lazy binding of function calls.  This option is
           equivalent to --WWll,,--zz,,nnooww and is defined for
           compatibility with Diab.

       --XXbbiinndd--nnooww
           Disable lazy binding of function calls.  This option
           is the default and is defined for compatibility with



gcc-4.74                    2014-06-12                        335





GCC(1)                         GNU                         GCC(1)


           Diab.

       _x_8_6_-_6_4 _O_p_t_i_o_n_s

       These are listed under

       _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s

       These options are defined for Xstormy16:

       --mmssiimm
           Choose startup files and linker script suitable for
           the simulator.

       _X_t_e_n_s_a _O_p_t_i_o_n_s

       These options are supported for Xtensa targets:

       --mmccoonnsstt1166
       --mmnnoo--ccoonnsstt1166
           Enable or disable use of "CONST16" instructions for
           loading constant values.  The "CONST16" instruction is
           currently not a standard option from Tensilica.  When
           enabled, "CONST16" instructions are always used in
           place of the standard "L32R" instructions.  The use of
           "CONST16" is enabled by default only if the "L32R"
           instruction is not available.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable or disable use of fused multiply/add and
           multiply/subtract instructions in the floating-point
           option.  This has no effect if the floating-point
           option is not also enabled.  Disabling fused
           multiply/add and multiply/subtract instructions forces
           the compiler to use separate instructions for the
           multiply and add/subtract operations.  This may be
           desirable in some cases where strict IEEE
           754-compliant results are required: the fused multiply
           add/subtract instructions do not round the
           intermediate result, thereby producing results with
           _m_o_r_e bits of precision than specified by the IEEE
           standard.  Disabling fused multiply add/subtract
           instructions also ensures that the program output is
           not sensitive to the compiler's ability to combine
           multiply and add/subtract operations.

       --mmsseerriiaalliizzee--vvoollaattiillee
       --mmnnoo--sseerriiaalliizzee--vvoollaattiillee
           When this option is enabled, GCC inserts "MEMW"
           instructions before "volatile" memory references to
           guarantee sequential consistency.  The default is
           --mmsseerriiaalliizzee--vvoollaattiillee.  Use --mmnnoo--sseerriiaalliizzee--vvoollaattiillee to
           omit the "MEMW" instructions.



gcc-4.74                    2014-06-12                        336





GCC(1)                         GNU                         GCC(1)


       --mmffoorrccee--nnoo--ppiicc
           For targets, like GNU/Linux, where all user-mode
           Xtensa code must be position-independent code (PIC),
           this option disables PIC for compiling kernel code.

       --mmtteexxtt--sseeccttiioonn--lliitteerraallss
       --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss
           Control the treatment of literal pools.  The default
           is --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss, which places literals
           in a separate section in the output file.  This allows
           the literal pool to be placed in a data RAM/ROM, and
           it also allows the linker to combine literal pools
           from separate object files to remove redundant
           literals and improve code size.  With
           --mmtteexxtt--sseeccttiioonn--lliitteerraallss, the literals are interspersed
           in the text section in order to keep them as close as
           possible to their references.  This may be necessary
           for large assembly files.

       --mmttaarrggeett--aalliiggnn
       --mmnnoo--ttaarrggeett--aalliiggnn
           When this option is enabled, GCC instructs the
           assembler to automatically align instructions to
           reduce branch penalties at the expense of some code
           density.  The assembler attempts to widen density
           instructions to align branch targets and the
           instructions following call instructions.  If there
           are not enough preceding safe density instructions to
           align a target, no widening will be performed.  The
           default is --mmttaarrggeett--aalliiggnn.  These options do not
           affect the treatment of auto-aligned instructions like
           "LOOP", which the assembler will always align, either
           by widening density instructions or by inserting no-op
           instructions.

       --mmlloonnggccaallllss
       --mmnnoo--lloonnggccaallllss
           When this option is enabled, GCC instructs the
           assembler to translate direct calls to indirect calls
           unless it can determine that the target of a direct
           call is in the range allowed by the call instruction.
           This translation typically occurs for calls to
           functions in other source files.  Specifically, the
           assembler translates a direct "CALL" instruction into
           an "L32R" followed by a "CALLX" instruction.  The
           default is --mmnnoo--lloonnggccaallllss.  This option should be used
           in programs where the call target can potentially be
           out of range.  This option is implemented in the
           assembler, not the compiler, so the assembly code
           generated by GCC will still show direct call
           instructions---look at the disassembled object code to
           see the actual instructions.  Note that the assembler
           will use an indirect call for every cross-file call,
           not just those that really will be out of range.



gcc-4.74                    2014-06-12                        337





GCC(1)                         GNU                         GCC(1)


       _z_S_e_r_i_e_s _O_p_t_i_o_n_s

       These are listed under

       OOppttiioonnss ffoorr CCooddee GGeenneerraattiioonn CCoonnvveennttiioonnss

       These machine-independent options control the interface
       conventions used in code generation.

       Most of them have both positive and negative forms; the
       negative form of --ffffoooo would be --ffnnoo--ffoooo.  In the table
       below, only one of the forms is listed---the one that is
       not the default.  You can figure out the other form by
       either removing nnoo-- or adding it.

       --ffbboouunnddss--cchheecckk
           For front ends that support it, generate additional
           code to check that indices used to access arrays are
           within the declared range.  This is currently only
           supported by the Java and Fortran front ends, where
           this option defaults to true and false respectively.

       --ffttrraappvv
           This option generates traps for signed overflow on
           addition, subtraction, multiplication operations.

       --ffwwrraappvv
           This option instructs the compiler to assume that
           signed arithmetic overflow of addition, subtraction
           and multiplication wraps around using twos-complement
           representation.  This flag enables some optimizations
           and disables others.  This option is enabled by
           default for the Java front end, as required by the
           Java language specification.

       --ffeexxcceeppttiioonnss
           Enable exception handling.  Generates extra code
           needed to propagate exceptions.  For some targets,
           this implies GCC will generate frame unwind
           information for all functions, which can produce
           significant data size overhead, although it does not
           affect execution.  If you do not specify this option,
           GCC will enable it by default for languages like C++
           that normally require exception handling, and disable
           it for languages like C that do not normally require
           it.  However, you may need to enable this option when
           compiling C code that needs to interoperate properly
           with exception handlers written in C++.  You may also
           wish to disable this option if you are compiling older
           C++ programs that don't use exception handling.

       --ffnnoonn--ccaallll--eexxcceeppttiioonnss
           Generate code that allows trapping instructions to
           throw exceptions.  Note that this requires platform-



gcc-4.74                    2014-06-12                        338





GCC(1)                         GNU                         GCC(1)


           specific runtime support that does not exist
           everywhere.  Moreover, it only allows _t_r_a_p_p_i_n_g
           instructions to throw exceptions, i.e. memory
           references or floating-point instructions.  It does
           not allow exceptions to be thrown from arbitrary
           signal handlers such as "SIGALRM".

       --ffuunnwwiinndd--ttaabblleess
           Similar to --ffeexxcceeppttiioonnss, except that it will just
           generate any needed static data, but will not affect
           the generated code in any other way.  You will
           normally not enable this option; instead, a language
           processor that needs this handling would enable it on
           your behalf.

       --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
           Generate unwind table in dwarf2 format, if supported
           by target machine.  The table is exact at each
           instruction boundary, so it can be used for stack
           unwinding from asynchronous events (such as debugger
           or garbage collector).

       --ffppcccc--ssttrruucctt--rreettuurrnn
           Return "short" "struct" and "union" values in memory
           like longer ones, rather than in registers.  This
           convention is less efficient, but it has the advantage
           of allowing intercallability between GCC-compiled
           files and files compiled with other compilers,
           particularly the Portable C Compiler (pcc).

           The precise convention for returning structures in
           memory depends on the target configuration macros.

           Short structures and unions are those whose size and
           alignment match that of some integer type.

           WWaarrnniinngg:: code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn
           switch is not binary compatible with code compiled
           with the --ffrreegg--ssttrruucctt--rreettuurrnn switch.  Use it to
           conform to a non-default application binary interface.

       --ffrreegg--ssttrruucctt--rreettuurrnn
           Return "struct" and "union" values in registers when
           possible.  This is more efficient for small structures
           than --ffppcccc--ssttrruucctt--rreettuurrnn.

           If you specify neither --ffppcccc--ssttrruucctt--rreettuurrnn nor
           --ffrreegg--ssttrruucctt--rreettuurrnn, GCC defaults to whichever
           convention is standard for the target.  If there is no
           standard convention, GCC defaults to
           --ffppcccc--ssttrruucctt--rreettuurrnn, except on targets where GCC is
           the principal compiler.  In those cases, we can choose
           the standard, and we chose the more efficient register
           return alternative.



gcc-4.74                    2014-06-12                        339





GCC(1)                         GNU                         GCC(1)


           WWaarrnniinngg:: code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn
           switch is not binary compatible with code compiled
           with the --ffppcccc--ssttrruucctt--rreettuurrnn switch.  Use it to
           conform to a non-default application binary interface.

       --ffsshhoorrtt--eennuummss
           Allocate to an "enum" type only as many bytes as it
           needs for the declared range of possible values.
           Specifically, the "enum" type will be equivalent to
           the smallest integer type that has enough room.

           WWaarrnniinngg:: the --ffsshhoorrtt--eennuummss switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       --ffsshhoorrtt--ddoouubbllee
           Use the same size for "double" as for "float".

           WWaarrnniinngg:: the --ffsshhoorrtt--ddoouubbllee switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       --ffsshhoorrtt--wwcchhaarr
           Override the underlying type for wwcchhaarr__tt to be sshhoorrtt
           uunnssiiggnneedd iinntt instead of the default for the target.
           This option is useful for building programs to run
           under WINE.

           WWaarrnniinngg:: the --ffsshhoorrtt--wwcchhaarr switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       --ffnnoo--ccoommmmoonn
           In C code, controls the placement of uninitialized
           global variables.  Unix C compilers have traditionally
           permitted multiple definitions of such variables in
           different compilation units by placing the variables
           in a common block.  This is the behavior specified by
           --ffccoommmmoonn, and is the default for GCC on most targets.
           On the other hand, this behavior is not required by
           ISO C, and on some targets may carry a speed or code
           size penalty on variable references.  The --ffnnoo--ccoommmmoonn
           option specifies that the compiler should place
           uninitialized global variables in the data section of
           the object file, rather than generating them as common
           blocks.  This has the effect that if the same variable
           is declared (without "extern") in two different
           compilations, you will get a multiple-definition error
           when you link them.  In this case, you must compile
           with --ffccoommmmoonn instead.  Compiling with --ffnnoo--ccoommmmoonn is
           useful on targets for which it provides better



gcc-4.74                    2014-06-12                        340





GCC(1)                         GNU                         GCC(1)


           performance, or if you wish to verify that the program
           will work on other systems that always treat
           uninitialized variable declarations this way.

       --ffnnoo--iiddeenntt
           Ignore the ##iiddeenntt directive.

       --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
           Don't output a ".size" assembler directive, or
           anything else that would cause trouble if the function
           is split in the middle, and the two halves are placed
           at locations far apart in memory.  This option is used
           when compiling _c_r_t_s_t_u_f_f_._c; you should not need to use
           it for anything else.

       --ffvveerrbboossee--aassmm
           Put extra commentary information in the generated
           assembly code to make it more readable.  This option
           is generally only of use to those who actually need to
           read the generated assembly code (perhaps while
           debugging the compiler itself).

           --ffnnoo--vveerrbboossee--aassmm, the default, causes the extra
           information to be omitted and is useful when comparing
           two assembler files.

       --ffrreeccoorrdd--ggcccc--sswwiittcchheess
           This switch causes the command line that was used to
           invoke the compiler to be recorded into the object
           file that is being created.  This switch is only
           implemented on some targets and the exact format of
           the recording is target and binary file format
           dependent, but it usually takes the form of a section
           containing ASCII text.  This switch is related to the
           --ffvveerrbboossee--aassmm switch, but that switch only records
           information in the assembler output file as comments,
           so it never reaches the object file.  See also
           --ggrreeccoorrdd--ggcccc--sswwiittcchheess for another way of storing
           compiler options into the object file.

       --ffppiicc
           Generate position-independent code (PIC) suitable for
           use in a shared library, if supported for the target
           machine.  Such code accesses all constant addresses
           through a global offset table (GOT).  The dynamic
           loader resolves the GOT entries when the program
           starts (the dynamic loader is not part of GCC; it is
           part of the operating system).  If the GOT size for
           the linked executable exceeds a machine-specific
           maximum size, you get an error message from the linker
           indicating that --ffppiicc does not work; in that case,
           recompile with --ffPPIICC instead.  (These maximums are 8k
           on the SPARC and 32k on the m68k and RS/6000.  The 386
           has no such limit.)



gcc-4.74                    2014-06-12                        341





GCC(1)                         GNU                         GCC(1)


           Position-independent code requires special support,
           and therefore works only on certain machines.  For the
           386, GCC supports PIC for System V but not for the Sun
           386i.  Code generated for the IBM RS/6000 is always
           position-independent.

           When this flag is set, the macros "__pic__" and
           "__PIC__" are defined to 1.

       --ffPPIICC
           If supported for the target machine, emit position-
           independent code, suitable for dynamic linking and
           avoiding any limit on the size of the global offset
           table.  This option makes a difference on the m68k,
           PowerPC and SPARC.

           Position-independent code requires special support,
           and therefore works only on certain machines.

           When this flag is set, the macros "__pic__" and
           "__PIC__" are defined to 2.

       --ffppiiee
       --ffPPIIEE
           These options are similar to --ffppiicc and --ffPPIICC, but
           generated position independent code can be only linked
           into executables.  Usually these options are used when
           --ppiiee GCC option will be used during linking.

           --ffppiiee and --ffPPIIEE both define the macros "__pie__" and
           "__PIE__".  The macros have the value 1 for --ffppiiee and
           2 for --ffPPIIEE.

       --ffnnoo--jjuummpp--ttaabblleess
           Do not use jump tables for switch statements even
           where it would be more efficient than other code
           generation strategies.  This option is of use in
           conjunction with --ffppiicc or --ffPPIICC for building code that
           forms part of a dynamic linker and cannot reference
           the address of a jump table.  On some targets, jump
           tables do not require a GOT and this option is not
           needed.

       --ffffiixxeedd--_r_e_g
           Treat the register named _r_e_g as a fixed register;
           generated code should never refer to it (except
           perhaps as a stack pointer, frame pointer or in some
           other fixed role).

           _r_e_g must be the name of a register.  The register
           names accepted are machine-specific and are defined in
           the "REGISTER_NAMES" macro in the machine description
           macro file.




gcc-4.74                    2014-06-12                        342





GCC(1)                         GNU                         GCC(1)


           This flag does not have a negative form, because it
           specifies a three-way choice.

       --ffccaallll--uusseedd--_r_e_g
           Treat the register named _r_e_g as an allocable register
           that is clobbered by function calls.  It may be
           allocated for temporaries or variables that do not
           live across a call.  Functions compiled this way will
           not save and restore the register _r_e_g.

           It is an error to used this flag with the frame
           pointer or stack pointer.  Use of this flag for other
           registers that have fixed pervasive roles in the
           machine's execution model will produce disastrous
           results.

           This flag does not have a negative form, because it
           specifies a three-way choice.

       --ffccaallll--ssaavveedd--_r_e_g
           Treat the register named _r_e_g as an allocable register
           saved by functions.  It may be allocated even for
           temporaries or variables that live across a call.
           Functions compiled this way will save and restore the
           register _r_e_g if they use it.

           It is an error to used this flag with the frame
           pointer or stack pointer.  Use of this flag for other
           registers that have fixed pervasive roles in the
           machine's execution model will produce disastrous
           results.

           A different sort of disaster will result from the use
           of this flag for a register in which function values
           may be returned.

           This flag does not have a negative form, because it
           specifies a three-way choice.

       --ffppaacckk--ssttrruucctt[[==_n]]
           Without a value specified, pack all structure members
           together without holes.  When a value is specified
           (which must be a small power of two), pack structure
           members according to this value, representing the
           maximum alignment (that is, objects with default
           alignment requirements larger than this will be output
           potentially unaligned at the next fitting location.

           WWaarrnniinngg:: the --ffppaacckk--ssttrruucctt switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Additionally, it makes
           the code suboptimal.  Use it to conform to a non-
           default application binary interface.




gcc-4.74                    2014-06-12                        343





GCC(1)                         GNU                         GCC(1)


       --ffiinnssttrruummeenntt--ffuunnccttiioonnss
           Generate instrumentation calls for entry and exit to
           functions.  Just after function entry and just before
           function exit, the following profiling functions will
           be called with the address of the current function and
           its call site.  (On some platforms,
           "__builtin_return_address" does not work beyond the
           current function, so the call site information may not
           be available to the profiling functions otherwise.)

                   void __cyg_profile_func_enter (void *this_fn,
                                                  void *call_site);
                   void __cyg_profile_func_exit  (void *this_fn,
                                                  void *call_site);

           The first argument is the address of the start of the
           current function, which may be looked up exactly in
           the symbol table.

           This instrumentation is also done for functions
           expanded inline in other functions.  The profiling
           calls will indicate where, conceptually, the inline
           function is entered and exited.  This means that
           addressable versions of such functions must be
           available.  If all your uses of a function are
           expanded inline, this may mean an additional expansion
           of code size.  If you use eexxtteerrnn iinnlliinnee in your C
           code, an addressable version of such functions must be
           provided.  (This is normally the case anyways, but if
           you get lucky and the optimizer always expands the
           functions inline, you might have gotten away without
           providing static copies.)

           A function may be given the attribute
           "no_instrument_function", in which case this
           instrumentation will not be done.  This can be used,
           for example, for the profiling functions listed above,
           high-priority interrupt routines, and any functions
           from which the profiling functions cannot safely be
           called (perhaps signal handlers, if the profiling
           routines generate output or allocate memory).

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......
           Set the list of functions that are excluded from
           instrumentation (see the description of
           "-finstrument-functions").  If the file that contains
           a function definition matches with one of _f_i_l_e, then
           that function is not instrumented.  The match is done
           on substrings: if the _f_i_l_e parameter is a substring of
           the file name, it is considered to be a match.

           For example:

                   -finstrument-functions-exclude-file-list=/bits/stl,include/sys



gcc-4.74                    2014-06-12                        344





GCC(1)                         GNU                         GCC(1)


           will exclude any inline function defined in files
           whose pathnames contain "/bits/stl" or "include/sys".

           If, for some reason, you want to include letter ',' in
           one of _s_y_m, write ','. For example,
           "-finstrument-functions-exclude-file-list=',,tmp'"
           (note the single quote surrounding the option).

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           This is similar to
           "-finstrument-functions-exclude-file-list", but this
           option sets the list of function names to be excluded
           from instrumentation.  The function name to be matched
           is its user-visible name, such as "vector<int>
           blah(const vector<int> &)", not the internal mangled
           name (e.g., "_Z4blahRSt6vectorIiSaIiEE").  The match
           is done on substrings: if the _s_y_m parameter is a
           substring of the function name, it is considered to be
           a match.  For C99 and C++ extended identifiers, the
           function name must be given in UTF-8, not using
           universal character names.

       --ffssttaacckk--cchheecckk
           Generate code to verify that you do not go beyond the
           boundary of the stack.  You should specify this flag
           if you are running in an environment with multiple
           threads, but only rarely need to specify it in a
           single-threaded environment since stack overflow is
           automatically detected on nearly all systems if there
           is only one stack.

           Note that this switch does not actually cause checking
           to be done; the operating system or the language
           runtime must do that.  The switch causes generation of
           code to ensure that they see the stack being extended.

           You can additionally specify a string parameter: "no"
           means no checking, "generic" means force the use of
           old-style checking, "specific" means use the best
           checking method and is equivalent to bare
           --ffssttaacckk--cchheecckk.

           Old-style checking is a generic mechanism that
           requires no specific target support in the compiler
           but comes with the following drawbacks:

           1.  Modified allocation strategy for large objects:
               they will always be allocated dynamically if their
               size exceeds a fixed threshold.

           2.  Fixed limit on the size of the static frame of
               functions: when it is topped by a particular
               function, stack checking is not reliable and a
               warning is issued by the compiler.



gcc-4.74                    2014-06-12                        345





GCC(1)                         GNU                         GCC(1)


           3.  Inefficiency: because of both the modified
               allocation strategy and the generic
               implementation, the performances of the code are
               hampered.

           Note that old-style stack checking is also the
           fallback method for "specific" if no target support
           has been added in the compiler.

       --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g
       --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
       --ffnnoo--ssttaacckk--lliimmiitt
           Generate code to ensure that the stack does not grow
           beyond a certain value, either the value of a register
           or the address of a symbol.  If the stack would grow
           beyond the value, a signal is raised.  For most
           targets, the signal is raised before the stack
           overruns the boundary, so it is possible to catch the
           signal without taking special precautions.

           For instance, if the stack starts at absolute address
           00xx8800000000000000 and grows downwards, you can use the flags
           --ffssttaacckk--lliimmiitt--ssyymmbbooll==____ssttaacckk__lliimmiitt and
           --WWll,,----ddeeffssyymm,,____ssttaacckk__lliimmiitt==00xx77ffffee00000000 to enforce a
           stack limit of 128KB.  Note that this may only work
           with the GNU linker.

       --ffsspplliitt--ssttaacckk
           Generate code to automatically split the stack before
           it overflows.  The resulting program has a
           discontiguous stack which can only overflow if the
           program is unable to allocate any more memory.  This
           is most useful when running threaded programs, as it
           is no longer necessary to calculate a good stack size
           to use for each thread.  This is currently only
           implemented for the i386 and x86_64 back ends running
           GNU/Linux.

           When code compiled with --ffsspplliitt--ssttaacckk calls code
           compiled without --ffsspplliitt--ssttaacckk, there may not be much
           stack space available for the latter code to run.  If
           compiling all code, including library code, with
           --ffsspplliitt--ssttaacckk is not an option, then the linker can
           fix up these calls so that the code compiled without
           --ffsspplliitt--ssttaacckk always has a large stack.  Support for
           this is implemented in the gold linker in GNU binutils
           release 2.21 and later.

       --fflleeaaddiinngg--uunnddeerrssccoorree
           This option and its counterpart,
           --ffnnoo--lleeaaddiinngg--uunnddeerrssccoorree, forcibly change the way C
           symbols are represented in the object file.  One use
           is to help link with legacy assembly code.




gcc-4.74                    2014-06-12                        346





GCC(1)                         GNU                         GCC(1)


           WWaarrnniinngg:: the --fflleeaaddiinngg--uunnddeerrssccoorree switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.  Not all
           targets provide complete support for this switch.

       --ffttllss--mmooddeell==_m_o_d_e_l
           Alter the thread-local storage model to be used.  The
           _m_o_d_e_l argument should be one of "global-dynamic",
           "local-dynamic", "initial-exec" or "local-exec".

           The default without --ffppiicc is "initial-exec"; with
           --ffppiicc the default is "global-dynamic".

       --ffvviissiibbiilliittyy==_d_e_f_a_u_l_t_|_i_n_t_e_r_n_a_l_|_h_i_d_d_e_n_|_p_r_o_t_e_c_t_e_d
           Set the default ELF image symbol visibility to the
           specified option---all symbols will be marked with
           this unless overridden within the code.  Using this
           feature can very substantially improve linking and
           load times of shared object libraries, produce more
           optimized code, provide near-perfect API export and
           prevent symbol clashes.  It is ssttrroonnggllyy recommended
           that you use this in any shared objects you
           distribute.

           Despite the nomenclature, "default" always means
           public; i.e., available to be linked against from
           outside the shared object.  "protected" and "internal"
           are pretty useless in real-world usage so the only
           other commonly used option will be "hidden".  The
           default if --ffvviissiibbiilliittyy isn't specified is "default",
           i.e., make every symbol public---this causes the same
           behavior as previous versions of GCC.

           A good explanation of the benefits offered by ensuring
           ELF symbols have the correct visibility is given by
           "How To Write Shared Libraries" by Ulrich Drepper
           (which can be found at
           <hhttttpp::////ppeeooppllee..rreeddhhaatt..ccoomm//~~ddrreeppppeerr//>)---however a
           superior solution made possible by this option to
           marking things hidden when the default is public is to
           make the default hidden and mark things public.  This
           is the norm with DLL's on Windows and with
           --ffvviissiibbiilliittyy==hhiiddddeenn and "__attribute__
           ((visibility("default")))" instead of
           "__declspec(dllexport)" you get almost identical
           semantics with identical syntax.  This is a great boon
           to those working with cross-platform projects.

           For those adding visibility support to existing code,
           you may find ##pprraaggmmaa GGCCCC vviissiibbiilliittyy of use.  This
           works by you enclosing the declarations you wish to
           set visibility for with (for example) ##pprraaggmmaa GGCCCC
           vviissiibbiilliittyy ppuusshh((hhiiddddeenn)) and ##pprraaggmmaa GGCCCC vviissiibbiilliittyy



gcc-4.74                    2014-06-12                        347





GCC(1)                         GNU                         GCC(1)


           ppoopp.  Bear in mind that symbol visibility should be
           viewed aass ppaarrtt ooff tthhee AAPPII iinntteerrffaaccee ccoonnttrraacctt and thus
           all new code should always specify visibility when it
           is not the default; i.e., declarations only for use
           within the local DSO should aallwwaayyss be marked
           explicitly as hidden as so to avoid PLT indirection
           overheads---making this abundantly clear also aids
           readability and self-documentation of the code.  Note
           that due to ISO C++ specification requirements,
           operator new and operator delete must always be of
           default visibility.

           Be aware that headers from outside your project, in
           particular system headers and headers from any other
           library you use, may not be expecting to be compiled
           with visibility other than the default.  You may need
           to explicitly say ##pprraaggmmaa GGCCCC vviissiibbiilliittyy ppuusshh((ddeeffaauulltt))
           before including any such headers.

           eexxtteerrnn declarations are not affected by --ffvviissiibbiilliittyy,
           so a lot of code can be recompiled with
           --ffvviissiibbiilliittyy==hhiiddddeenn with no modifications.  However,
           this means that calls to eexxtteerrnn functions with no
           explicit visibility will use the PLT, so it is more
           effective to use ____aattttrriibbuuttee ((((vviissiibbiilliittyy)))) and/or
           ##pprraaggmmaa GGCCCC vviissiibbiilliittyy to tell the compiler which
           eexxtteerrnn declarations should be treated as hidden.

           Note that --ffvviissiibbiilliittyy does affect C++ vague linkage
           entities. This means that, for instance, an exception
           class that will be thrown between DSOs must be
           explicitly marked with default visibility so that the
           ttyyppee__iinnffoo nodes will be unified between the DSOs.

           An overview of these techniques, their benefits and
           how to use them is at
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//wwiikkii//VViissiibbiilliittyy>.

       --ffssttrriicctt--vvoollaattiillee--bbiittffiieellddss
           This option should be used if accesses to volatile
           bit-fields (or other structure fields, although the
           compiler usually honors those types anyway) should use
           a single access of the width of the field's type,
           aligned to a natural alignment if possible.  For
           example, targets with memory-mapped peripheral
           registers might require all such accesses to be 16
           bits wide; with this flag the user could declare all
           peripheral bit-fields as "unsigned short" (assuming
           short is 16 bits on these targets) to force GCC to use
           16-bit accesses instead of, perhaps, a more efficient
           32-bit access.

           If this option is disabled, the compiler will use the
           most efficient instruction.  In the previous example,



gcc-4.74                    2014-06-12                        348





GCC(1)                         GNU                         GCC(1)


           that might be a 32-bit load instruction, even though
           that will access bytes that do not contain any portion
           of the bit-field, or memory-mapped registers unrelated
           to the one being updated.

           If the target requires strict alignment, and honoring
           the field type would require violating this alignment,
           a warning is issued.  If the field has "packed"
           attribute, the access is done without honoring the
           field type.  If the field doesn't have "packed"
           attribute, the access is done honoring the field type.
           In both cases, GCC assumes that the user knows
           something about the target hardware that it is unaware
           of.

           The default value of this option is determined by the
           application binary interface for the target processor.

EENNVVIIRROONNMMEENNTT
       This section describes several environment variables that
       affect how GCC operates.  Some of them work by specifying
       directories or prefixes to use when searching for various
       kinds of files.  Some are used to specify other aspects of
       the compilation environment.

       Note that you can also specify places to search using
       options such as --BB, --II and --LL.  These take precedence over
       places specified using environment variables, which in
       turn take precedence over those specified by the
       configuration of GCC.

       LLAANNGG
       LLCC__CCTTYYPPEE
       LLCC__MMEESSSSAAGGEESS
       LLCC__AALLLL
           These environment variables control the way that GCC
           uses localization information which allows GCC to work
           with different national conventions.  GCC inspects the
           locale categories LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS if it has
           been configured to do so.  These locale categories can
           be set to any value supported by your installation.  A
           typical value is eenn__GGBB..UUTTFF--88 for English in the United
           Kingdom encoded in UTF-8.

           The LLCC__CCTTYYPPEE environment variable specifies character
           classification.  GCC uses it to determine the
           character boundaries in a string; this is needed for
           some multibyte encodings that contain quote and escape
           characters that would otherwise be interpreted as a
           string end or escape.

           The LLCC__MMEESSSSAAGGEESS environment variable specifies the
           language to use in diagnostic messages.




gcc-4.74                    2014-06-12                        349





GCC(1)                         GNU                         GCC(1)


           If the LLCC__AALLLL environment variable is set, it
           overrides the value of LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS;
           otherwise, LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS default to the
           value of the LLAANNGG environment variable.  If none of
           these variables are set, GCC defaults to traditional C
           English behavior.

       TTMMPPDDIIRR
           If TTMMPPDDIIRR is set, it specifies the directory to use
           for temporary files.  GCC uses temporary files to hold
           the output of one stage of compilation which is to be
           used as input to the next stage: for example, the
           output of the preprocessor, which is the input to the
           compiler proper.

       GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG
           Setting GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG is nearly equivalent to
           passing --ffccoommppaarree--ddeebbuugg to the compiler driver.  See
           the documentation of this option for more details.

       GGCCCC__EEXXEECC__PPRREEFFIIXX
           If GGCCCC__EEXXEECC__PPRREEFFIIXX is set, it specifies a prefix to
           use in the names of the subprograms executed by the
           compiler.  No slash is added when this prefix is
           combined with the name of a subprogram, but you can
           specify a prefix that ends with a slash if you wish.

           If GGCCCC__EEXXEECC__PPRREEFFIIXX is not set, GCC will attempt to
           figure out an appropriate prefix to use based on the
           pathname it was invoked with.

           If GCC cannot find the subprogram using the specified
           prefix, it tries looking in the usual places for the
           subprogram.

           The default value of GGCCCC__EEXXEECC__PPRREEFFIIXX is
           _p_r_e_f_i_x_/_l_i_b_/_g_c_c_/ where _p_r_e_f_i_x is the prefix to the
           installed compiler. In many cases _p_r_e_f_i_x is the value
           of "prefix" when you ran the _c_o_n_f_i_g_u_r_e script.

           Other prefixes specified with --BB take precedence over
           this prefix.

           This prefix is also used for finding files such as
           _c_r_t_0_._o that are used for linking.

           In addition, the prefix is used in an unusual way in
           finding the directories to search for header files.
           For each of the standard directories whose name
           normally begins with //uussrr//llooccaall//lliibb//ggcccc (more
           precisely, with the value of GGCCCC__IINNCCLLUUDDEE__DDIIRR), GCC
           tries replacing that beginning with the specified
           prefix to produce an alternate directory name.  Thus,
           with --BBffoooo//, GCC will search _f_o_o_/_b_a_r where it would



gcc-4.74                    2014-06-12                        350





GCC(1)                         GNU                         GCC(1)


           normally search _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_b_a_r.  These alternate
           directories are searched first; the standard
           directories come next. If a standard directory begins
           with the configured _p_r_e_f_i_x then the value of _p_r_e_f_i_x is
           replaced by GGCCCC__EEXXEECC__PPRREEFFIIXX when looking for header
           files.

       CCOOMMPPIILLEERR__PPAATTHH
           The value of CCOOMMPPIILLEERR__PPAATTHH is a colon-separated list
           of directories, much like PPAATTHH.  GCC tries the
           directories thus specified when searching for
           subprograms, if it can't find the subprograms using
           GGCCCC__EEXXEECC__PPRREEFFIIXX.

       LLIIBBRRAARRYY__PPAATTHH
           The value of LLIIBBRRAARRYY__PPAATTHH is a colon-separated list of
           directories, much like PPAATTHH.  When configured as a
           native compiler, GCC tries the directories thus
           specified when searching for special linker files, if
           it can't find them using GGCCCC__EEXXEECC__PPRREEFFIIXX.  Linking
           using GCC also uses these directories when searching
           for ordinary libraries for the --ll option (but
           directories specified with --LL come first).

       LLAANNGG
           This variable is used to pass locale information to
           the compiler.  One way in which this information is
           used is to determine the character set to be used when
           character literals, string literals and comments are
           parsed in C and C++.  When the compiler is configured
           to allow multibyte characters, the following values
           for LLAANNGG are recognized:

           CC--JJIISS
               Recognize JIS characters.

           CC--SSJJIISS
               Recognize SJIS characters.

           CC--EEUUCCJJPP
               Recognize EUCJP characters.

           If LLAANNGG is not defined, or if it has some other value,
           then the compiler will use mblen and mbtowc as defined
           by the default locale to recognize and translate
           multibyte characters.

       Some additional environments variables affect the behavior
       of the preprocessor.

       CCPPAATTHH
       CC__IINNCCLLUUDDEE__PPAATTHH
       CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH




gcc-4.74                    2014-06-12                        351





GCC(1)                         GNU                         GCC(1)


       OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH
           Each variable's value is a list of directories
           separated by a special character, much like PPAATTHH, in
           which to look for header files.  The special
           character, "PATH_SEPARATOR", is target-dependent and
           determined at GCC build time.  For Microsoft Windows-
           based targets it is a semicolon, and for almost all
           other targets it is a colon.

           CCPPAATTHH specifies a list of directories to be searched
           as if specified with --II, but after any paths given
           with --II options on the command line.  This environment
           variable is used regardless of which language is being
           preprocessed.

           The remaining environment variables apply only when
           preprocessing the particular language indicated.  Each
           specifies a list of directories to be searched as if
           specified with --iissyysstteemm, but after any paths given
           with --iissyysstteemm options on the command line.

           In all these variables, an empty element instructs the
           compiler to search its current working directory.
           Empty elements can appear at the beginning or end of a
           path.  For instance, if the value of CCPPAATTHH is
           ":/special/include", that has the same effect as
           --II.. --II//ssppeecciiaall//iinncclluuddee.

       DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT
           If this variable is set, its value specifies how to
           output dependencies for Make based on the non-system
           header files processed by the compiler.  System header
           files are ignored in the dependency output.

           The value of DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT can be just a file
           name, in which case the Make rules are written to that
           file, guessing the target name from the source file
           name.  Or the value can have the form _f_i_l_e _t_a_r_g_e_t, in
           which case the rules are written to file _f_i_l_e using
           _t_a_r_g_e_t as the target name.

           In other words, this environment variable is
           equivalent to combining the options --MMMM and --MMFF, with
           an optional --MMTT switch too.

       SSUUNNPPRROO__DDEEPPEENNDDEENNCCIIEESS
           This variable is the same as DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT (see
           above), except that system header files are not
           ignored, so it implies --MM rather than --MMMM.  However,
           the dependence on the main input file is omitted.

BBUUGGSS
       For instructions on reporting bugs, see
       <hhttttpp::////ggcccc..ggnnuu..oorrgg//bbuuggss..hhttmmll>.



gcc-4.74                    2014-06-12                        352





GCC(1)                         GNU                         GCC(1)


FFOOOOTTNNOOTTEESS
       1.  On some systems, ggcccc --sshhaarreedd needs to build
           supplementary stub code for constructors to work.  On
           multi-libbed systems, ggcccc --sshhaarreedd must select the
           correct support libraries to link against.  Failing to
           supply the correct flags may lead to subtle defects.
           Supplying them in cases where they are not necessary
           is innocuous.

SSEEEE AALLSSOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _c_p_p(1), _g_c_o_v(1), _a_s(1),
       _l_d(1), _g_d_b(1), _a_d_b(1), _d_b_x(1), _s_d_b(1) and the Info entries
       for _g_c_c, _c_p_p, _a_s, _l_d, _b_i_n_u_t_i_l_s and _g_d_b.

AAUUTTHHOORR
       See the Info entry for ggcccc, or
       <hhttttpp::////ggcccc..ggnnuu..oorrgg//oonnlliinneeddooccss//ggcccc//CCoonnttrriibbuuttoorrss..hhttmmll>, for
       contributors to GCC.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996,
       1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
       2006, 2007, 2008, 2009, 2010, 2011, 2012 Free Software
       Foundation, Inc.

       Permission is granted to copy, distribute and/or modify
       this document under the terms of the GNU Free
       Documentation License, Version 1.3 or any later version
       published by the Free Software Foundation; with the
       Invariant Sections being "GNU General Public License" and
       "Funding Free Software", the Front-Cover texts being (a)
       (see below), and with the Back-Cover Texts being (b) (see
       below).  A copy of the license is included in the _g_f_d_l(7)
       man page.

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.













gcc-4.74                    2014-06-12                        353


